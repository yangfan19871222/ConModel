!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AccuracyLayerTest	test/test_accuracy_layer.cpp	/^  AccuracyLayerTest()$/;"	f	class:caffe::AccuracyLayerTest
AccuracyLayerTest	test/test_accuracy_layer.cpp	/^class AccuracyLayerTest : public CPUDeviceTest<Dtype> {$/;"	c	namespace:caffe	file:
AdaDeltaPreSolve	solvers/adadelta_solver.cpp	/^void AdaDeltaSolver<Dtype>::AdaDeltaPreSolve() {$/;"	f	class:caffe::AdaDeltaSolver
AdaDeltaSolverTest	test/test_gradient_based_solver.cpp	/^class AdaDeltaSolverTest : public GradientBasedSolverTest<TypeParam> {$/;"	c	namespace:caffe	file:
AdaGradSolverTest	test/test_gradient_based_solver.cpp	/^class AdaGradSolverTest : public GradientBasedSolverTest<TypeParam> {$/;"	c	namespace:caffe	file:
AdamPreSolve	solvers/adam_solver.cpp	/^void AdamSolver<Dtype>::AdamPreSolve() {$/;"	f	class:caffe::AdamSolver
AdamSolverTest	test/test_gradient_based_solver.cpp	/^class AdamSolverTest : public GradientBasedSolverTest<TypeParam> {$/;"	c	namespace:caffe	file:
AddDatumVector	layers/memory_data_layer.cpp	/^void MemoryDataLayer<Dtype>::AddDatumVector(const vector<Datum>& datum_vector) {$/;"	f	class:caffe::MemoryDataLayer
AddMatVector	layers/memory_data_layer.cpp	/^void MemoryDataLayer<Dtype>::AddMatVector(const vector<cv::Mat>& mat_vector,$/;"	f	class:caffe::MemoryDataLayer
AppendBottom	net.cpp	/^int Net<Dtype>::AppendBottom(const NetParameter& param, const int layer_id,$/;"	f	class:caffe::Net
AppendParam	net.cpp	/^void Net<Dtype>::AppendParam(const NetParameter& param, const int layer_id,$/;"	f	class:caffe::Net
AppendTop	net.cpp	/^void Net<Dtype>::AppendTop(const NetParameter& param, const int layer_id,$/;"	f	class:caffe::Net
ApplyUpdate	solvers/sgd_solver.cpp	/^void SGDSolver<Dtype>::ApplyUpdate() {$/;"	f	class:caffe::SGDSolver
ArgMaxLayerTest	test/test_argmax_layer.cpp	/^  ArgMaxLayerTest()$/;"	f	class:caffe::ArgMaxLayerTest
ArgMaxLayerTest	test/test_argmax_layer.cpp	/^class ArgMaxLayerTest : public CPUDeviceTest<Dtype> {$/;"	c	namespace:caffe	file:
BATCH_SIZE	test/test_batch_norm_layer.cpp	15;"	d	file:
Backward	net.cpp	/^void Net<Dtype>::Backward() {$/;"	f	class:caffe::Net
BackwardDebugInfo	net.cpp	/^void Net<Dtype>::BackwardDebugInfo(const int layer_id) {$/;"	f	class:caffe::Net
BackwardFrom	net.cpp	/^void Net<Dtype>::BackwardFrom(int start) {$/;"	f	class:caffe::Net
BackwardFromTo	net.cpp	/^void Net<Dtype>::BackwardFromTo(int start, int end) {$/;"	f	class:caffe::Net
BackwardTo	net.cpp	/^void Net<Dtype>::BackwardTo(int end) {$/;"	f	class:caffe::Net
Backward_cpu	layers/absval_layer.cpp	/^void AbsValLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::AbsValLayer
Backward_cpu	layers/batch_norm_layer.cpp	/^void BatchNormLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::BatchNormLayer
Backward_cpu	layers/batch_reindex_layer.cpp	/^void BatchReindexLayer<Dtype>::Backward_cpu($/;"	f	class:caffe::BatchReindexLayer
Backward_cpu	layers/bias_layer.cpp	/^void BiasLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::BiasLayer
Backward_cpu	layers/bnll_layer.cpp	/^void BNLLLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::BNLLLayer
Backward_cpu	layers/center_loss_layer.cpp	/^void CenterLossLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::CenterLossLayer
Backward_cpu	layers/concat_layer.cpp	/^void ConcatLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::ConcatLayer
Backward_cpu	layers/contrastive_loss_layer.cpp	/^void ContrastiveLossLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::ContrastiveLossLayer
Backward_cpu	layers/conv_layer.cpp	/^void ConvolutionLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::ConvolutionLayer
Backward_cpu	layers/crop_layer.cpp	/^void CropLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::CropLayer
Backward_cpu	layers/deconv_layer.cpp	/^void DeconvolutionLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::DeconvolutionLayer
Backward_cpu	layers/dropout_layer.cpp	/^void DropoutLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::DropoutLayer
Backward_cpu	layers/eltwise_layer.cpp	/^void EltwiseLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::EltwiseLayer
Backward_cpu	layers/elu_layer.cpp	/^void ELULayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::ELULayer
Backward_cpu	layers/embed_layer.cpp	/^void EmbedLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::EmbedLayer
Backward_cpu	layers/euclidean_loss_layer.cpp	/^void EuclideanLossLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::EuclideanLossLayer
Backward_cpu	layers/exp_layer.cpp	/^void ExpLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::ExpLayer
Backward_cpu	layers/filter_layer.cpp	/^void FilterLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::FilterLayer
Backward_cpu	layers/flatten_layer.cpp	/^void FlattenLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::FlattenLayer
Backward_cpu	layers/hdf5_output_layer.cpp	/^void HDF5OutputLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::HDF5OutputLayer
Backward_cpu	layers/hinge_loss_layer.cpp	/^void HingeLossLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::HingeLossLayer
Backward_cpu	layers/im2col_layer.cpp	/^void Im2colLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::Im2colLayer
Backward_cpu	layers/infogain_loss_layer.cpp	/^void InfogainLossLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::InfogainLossLayer
Backward_cpu	layers/inner_product_layer.cpp	/^void InnerProductLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::InnerProductLayer
Backward_cpu	layers/log_layer.cpp	/^void LogLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::LogLayer
Backward_cpu	layers/lrn_layer.cpp	/^void LRNLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::LRNLayer
Backward_cpu	layers/lstm_unit_layer.cpp	/^void LSTMUnitLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::LSTMUnitLayer
Backward_cpu	layers/multinomial_logistic_loss_layer.cpp	/^void MultinomialLogisticLossLayer<Dtype>::Backward_cpu($/;"	f	class:caffe::MultinomialLogisticLossLayer
Backward_cpu	layers/mvn_layer.cpp	/^void MVNLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::MVNLayer
Backward_cpu	layers/normalize_layer.cpp	/^void NormalizeLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::NormalizeLayer
Backward_cpu	layers/pooling_layer.cpp	/^void PoolingLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::PoolingLayer
Backward_cpu	layers/power_layer.cpp	/^void PowerLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::PowerLayer
Backward_cpu	layers/prelu_layer.cpp	/^void PReLULayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::PReLULayer
Backward_cpu	layers/recurrent_layer.cpp	/^void RecurrentLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::RecurrentLayer
Backward_cpu	layers/reduction_layer.cpp	/^void ReductionLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::ReductionLayer
Backward_cpu	layers/relu_layer.cpp	/^void ReLULayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::ReLULayer
Backward_cpu	layers/scale_layer.cpp	/^void ScaleLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::ScaleLayer
Backward_cpu	layers/sigmoid_cross_entropy_loss_layer.cpp	/^void SigmoidCrossEntropyLossLayer<Dtype>::Backward_cpu($/;"	f	class:caffe::SigmoidCrossEntropyLossLayer
Backward_cpu	layers/sigmoid_layer.cpp	/^void SigmoidLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::SigmoidLayer
Backward_cpu	layers/silence_layer.cpp	/^void SilenceLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::SilenceLayer
Backward_cpu	layers/slice_layer.cpp	/^void SliceLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::SliceLayer
Backward_cpu	layers/softmax_layer.cpp	/^void SoftmaxLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::SoftmaxLayer
Backward_cpu	layers/softmax_loss_layer.cpp	/^void SoftmaxWithLossLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::SoftmaxWithLossLayer
Backward_cpu	layers/split_layer.cpp	/^void SplitLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::SplitLayer
Backward_cpu	layers/spp_layer.cpp	/^void SPPLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::SPPLayer
Backward_cpu	layers/tanh_layer.cpp	/^void TanHLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::TanHLayer
Backward_cpu	layers/tile_layer.cpp	/^void TileLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::TileLayer
BaseDataLayer	layers/base_data_layer.cpp	/^BaseDataLayer<Dtype>::BaseDataLayer(const LayerParameter& param)$/;"	f	class:caffe::BaseDataLayer
BasePrefetchingDataLayer	layers/base_data_layer.cpp	/^BasePrefetchingDataLayer<Dtype>::BasePrefetchingDataLayer($/;"	f	class:caffe::BasePrefetchingDataLayer
BatchNormLayerTest	test/test_batch_norm_layer.cpp	/^    BatchNormLayerTest()$/;"	f	class:caffe::BatchNormLayerTest
BatchNormLayerTest	test/test_batch_norm_layer.cpp	/^  class BatchNormLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
BatchReindexLayerTest	test/test_batch_reindex_layer.cpp	/^  BatchReindexLayerTest()$/;"	f	class:caffe::BatchReindexLayerTest
BatchReindexLayerTest	test/test_batch_reindex_layer.cpp	/^class BatchReindexLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
BenchmarkTest	test/test_benchmark.cpp	/^class BenchmarkTest : public MultiDeviceTest<TypeParam> {};$/;"	c	namespace:caffe	file:
BiasLayerTest	test/test_bias_layer.cpp	/^  BiasLayerTest()$/;"	f	class:caffe::BiasLayerTest
BiasLayerTest	test/test_bias_layer.cpp	/^class BiasLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
Blob	blob.cpp	/^Blob<Dtype>::Blob(const int num, const int channels, const int height,$/;"	f	class:caffe::Blob
Blob	blob.cpp	/^Blob<Dtype>::Blob(const vector<int>& shape)$/;"	f	class:caffe::Blob
BlobMathTest	test/test_blob.cpp	/^  BlobMathTest()$/;"	f	class:caffe::BlobMathTest
BlobMathTest	test/test_blob.cpp	/^class BlobMathTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
BlobSimpleTest	test/test_blob.cpp	/^  BlobSimpleTest()$/;"	f	class:caffe::BlobSimpleTest
BlobSimpleTest	test/test_blob.cpp	/^class BlobSimpleTest : public ::testing::Test {$/;"	c	namespace:caffe	file:
BlockingQueue	util/blocking_queue.cpp	/^BlockingQueue<T>::BlockingQueue()$/;"	f	class:caffe::BlockingQueue
Body	data_reader.cpp	/^DataReader::Body::Body(const LayerParameter& param)$/;"	f	class:caffe::DataReader::Body
CAFFE_TEST_CUDA_PROP	test/test_caffe_main.cpp	/^  cudaDeviceProp CAFFE_TEST_CUDA_PROP;$/;"	m	namespace:caffe	file:
CMAKE_BINARY_DIR	Makefile	/^CMAKE_BINARY_DIR = \/media\/disk1\/yangfan\/face_reco\/caffe-face$/;"	m
CMAKE_BINARY_DIR	test/Makefile	/^CMAKE_BINARY_DIR = \/media\/disk1\/yangfan\/face_reco\/caffe-face$/;"	m
CMAKE_COMMAND	Makefile	/^CMAKE_COMMAND = \/usr\/local\/bin\/cmake$/;"	m
CMAKE_COMMAND	test/Makefile	/^CMAKE_COMMAND = \/usr\/local\/bin\/cmake$/;"	m
CMAKE_EDIT_COMMAND	Makefile	/^CMAKE_EDIT_COMMAND = \/usr\/local\/bin\/ccmake$/;"	m
CMAKE_EDIT_COMMAND	test/Makefile	/^CMAKE_EDIT_COMMAND = \/usr\/local\/bin\/ccmake$/;"	m
CMAKE_SOURCE_DIR	Makefile	/^CMAKE_SOURCE_DIR = \/media\/disk1\/yangfan\/face_reco\/caffe-face$/;"	m
CMAKE_SOURCE_DIR	test/Makefile	/^CMAKE_SOURCE_DIR = \/media\/disk1\/yangfan\/face_reco\/caffe-face$/;"	m
CONVERT_LAYER_TRANSFORM_PARAM	util/upgrade_proto.cpp	633;"	d	file:
CPUMathFunctionsTest	test/test_math_functions.cpp	/^class CPUMathFunctionsTest$/;"	c	namespace:caffe	file:
CPUStochasticPoolingLayerTest	test/test_stochastic_pooling.cpp	/^class CPUStochasticPoolingLayerTest$/;"	c	namespace:caffe	file:
CPUTimer	util/benchmark.cpp	/^CPUTimer::CPUTimer() {$/;"	f	class:caffe::CPUTimer
CUDNN_STREAMS_PER_GROUP	layers/cudnn_conv_layer.cpp	12;"	d	file:
CVMatToDatum	util/io.cpp	/^void CVMatToDatum(const cv::Mat& cv_img, Datum* datum) {$/;"	f	namespace:caffe
Caffe	common.cpp	/^Caffe::Caffe()$/;"	f	class:caffe::Caffe
CheckAccumulation	test/test_gradient_based_solver.cpp	/^  void CheckAccumulation(const Dtype kLearningRate, const Dtype kWeightDecay,$/;"	f	class:caffe::GradientBasedSolverTest
CheckBlobEqual	test/test_hdf5_output_layer.cpp	/^void HDF5OutputLayerTest<TypeParam>::CheckBlobEqual(const Blob<Dtype>& b1,$/;"	f	class:caffe::HDF5OutputLayerTest
CheckDevice	common.cpp	/^bool Caffe::CheckDevice(const int device_id) {$/;"	f	class:caffe::Caffe
CheckForSignals	util/signal_handler.cpp	/^SolverAction::Enum SignalHandler::CheckForSignals() const {$/;"	f	class:caffe::SignalHandler
CheckLeastSquaresUpdate	test/test_gradient_based_solver.cpp	/^  void CheckLeastSquaresUpdate($/;"	f	class:caffe::GradientBasedSolverTest
CheckSnapshotWritePermissions	solver.cpp	/^void Solver<Dtype>::CheckSnapshotWritePermissions() {$/;"	f	class:caffe::Solver
ClearParamDiffs	net.cpp	/^void Net<Dtype>::ClearParamDiffs() {$/;"	f	class:caffe::Net
ClipGradients	solvers/sgd_solver.cpp	/^void SGDSolver<Dtype>::ClipGradients() {$/;"	f	class:caffe::SGDSolver
Commit	util/db_lmdb.cpp	/^void LMDBTransaction::Commit() {$/;"	f	class:caffe::db::LMDBTransaction
CommonTest	test/test_common.cpp	/^class CommonTest : public ::testing::Test {};$/;"	c	namespace:caffe	file:
ComputeLeastSquaresUpdate	test/test_gradient_based_solver.cpp	/^  void ComputeLeastSquaresUpdate(const Dtype learning_rate,$/;"	f	class:caffe::GradientBasedSolverTest
ComputeUpdateValue	solvers/adadelta_solver.cpp	/^void AdaDeltaSolver<Dtype>::ComputeUpdateValue(int param_id, Dtype rate) {$/;"	f	class:caffe::AdaDeltaSolver
ComputeUpdateValue	solvers/adagrad_solver.cpp	/^void AdaGradSolver<Dtype>::ComputeUpdateValue(int param_id, Dtype rate) {$/;"	f	class:caffe::AdaGradSolver
ComputeUpdateValue	solvers/adam_solver.cpp	/^void AdamSolver<Dtype>::ComputeUpdateValue(int param_id, Dtype rate) {$/;"	f	class:caffe::AdamSolver
ComputeUpdateValue	solvers/nesterov_solver.cpp	/^void NesterovSolver<Dtype>::ComputeUpdateValue(int param_id, Dtype rate) {$/;"	f	class:caffe::NesterovSolver
ComputeUpdateValue	solvers/rmsprop_solver.cpp	/^void RMSPropSolver<Dtype>::ComputeUpdateValue(int param_id, Dtype rate) {$/;"	f	class:caffe::RMSPropSolver
ComputeUpdateValue	solvers/sgd_solver.cpp	/^void SGDSolver<Dtype>::ComputeUpdateValue(int param_id, Dtype rate) {$/;"	f	class:caffe::SGDSolver
ConcatLayerTest	test/test_concat_layer.cpp	/^  ConcatLayerTest()$/;"	f	class:caffe::ConcatLayerTest
ConcatLayerTest	test/test_concat_layer.cpp	/^class ConcatLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
ConfigureSplitLayer	util/insert_splits.cpp	/^void ConfigureSplitLayer(const string& layer_name, const string& blob_name,$/;"	f	namespace:caffe
ConstantFillerTest	test/test_filler.cpp	/^  ConstantFillerTest()$/;"	f	class:caffe::ConstantFillerTest
ConstantFillerTest	test/test_filler.cpp	/^class ConstantFillerTest : public ::testing::Test {$/;"	c	namespace:caffe	file:
ContrastiveLossLayerTest	test/test_contrastive_loss_layer.cpp	/^  ContrastiveLossLayerTest()$/;"	f	class:caffe::ContrastiveLossLayerTest
ContrastiveLossLayerTest	test/test_contrastive_loss_layer.cpp	/^class ContrastiveLossLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
ConvolutionLayerTest	test/test_convolution_layer.cpp	/^  ConvolutionLayerTest()$/;"	f	class:caffe::ConvolutionLayerTest
ConvolutionLayerTest	test/test_convolution_layer.cpp	/^class ConvolutionLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
CopyFrom	blob.cpp	/^void Blob<Dtype>::CopyFrom(const Blob& source, bool copy_diff, bool reshape) {$/;"	f	class:caffe::Blob
CopyNetBlobs	test/test_net.cpp	/^  virtual void CopyNetBlobs(const bool copy_diff,$/;"	f	class:caffe::NetTest
CopyNetParams	test/test_net.cpp	/^  virtual void CopyNetParams(const bool copy_diff,$/;"	f	class:caffe::NetTest
CopyTrainedLayersFrom	net.cpp	/^void Net<Dtype>::CopyTrainedLayersFrom(const NetParameter& param) {$/;"	f	class:caffe::Net
CopyTrainedLayersFrom	net.cpp	/^void Net<Dtype>::CopyTrainedLayersFrom(const string trained_filename) {$/;"	f	class:caffe::Net
CopyTrainedLayersFromBinaryProto	net.cpp	/^void Net<Dtype>::CopyTrainedLayersFromBinaryProto($/;"	f	class:caffe::Net
CopyTrainedLayersFromHDF5	net.cpp	/^void Net<Dtype>::CopyTrainedLayersFromHDF5(const string trained_filename) {$/;"	f	class:caffe::Net
CropLayerTest	test/test_crop_layer.cpp	/^  CropLayerTest()$/;"	f	class:caffe::CropLayerTest
CropLayerTest	test/test_crop_layer.cpp	/^class CropLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
CrossChannelBackward_cpu	layers/lrn_layer.cpp	/^void LRNLayer<Dtype>::CrossChannelBackward_cpu($/;"	f	class:caffe::LRNLayer
CrossChannelForward_cpu	layers/lrn_layer.cpp	/^void LRNLayer<Dtype>::CrossChannelForward_cpu($/;"	f	class:caffe::LRNLayer
CuDNNConvolutionLayerTest	test/test_convolution_layer.cpp	/^  CuDNNConvolutionLayerTest()$/;"	f	class:caffe::CuDNNConvolutionLayerTest
CuDNNConvolutionLayerTest	test/test_convolution_layer.cpp	/^class CuDNNConvolutionLayerTest : public GPUDeviceTest<Dtype> {$/;"	c	namespace:caffe	file:
CuDNNLRNLayerTest	test/test_lrn_layer.cpp	/^  CuDNNLRNLayerTest()$/;"	f	class:caffe::CuDNNLRNLayerTest
CuDNNLRNLayerTest	test/test_lrn_layer.cpp	/^class CuDNNLRNLayerTest : public GPUDeviceTest<Dtype> {$/;"	c	namespace:caffe	file:
CuDNNNeuronLayerTest	test/test_neuron_layer.cpp	/^  CuDNNNeuronLayerTest()$/;"	f	class:caffe::CuDNNNeuronLayerTest
CuDNNNeuronLayerTest	test/test_neuron_layer.cpp	/^class CuDNNNeuronLayerTest : public GPUDeviceTest<Dtype> {$/;"	c	namespace:caffe	file:
CuDNNPoolingLayerTest	test/test_pooling_layer.cpp	/^  CuDNNPoolingLayerTest()$/;"	f	class:caffe::CuDNNPoolingLayerTest
CuDNNPoolingLayerTest	test/test_pooling_layer.cpp	/^class CuDNNPoolingLayerTest : public GPUDeviceTest<Dtype> {$/;"	c	namespace:caffe	file:
CuDNNSoftmaxLayerTest	test/test_softmax_layer.cpp	/^  CuDNNSoftmaxLayerTest()$/;"	f	class:caffe::CuDNNSoftmaxLayerTest
CuDNNSoftmaxLayerTest	test/test_softmax_layer.cpp	/^class CuDNNSoftmaxLayerTest : public GPUDeviceTest<Dtype> {$/;"	c	namespace:caffe	file:
DBTest	test/test_db.cpp	/^  DBTest()$/;"	f	class:caffe::DBTest
DBTest	test/test_db.cpp	/^class DBTest : public ::testing::Test {$/;"	c	namespace:caffe	file:
DataLayer	layers/data_layer.cpp	/^DataLayer<Dtype>::DataLayer(const LayerParameter& param)$/;"	f	class:caffe::DataLayer
DataLayerSetUp	layers/data_layer.cpp	/^void DataLayer<Dtype>::DataLayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::DataLayer
DataLayerSetUp	layers/image_data_layer.cpp	/^void ImageDataLayer<Dtype>::DataLayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ImageDataLayer
DataLayerSetUp	layers/memory_data_layer.cpp	/^void MemoryDataLayer<Dtype>::DataLayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::MemoryDataLayer
DataLayerSetUp	layers/window_data_layer.cpp	/^void WindowDataLayer<Dtype>::DataLayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::WindowDataLayer
DataLayerTest	test/test_data_layer.cpp	/^  DataLayerTest()$/;"	f	class:caffe::DataLayerTest
DataLayerTest	test/test_data_layer.cpp	/^class DataLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
DataReader	data_reader.cpp	/^DataReader::DataReader(const LayerParameter& param)$/;"	f	class:caffe::DataReader
DataTransformTest	test/test_data_transformer.cpp	/^  DataTransformTest()$/;"	f	class:caffe::DataTransformTest
DataTransformTest	test/test_data_transformer.cpp	/^class DataTransformTest : public ::testing::Test {$/;"	c	namespace:caffe	file:
DataTransformer	data_transformer.cpp	/^DataTransformer<Dtype>::DataTransformer(const TransformationParameter& param,$/;"	f	class:caffe::DataTransformer
DecodeDatum	util/io.cpp	/^bool DecodeDatum(Datum* datum, bool is_color) {$/;"	f	namespace:caffe
DecodeDatumNative	util/io.cpp	/^bool DecodeDatumNative(Datum* datum) {$/;"	f	namespace:caffe
DecodeDatumToCVMat	util/io.cpp	/^cv::Mat DecodeDatumToCVMat(const Datum& datum, bool is_color) {$/;"	f	namespace:caffe
DecodeDatumToCVMatNative	util/io.cpp	/^cv::Mat DecodeDatumToCVMatNative(const Datum& datum) {$/;"	f	namespace:caffe
DeconvolutionLayerTest	test/test_deconvolution_layer.cpp	/^  DeconvolutionLayerTest()$/;"	f	class:caffe::DeconvolutionLayerTest
DeconvolutionLayerTest	test/test_deconvolution_layer.cpp	/^class DeconvolutionLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
DeviceQuery	common.cpp	/^void Caffe::DeviceQuery() {$/;"	f	class:caffe::Caffe
DoubleMapSize	util/db_lmdb.cpp	/^void LMDBTransaction::DoubleMapSize() {$/;"	f	class:caffe::db::LMDBTransaction
Dtype	test/test_batch_norm_layer.cpp	/^    typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::BatchNormLayerTest	file:
Dtype	test/test_batch_reindex_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::BatchReindexLayerTest	file:
Dtype	test/test_bias_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::BiasLayerTest	file:
Dtype	test/test_blob.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::BlobMathTest	file:
Dtype	test/test_concat_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::ConcatLayerTest	file:
Dtype	test/test_contrastive_loss_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::ContrastiveLossLayerTest	file:
Dtype	test/test_convolution_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::ConvolutionLayerTest	file:
Dtype	test/test_crop_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::CropLayerTest	file:
Dtype	test/test_data_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::DataLayerTest	file:
Dtype	test/test_deconvolution_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::DeconvolutionLayerTest	file:
Dtype	test/test_eltwise_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::EltwiseLayerTest	file:
Dtype	test/test_embed_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::EmbedLayerTest	file:
Dtype	test/test_euclidean_loss_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::EuclideanLossLayerTest	file:
Dtype	test/test_filter_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::FilterLayerTest	file:
Dtype	test/test_flatten_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::FlattenLayerTest	file:
Dtype	test/test_gradient_based_solver.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::AdaDeltaSolverTest	file:
Dtype	test/test_gradient_based_solver.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::AdaGradSolverTest	file:
Dtype	test/test_gradient_based_solver.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::AdamSolverTest	file:
Dtype	test/test_gradient_based_solver.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::GradientBasedSolverTest	file:
Dtype	test/test_gradient_based_solver.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::NesterovSolverTest	file:
Dtype	test/test_gradient_based_solver.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::RMSPropSolverTest	file:
Dtype	test/test_gradient_based_solver.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::SGDSolverTest	file:
Dtype	test/test_hdf5_output_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::HDF5OutputLayerTest	file:
Dtype	test/test_hdf5data_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::HDF5DataLayerTest	file:
Dtype	test/test_hinge_loss_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::HingeLossLayerTest	file:
Dtype	test/test_im2col_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::Im2colLayerTest	file:
Dtype	test/test_image_data_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::ImageDataLayerTest	file:
Dtype	test/test_infogain_loss_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::InfogainLossLayerTest	file:
Dtype	test/test_inner_product_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::InnerProductLayerTest	file:
Dtype	test/test_lrn_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::LRNLayerTest	file:
Dtype	test/test_lstm_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::LSTMLayerTest	file:
Dtype	test/test_math_functions.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::MathFunctionsTest	file:
Dtype	test/test_maxpool_dropout_layers.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::MaxPoolingDropoutTest	file:
Dtype	test/test_memory_data_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::MemoryDataLayerTest	file:
Dtype	test/test_mvn_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::MVNLayerTest	file:
Dtype	test/test_net.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::NetTest	file:
Dtype	test/test_neuron_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::NeuronLayerTest	file:
Dtype	test/test_pooling_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::PoolingLayerTest	file:
Dtype	test/test_power_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::PowerLayerTest	file:
Dtype	test/test_reduction_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::ReductionLayerTest	file:
Dtype	test/test_reshape_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::ReshapeLayerTest	file:
Dtype	test/test_rnn_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::RNNLayerTest	file:
Dtype	test/test_scale_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::ScaleLayerTest	file:
Dtype	test/test_sigmoid_cross_entropy_loss_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::SigmoidCrossEntropyLossLayerTest	file:
Dtype	test/test_slice_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::SliceLayerTest	file:
Dtype	test/test_softmax_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::SoftmaxLayerTest	file:
Dtype	test/test_softmax_with_loss_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::SoftmaxWithLossLayerTest	file:
Dtype	test/test_solver.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::SolverTest	file:
Dtype	test/test_split_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::SplitLayerTest	file:
Dtype	test/test_spp_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::SPPLayerTest	file:
Dtype	test/test_stochastic_pooling.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::StochasticPoolingLayerTest	file:
Dtype	test/test_tanh_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::TanHLayerTest	file:
Dtype	test/test_threshold_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::ThresholdLayerTest	file:
Dtype	test/test_tile_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::TileLayerTest	file:
DummyDataLayerTest	test/test_dummy_data_layer.cpp	/^  DummyDataLayerTest()$/;"	f	class:caffe::DummyDataLayerTest
DummyDataLayerTest	test/test_dummy_data_layer.cpp	/^class DummyDataLayerTest : public CPUDeviceTest<Dtype> {$/;"	c	namespace:caffe	file:
EQUALS	Makefile	/^EQUALS = =$/;"	m
EQUALS	test/Makefile	/^EQUALS = =$/;"	m
EltwiseLayerTest	test/test_eltwise_layer.cpp	/^  EltwiseLayerTest()$/;"	f	class:caffe::EltwiseLayerTest
EltwiseLayerTest	test/test_eltwise_layer.cpp	/^class EltwiseLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
EmbedLayerTest	test/test_embed_layer.cpp	/^  EmbedLayerTest()$/;"	f	class:caffe::EmbedLayerTest
EmbedLayerTest	test/test_embed_layer.cpp	/^class EmbedLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
EuclideanLossLayerTest	test/test_euclidean_loss_layer.cpp	/^  EuclideanLossLayerTest()$/;"	f	class:caffe::EuclideanLossLayerTest
EuclideanLossLayerTest	test/test_euclidean_loss_layer.cpp	/^class EuclideanLossLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
Fill	test/test_data_layer.cpp	/^  void Fill(const bool unique_pixels, DataParameter_DB backend) {$/;"	f	class:caffe::DataLayerTest
FillBottoms	test/test_accuracy_layer.cpp	/^  virtual void FillBottoms() {$/;"	f	class:caffe::AccuracyLayerTest
FillDatum	test/test_data_transformer.cpp	/^void FillDatum(const int label, const int channels, const int height,$/;"	f	namespace:caffe
FillUnrolledNet	layers/lstm_layer.cpp	/^void LSTMLayer<Dtype>::FillUnrolledNet(NetParameter* net_param) const {$/;"	f	class:caffe::LSTMLayer
FillUnrolledNet	layers/rnn_layer.cpp	/^void RNNLayer<Dtype>::FillUnrolledNet(NetParameter* net_param) const {$/;"	f	class:caffe::RNNLayer
FilterLayerTest	test/test_filter_layer.cpp	/^  FilterLayerTest()$/;"	f	class:caffe::FilterLayerTest
FilterLayerTest	test/test_filter_layer.cpp	/^class FilterLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
FilterNet	net.cpp	/^void Net<Dtype>::FilterNet(const NetParameter& param,$/;"	f	class:caffe::Net
FilterNetTest	test/test_net.cpp	/^class FilterNetTest : public ::testing::Test {$/;"	c	namespace:caffe	file:
FindDevice	common.cpp	/^int Caffe::FindDevice(const int start_id) {$/;"	f	class:caffe::Caffe
FlattenLayerTest	test/test_flatten_layer.cpp	/^  FlattenLayerTest()$/;"	f	class:caffe::FlattenLayerTest
FlattenLayerTest	test/test_flatten_layer.cpp	/^class FlattenLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
Forward	net.cpp	/^const vector<Blob<Dtype>*>& Net<Dtype>::Forward($/;"	f	class:caffe::Net
Forward	net.cpp	/^const vector<Blob<Dtype>*>& Net<Dtype>::Forward(Dtype* loss) {$/;"	f	class:caffe::Net
ForwardDebugInfo	net.cpp	/^void Net<Dtype>::ForwardDebugInfo(const int layer_id) {$/;"	f	class:caffe::Net
ForwardFrom	net.cpp	/^Dtype Net<Dtype>::ForwardFrom(int start) {$/;"	f	class:caffe::Net
ForwardFromTo	net.cpp	/^Dtype Net<Dtype>::ForwardFromTo(int start, int end) {$/;"	f	class:caffe::Net
ForwardTo	net.cpp	/^Dtype Net<Dtype>::ForwardTo(int end) {$/;"	f	class:caffe::Net
Forward_cpu	layers/absval_layer.cpp	/^void AbsValLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::AbsValLayer
Forward_cpu	layers/accuracy_layer.cpp	/^void AccuracyLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::AccuracyLayer
Forward_cpu	layers/argmax_layer.cpp	/^void ArgMaxLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ArgMaxLayer
Forward_cpu	layers/base_data_layer.cpp	/^void BasePrefetchingDataLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::BasePrefetchingDataLayer
Forward_cpu	layers/batch_norm_layer.cpp	/^void BatchNormLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BatchNormLayer
Forward_cpu	layers/batch_reindex_layer.cpp	/^void BatchReindexLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BatchReindexLayer
Forward_cpu	layers/bias_layer.cpp	/^void BiasLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BiasLayer
Forward_cpu	layers/bnll_layer.cpp	/^void BNLLLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BNLLLayer
Forward_cpu	layers/center_loss_layer.cpp	/^void CenterLossLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CenterLossLayer
Forward_cpu	layers/concat_layer.cpp	/^void ConcatLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ConcatLayer
Forward_cpu	layers/contrastive_loss_layer.cpp	/^void ContrastiveLossLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::ContrastiveLossLayer
Forward_cpu	layers/conv_layer.cpp	/^void ConvolutionLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ConvolutionLayer
Forward_cpu	layers/crop_layer.cpp	/^void CropLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CropLayer
Forward_cpu	layers/deconv_layer.cpp	/^void DeconvolutionLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::DeconvolutionLayer
Forward_cpu	layers/dropout_layer.cpp	/^void DropoutLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::DropoutLayer
Forward_cpu	layers/dummy_data_layer.cpp	/^void DummyDataLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::DummyDataLayer
Forward_cpu	layers/eltwise_layer.cpp	/^void EltwiseLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::EltwiseLayer
Forward_cpu	layers/elu_layer.cpp	/^void ELULayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ELULayer
Forward_cpu	layers/embed_layer.cpp	/^void EmbedLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::EmbedLayer
Forward_cpu	layers/euclidean_loss_layer.cpp	/^void EuclideanLossLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::EuclideanLossLayer
Forward_cpu	layers/exp_layer.cpp	/^void ExpLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ExpLayer
Forward_cpu	layers/filter_layer.cpp	/^void FilterLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::FilterLayer
Forward_cpu	layers/flatten_layer.cpp	/^void FlattenLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::FlattenLayer
Forward_cpu	layers/hdf5_data_layer.cpp	/^void HDF5DataLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::HDF5DataLayer
Forward_cpu	layers/hdf5_output_layer.cpp	/^void HDF5OutputLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::HDF5OutputLayer
Forward_cpu	layers/hinge_loss_layer.cpp	/^void HingeLossLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::HingeLossLayer
Forward_cpu	layers/im2col_layer.cpp	/^void Im2colLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::Im2colLayer
Forward_cpu	layers/infogain_loss_layer.cpp	/^void InfogainLossLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::InfogainLossLayer
Forward_cpu	layers/inner_product_layer.cpp	/^void InnerProductLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::InnerProductLayer
Forward_cpu	layers/log_layer.cpp	/^void LogLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::LogLayer
Forward_cpu	layers/lrn_layer.cpp	/^void LRNLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::LRNLayer
Forward_cpu	layers/lstm_unit_layer.cpp	/^void LSTMUnitLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::LSTMUnitLayer
Forward_cpu	layers/memory_data_layer.cpp	/^void MemoryDataLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::MemoryDataLayer
Forward_cpu	layers/multinomial_logistic_loss_layer.cpp	/^void MultinomialLogisticLossLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::MultinomialLogisticLossLayer
Forward_cpu	layers/mvn_layer.cpp	/^void MVNLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::MVNLayer
Forward_cpu	layers/normalize_layer.cpp	/^void NormalizeLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::NormalizeLayer
Forward_cpu	layers/pooling_layer.cpp	/^void PoolingLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::PoolingLayer
Forward_cpu	layers/power_layer.cpp	/^void PowerLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::PowerLayer
Forward_cpu	layers/prelu_layer.cpp	/^void PReLULayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::PReLULayer
Forward_cpu	layers/recurrent_layer.cpp	/^void RecurrentLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::RecurrentLayer
Forward_cpu	layers/reduction_layer.cpp	/^void ReductionLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::ReductionLayer
Forward_cpu	layers/relu_layer.cpp	/^void ReLULayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ReLULayer
Forward_cpu	layers/scale_layer.cpp	/^void ScaleLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::ScaleLayer
Forward_cpu	layers/sigmoid_cross_entropy_loss_layer.cpp	/^void SigmoidCrossEntropyLossLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::SigmoidCrossEntropyLossLayer
Forward_cpu	layers/sigmoid_layer.cpp	/^void SigmoidLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SigmoidLayer
Forward_cpu	layers/slice_layer.cpp	/^void SliceLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SliceLayer
Forward_cpu	layers/softmax_layer.cpp	/^void SoftmaxLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SoftmaxLayer
Forward_cpu	layers/softmax_loss_layer.cpp	/^void SoftmaxWithLossLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::SoftmaxWithLossLayer
Forward_cpu	layers/split_layer.cpp	/^void SplitLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SplitLayer
Forward_cpu	layers/spp_layer.cpp	/^void SPPLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SPPLayer
Forward_cpu	layers/tanh_layer.cpp	/^void TanHLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::TanHLayer
Forward_cpu	layers/threshold_layer.cpp	/^void ThresholdLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ThresholdLayer
Forward_cpu	layers/tile_layer.cpp	/^void TileLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::TileLayer
FromProto	blob.cpp	/^void Blob<Dtype>::FromProto(const BlobProto& proto, bool reshape) {$/;"	f	class:caffe::Blob
GPUMathFunctionsTest	test/test_math_functions.cpp	/^class GPUMathFunctionsTest : public MathFunctionsTest<GPUDevice<Dtype> > {$/;"	c	namespace:caffe	file:
GPUParams	parallel.cpp	/^GPUParams<Dtype>::GPUParams(shared_ptr<Solver<Dtype> > root_solver, int device)$/;"	f	class:caffe::GPUParams
GPUStochasticPoolingLayerTest	test/test_stochastic_pooling.cpp	/^class GPUStochasticPoolingLayerTest$/;"	c	namespace:caffe	file:
GaussianFillerTest	test/test_filler.cpp	/^  GaussianFillerTest()$/;"	f	class:caffe::GaussianFillerTest
GaussianFillerTest	test/test_filler.cpp	/^class GaussianFillerTest : public ::testing::Test {$/;"	c	namespace:caffe	file:
GemmTest	test/test_util_blas.cpp	/^class GemmTest : public ::testing::Test {};$/;"	c	namespace:caffe	file:
Generator	common.cpp	/^  Generator() : rng_(new caffe::rng_t(cluster_seedgen())) {}$/;"	f	class:caffe::Caffe::RNG::Generator
Generator	common.cpp	/^  explicit Generator(unsigned int seed) : rng_(new caffe::rng_t(seed)) {}$/;"	f	class:caffe::Caffe::RNG::Generator
Generator	common.cpp	/^class Caffe::RNG::Generator {$/;"	c	class:caffe::Caffe::RNG	file:
Get	common.cpp	/^Caffe& Caffe::Get() {$/;"	f	class:caffe::Caffe
GetActionFunction	util/signal_handler.cpp	/^ActionCallback SignalHandler::GetActionFunction() {$/;"	f	class:caffe::SignalHandler
GetConvolutionLayer	layer_factory.cpp	/^shared_ptr<Layer<Dtype> > GetConvolutionLayer($/;"	f	namespace:caffe
GetDB	util/db.cpp	/^DB* GetDB(DataParameter::DB backend) {$/;"	f	namespace:caffe::db
GetDB	util/db.cpp	/^DB* GetDB(const string& backend) {$/;"	f	namespace:caffe::db
GetLRNLayer	layer_factory.cpp	/^shared_ptr<Layer<Dtype> > GetLRNLayer(const LayerParameter& param) {$/;"	f	namespace:caffe
GetLearningRate	solvers/sgd_solver.cpp	/^Dtype SGDSolver<Dtype>::GetLearningRate() {$/;"	f	class:caffe::SGDSolver
GetPoolingLayer	layer_factory.cpp	/^shared_ptr<Layer<Dtype> > GetPoolingLayer(const LayerParameter& param) {$/;"	f	namespace:caffe
GetPoolingParam	layers/spp_layer.cpp	/^LayerParameter SPPLayer<Dtype>::GetPoolingParam(const int pyramid_level,$/;"	f	class:caffe::SPPLayer
GetPythonLayer	layer_factory.cpp	/^shared_ptr<Layer<Dtype> > GetPythonLayer(const LayerParameter& param) {$/;"	f	namespace:caffe
GetReLULayer	layer_factory.cpp	/^shared_ptr<Layer<Dtype> > GetReLULayer(const LayerParameter& param) {$/;"	f	namespace:caffe
GetRequestedAction	solver.cpp	/^SolverAction::Enum Solver<Dtype>::GetRequestedAction() {$/;"	f	class:caffe::Solver
GetSigmoidLayer	layer_factory.cpp	/^shared_ptr<Layer<Dtype> > GetSigmoidLayer(const LayerParameter& param) {$/;"	f	namespace:caffe
GetSoftmaxLayer	layer_factory.cpp	/^shared_ptr<Layer<Dtype> > GetSoftmaxLayer(const LayerParameter& param) {$/;"	f	namespace:caffe
GetTanHLayer	layer_factory.cpp	/^shared_ptr<Layer<Dtype> > GetTanHLayer(const LayerParameter& param) {$/;"	f	namespace:caffe
GlobalInit	common.cpp	/^void GlobalInit(int* pargc, char*** pargv) {$/;"	f	namespace:caffe
GotSIGHUP	util/signal_handler.cpp	/^  bool GotSIGHUP() {$/;"	f	namespace:__anon1
GotSIGINT	util/signal_handler.cpp	/^  bool GotSIGINT() {$/;"	f	namespace:__anon1
GradientBasedSolverTest	test/test_gradient_based_solver.cpp	/^  GradientBasedSolverTest() :$/;"	f	class:caffe::GradientBasedSolverTest
GradientBasedSolverTest	test/test_gradient_based_solver.cpp	/^class GradientBasedSolverTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
HDF5DataLayerTest	test/test_hdf5data_layer.cpp	/^  HDF5DataLayerTest()$/;"	f	class:caffe::HDF5DataLayerTest
HDF5DataLayerTest	test/test_hdf5data_layer.cpp	/^class HDF5DataLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
HDF5OutputLayerTest	test/test_hdf5_output_layer.cpp	/^  HDF5OutputLayerTest()$/;"	f	class:caffe::HDF5OutputLayerTest
HDF5OutputLayerTest	test/test_hdf5_output_layer.cpp	/^class HDF5OutputLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
HingeLossLayerTest	test/test_hinge_loss_layer.cpp	/^  HingeLossLayerTest()$/;"	f	class:caffe::HingeLossLayerTest
HingeLossLayerTest	test/test_hinge_loss_layer.cpp	/^class HingeLossLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
HookupHandler	util/signal_handler.cpp	/^  void HookupHandler() {$/;"	f	namespace:__anon1
INPUT_DATA_SIZE	test/test_batch_norm_layer.cpp	16;"	d	file:
IOTest	test/test_io.cpp	/^class IOTest : public ::testing::Test {};$/;"	c	namespace:caffe	file:
Im2colLayerTest	test/test_im2col_layer.cpp	/^  Im2colLayerTest()$/;"	f	class:caffe::Im2colLayerTest
Im2colLayerTest	test/test_im2col_layer.cpp	/^class Im2colLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
ImageDataLayerTest	test/test_image_data_layer.cpp	/^  ImageDataLayerTest()$/;"	f	class:caffe::ImageDataLayerTest
ImageDataLayerTest	test/test_image_data_layer.cpp	/^class ImageDataLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
InferBlobShape	data_transformer.cpp	/^vector<int> DataTransformer<Dtype>::InferBlobShape($/;"	f	class:caffe::DataTransformer
InferBlobShape	data_transformer.cpp	/^vector<int> DataTransformer<Dtype>::InferBlobShape(const Datum& datum) {$/;"	f	class:caffe::DataTransformer
InferBlobShape	data_transformer.cpp	/^vector<int> DataTransformer<Dtype>::InferBlobShape(const cv::Mat& cv_img) {$/;"	f	class:caffe::DataTransformer
InfogainLossLayerTest	test/test_infogain_loss_layer.cpp	/^  InfogainLossLayerTest()$/;"	f	class:caffe::InfogainLossLayerTest
InfogainLossLayerTest	test/test_infogain_loss_layer.cpp	/^class InfogainLossLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
Init	net.cpp	/^void Net<Dtype>::Init(const NetParameter& in_param) {$/;"	f	class:caffe::Net
Init	solver.cpp	/^void Solver<Dtype>::Init(const SolverParameter& param) {$/;"	f	class:caffe::Solver
Init	util/benchmark.cpp	/^void Timer::Init() {$/;"	f	class:caffe::Timer
InitAllInOneNet	test/test_net.cpp	/^  virtual void InitAllInOneNet(Phase phase = caffe::TRAIN,$/;"	f	class:caffe::NetTest
InitDiffDataSharedWeightsNet	test/test_net.cpp	/^  virtual void InitDiffDataSharedWeightsNet() {$/;"	f	class:caffe::NetTest
InitDiffDataUnsharedWeightsNet	test/test_net.cpp	/^  virtual void InitDiffDataUnsharedWeightsNet() {$/;"	f	class:caffe::NetTest
InitForcePropNet	test/test_net.cpp	/^  virtual void InitForcePropNet(bool test_force_true) {$/;"	f	class:caffe::NetTest
InitMutex	layer.cpp	/^void Layer<Dtype>::InitMutex() {$/;"	f	class:caffe::Layer
InitNetFromProtoFileWithState	test/test_net.cpp	/^  virtual void InitNetFromProtoFileWithState(const string& proto,$/;"	f	class:caffe::NetTest
InitNetFromProtoString	test/test_net.cpp	/^  virtual void InitNetFromProtoString(const string& proto) {$/;"	f	class:caffe::NetTest
InitRand	data_transformer.cpp	/^void DataTransformer<Dtype>::InitRand() {$/;"	f	class:caffe::DataTransformer
InitReshapableNet	test/test_net.cpp	/^  virtual void InitReshapableNet() {$/;"	f	class:caffe::NetTest
InitSharedWeightsNet	test/test_net.cpp	/^  virtual void InitSharedWeightsNet() {$/;"	f	class:caffe::NetTest
InitSkipPropNet	test/test_net.cpp	/^  virtual void InitSkipPropNet(bool test_skip_true) {$/;"	f	class:caffe::NetTest
InitSolver	test/test_gradient_based_solver.cpp	/^  virtual void InitSolver(const SolverParameter& param) {$/;"	f	class:caffe::AdaDeltaSolverTest
InitSolver	test/test_gradient_based_solver.cpp	/^  virtual void InitSolver(const SolverParameter& param) {$/;"	f	class:caffe::AdaGradSolverTest
InitSolver	test/test_gradient_based_solver.cpp	/^  virtual void InitSolver(const SolverParameter& param) {$/;"	f	class:caffe::AdamSolverTest
InitSolver	test/test_gradient_based_solver.cpp	/^  virtual void InitSolver(const SolverParameter& param) {$/;"	f	class:caffe::NesterovSolverTest
InitSolver	test/test_gradient_based_solver.cpp	/^  virtual void InitSolver(const SolverParameter& param) {$/;"	f	class:caffe::RMSPropSolverTest
InitSolver	test/test_gradient_based_solver.cpp	/^  virtual void InitSolver(const SolverParameter& param) {$/;"	f	class:caffe::SGDSolverTest
InitSolverFromProtoString	test/test_gradient_based_solver.cpp	/^  virtual void InitSolverFromProtoString(const string& proto) {$/;"	f	class:caffe::GradientBasedSolverTest
InitSolverFromProtoString	test/test_solver.cpp	/^  virtual void InitSolverFromProtoString(const string& proto) {$/;"	f	class:caffe::SolverTest
InitTestNets	solver.cpp	/^void Solver<Dtype>::InitTestNets() {$/;"	f	class:caffe::Solver
InitTinyNet	test/test_net.cpp	/^  virtual void InitTinyNet(const bool force_backward = false,$/;"	f	class:caffe::NetTest
InitTinyNetEuclidean	test/test_net.cpp	/^  virtual void InitTinyNetEuclidean(const bool force_backward = false) {$/;"	f	class:caffe::NetTest
InitTrainNet	solver.cpp	/^void Solver<Dtype>::InitTrainNet() {$/;"	f	class:caffe::Solver
InitTrickyNet	test/test_net.cpp	/^  virtual void InitTrickyNet(Dtype* loss_weight = NULL) {$/;"	f	class:caffe::NetTest
InitUnsharedWeightsNet	test/test_net.cpp	/^  virtual void InitUnsharedWeightsNet(const Dtype* loss_weight = NULL,$/;"	f	class:caffe::NetTest
InnerProductLayerTest	test/test_inner_product_layer.cpp	/^  InnerProductLayerTest()$/;"	f	class:caffe::InnerProductLayerTest
InnerProductLayerTest	test/test_inner_product_layer.cpp	/^class InnerProductLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
InsertSplits	util/insert_splits.cpp	/^void InsertSplits(const NetParameter& param, NetParameter* param_split) {$/;"	f	namespace:caffe
InternalThreadEntry	data_reader.cpp	/^void DataReader::Body::InternalThreadEntry() {$/;"	f	class:caffe::DataReader::Body
InternalThreadEntry	layers/base_data_layer.cpp	/^void BasePrefetchingDataLayer<Dtype>::InternalThreadEntry() {$/;"	f	class:caffe::BasePrefetchingDataLayer
InternalThreadEntry	parallel.cpp	/^void P2PSync<Dtype>::InternalThreadEntry() {$/;"	f	class:caffe::P2PSync
InternalThreadEntry	test/test_internal_thread.cpp	/^  void InternalThreadEntry() {$/;"	f	class:caffe::TestThreadA	file:
InternalThreadEntry	test/test_internal_thread.cpp	/^  void InternalThreadEntry() {$/;"	f	class:caffe::TestThreadB	file:
InternalThreadTest	test/test_internal_thread.cpp	/^class InternalThreadTest : public ::testing::Test {};$/;"	c	namespace:caffe	file:
LRNLayerTest	test/test_lrn_layer.cpp	/^  LRNLayerTest()$/;"	f	class:caffe::LRNLayerTest
LRNLayerTest	test/test_lrn_layer.cpp	/^class LRNLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
LSTMLayerTest	test/test_lstm_layer.cpp	/^  LSTMLayerTest() : num_output_(7) {$/;"	f	class:caffe::LSTMLayerTest
LSTMLayerTest	test/test_lstm_layer.cpp	/^class LSTMLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
LayerFactoryTest	test/test_layer_factory.cpp	/^class LayerFactoryTest : public MultiDeviceTest<TypeParam> {};$/;"	c	namespace:caffe	file:
LayerSetUp	layers/absval_layer.cpp	/^void AbsValLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::AbsValLayer
LayerSetUp	layers/accuracy_layer.cpp	/^void AccuracyLayer<Dtype>::LayerSetUp($/;"	f	class:caffe::AccuracyLayer
LayerSetUp	layers/argmax_layer.cpp	/^void ArgMaxLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ArgMaxLayer
LayerSetUp	layers/base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BaseConvolutionLayer
LayerSetUp	layers/base_data_layer.cpp	/^void BaseDataLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BaseDataLayer
LayerSetUp	layers/base_data_layer.cpp	/^void BasePrefetchingDataLayer<Dtype>::LayerSetUp($/;"	f	class:caffe::BasePrefetchingDataLayer
LayerSetUp	layers/batch_norm_layer.cpp	/^void BatchNormLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BatchNormLayer
LayerSetUp	layers/bias_layer.cpp	/^void BiasLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BiasLayer
LayerSetUp	layers/center_loss_layer.cpp	/^void CenterLossLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CenterLossLayer
LayerSetUp	layers/concat_layer.cpp	/^void ConcatLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ConcatLayer
LayerSetUp	layers/contrastive_loss_layer.cpp	/^void ContrastiveLossLayer<Dtype>::LayerSetUp($/;"	f	class:caffe::ContrastiveLossLayer
LayerSetUp	layers/crop_layer.cpp	/^void CropLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CropLayer
LayerSetUp	layers/cudnn_conv_layer.cpp	/^void CuDNNConvolutionLayer<Dtype>::LayerSetUp($/;"	f	class:caffe::CuDNNConvolutionLayer
LayerSetUp	layers/cudnn_lcn_layer.cpp	/^void CuDNNLCNLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CuDNNLCNLayer
LayerSetUp	layers/cudnn_lrn_layer.cpp	/^void CuDNNLRNLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CuDNNLRNLayer
LayerSetUp	layers/cudnn_pooling_layer.cpp	/^void CuDNNPoolingLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CuDNNPoolingLayer
LayerSetUp	layers/cudnn_relu_layer.cpp	/^void CuDNNReLULayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CuDNNReLULayer
LayerSetUp	layers/cudnn_sigmoid_layer.cpp	/^void CuDNNSigmoidLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CuDNNSigmoidLayer
LayerSetUp	layers/cudnn_softmax_layer.cpp	/^void CuDNNSoftmaxLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CuDNNSoftmaxLayer
LayerSetUp	layers/cudnn_tanh_layer.cpp	/^void CuDNNTanHLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CuDNNTanHLayer
LayerSetUp	layers/dropout_layer.cpp	/^void DropoutLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::DropoutLayer
LayerSetUp	layers/dummy_data_layer.cpp	/^void DummyDataLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::DummyDataLayer
LayerSetUp	layers/eltwise_layer.cpp	/^void EltwiseLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::EltwiseLayer
LayerSetUp	layers/embed_layer.cpp	/^void EmbedLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::EmbedLayer
LayerSetUp	layers/exp_layer.cpp	/^void ExpLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ExpLayer
LayerSetUp	layers/filter_layer.cpp	/^void FilterLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::FilterLayer
LayerSetUp	layers/hdf5_data_layer.cpp	/^void HDF5DataLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::HDF5DataLayer
LayerSetUp	layers/hdf5_output_layer.cpp	/^void HDF5OutputLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::HDF5OutputLayer
LayerSetUp	layers/im2col_layer.cpp	/^void Im2colLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::Im2colLayer
LayerSetUp	layers/infogain_loss_layer.cpp	/^void InfogainLossLayer<Dtype>::LayerSetUp($/;"	f	class:caffe::InfogainLossLayer
LayerSetUp	layers/inner_product_layer.cpp	/^void InnerProductLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::InnerProductLayer
LayerSetUp	layers/input_layer.cpp	/^void InputLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::InputLayer
LayerSetUp	layers/log_layer.cpp	/^void LogLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::LogLayer
LayerSetUp	layers/loss_layer.cpp	/^void LossLayer<Dtype>::LayerSetUp($/;"	f	class:caffe::LossLayer
LayerSetUp	layers/lrn_layer.cpp	/^void LRNLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::LRNLayer
LayerSetUp	layers/normalize_layer.cpp	/^void NormalizeLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::NormalizeLayer
LayerSetUp	layers/pooling_layer.cpp	/^void PoolingLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::PoolingLayer
LayerSetUp	layers/power_layer.cpp	/^void PowerLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::PowerLayer
LayerSetUp	layers/prelu_layer.cpp	/^void PReLULayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::PReLULayer
LayerSetUp	layers/recurrent_layer.cpp	/^void RecurrentLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::RecurrentLayer
LayerSetUp	layers/reduction_layer.cpp	/^void ReductionLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ReductionLayer
LayerSetUp	layers/reshape_layer.cpp	/^void ReshapeLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ReshapeLayer
LayerSetUp	layers/scale_layer.cpp	/^void ScaleLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ScaleLayer
LayerSetUp	layers/sigmoid_cross_entropy_loss_layer.cpp	/^void SigmoidCrossEntropyLossLayer<Dtype>::LayerSetUp($/;"	f	class:caffe::SigmoidCrossEntropyLossLayer
LayerSetUp	layers/slice_layer.cpp	/^void SliceLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SliceLayer
LayerSetUp	layers/softmax_loss_layer.cpp	/^void SoftmaxWithLossLayer<Dtype>::LayerSetUp($/;"	f	class:caffe::SoftmaxWithLossLayer
LayerSetUp	layers/spp_layer.cpp	/^void SPPLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SPPLayer
LayerSetUp	layers/threshold_layer.cpp	/^void ThresholdLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ThresholdLayer
LoadHDF5FileData	layers/hdf5_data_layer.cpp	/^void HDF5DataLayer<Dtype>::LoadHDF5FileData(const char* filename) {$/;"	f	class:caffe::HDF5DataLayer
Lock	layer.cpp	/^void Layer<Dtype>::Lock() {$/;"	f	class:caffe::Layer
LogBottomInit	test/test_neuron_layer.cpp	/^  void LogBottomInit() {$/;"	f	class:caffe::NeuronLayerTest
MSRAFillerTest	test/test_filler.cpp	/^  MSRAFillerTest()$/;"	f	class:caffe::MSRAFillerTest
MSRAFillerTest	test/test_filler.cpp	/^class MSRAFillerTest : public ::testing::Test {$/;"	c	namespace:caffe	file:
MVNLayerTest	test/test_mvn_layer.cpp	/^  MVNLayerTest()$/;"	f	class:caffe::MVNLayerTest
MVNLayerTest	test/test_mvn_layer.cpp	/^class MVNLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
MakeReferenceTop	test/test_convolution_layer.cpp	/^  virtual Blob<Dtype>* MakeReferenceTop(Blob<Dtype>* top) {$/;"	f	class:caffe::ConvolutionLayerTest
MakeReferenceTop	test/test_convolution_layer.cpp	/^  virtual Blob<Dtype>* MakeReferenceTop(Blob<Dtype>* top) {$/;"	f	class:caffe::CuDNNConvolutionLayerTest
MathFunctionsTest	test/test_math_functions.cpp	/^  MathFunctionsTest()$/;"	f	class:caffe::MathFunctionsTest
MathFunctionsTest	test/test_math_functions.cpp	/^class MathFunctionsTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
MaxPoolingDropoutTest	test/test_maxpool_dropout_layers.cpp	/^  MaxPoolingDropoutTest()$/;"	f	class:caffe::MaxPoolingDropoutTest
MaxPoolingDropoutTest	test/test_maxpool_dropout_layers.cpp	/^class MaxPoolingDropoutTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
MemoryDataLayerTest	test/test_memory_data_layer.cpp	/^  MemoryDataLayerTest()$/;"	f	class:caffe::MemoryDataLayerTest
MemoryDataLayerTest	test/test_memory_data_layer.cpp	/^class MemoryDataLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
MicroSeconds	util/benchmark.cpp	/^float CPUTimer::MicroSeconds() {$/;"	f	class:caffe::CPUTimer
MicroSeconds	util/benchmark.cpp	/^float Timer::MicroSeconds() {$/;"	f	class:caffe::Timer
MilliSeconds	util/benchmark.cpp	/^float CPUTimer::MilliSeconds() {$/;"	f	class:caffe::CPUTimer
MilliSeconds	util/benchmark.cpp	/^float Timer::MilliSeconds() {$/;"	f	class:caffe::Timer
MultinomialLogisticLossLayerTest	test/test_multinomial_logistic_loss_layer.cpp	/^  MultinomialLogisticLossLayerTest()$/;"	f	class:caffe::MultinomialLogisticLossLayerTest
MultinomialLogisticLossLayerTest	test/test_multinomial_logistic_loss_layer.cpp	/^class MultinomialLogisticLossLayerTest : public CPUDeviceTest<Dtype> {$/;"	c	namespace:caffe	file:
NesterovSolverTest	test/test_gradient_based_solver.cpp	/^class NesterovSolverTest : public GradientBasedSolverTest<TypeParam> {$/;"	c	namespace:caffe	file:
Net	net.cpp	/^Net<Dtype>::Net(const NetParameter& param, const Net* root_net)$/;"	f	class:caffe::Net
Net	net.cpp	/^Net<Dtype>::Net(const string& param_file, Phase phase,$/;"	f	class:caffe::Net
NetNeedsBatchNormUpgrade	util/upgrade_proto.cpp	/^bool NetNeedsBatchNormUpgrade(const NetParameter& net_param) {$/;"	f	namespace:caffe
NetNeedsDataUpgrade	util/upgrade_proto.cpp	/^bool NetNeedsDataUpgrade(const NetParameter& net_param) {$/;"	f	namespace:caffe
NetNeedsInputUpgrade	util/upgrade_proto.cpp	/^bool NetNeedsInputUpgrade(const NetParameter& net_param) {$/;"	f	namespace:caffe
NetNeedsUpgrade	util/upgrade_proto.cpp	/^bool NetNeedsUpgrade(const NetParameter& net_param) {$/;"	f	namespace:caffe
NetNeedsV0ToV1Upgrade	util/upgrade_proto.cpp	/^bool NetNeedsV0ToV1Upgrade(const NetParameter& net_param) {$/;"	f	namespace:caffe
NetNeedsV1ToV2Upgrade	util/upgrade_proto.cpp	/^bool NetNeedsV1ToV2Upgrade(const NetParameter& net_param) {$/;"	f	namespace:caffe
NetTest	test/test_net.cpp	/^  NetTest() : seed_(1701) {}$/;"	f	class:caffe::NetTest
NetTest	test/test_net.cpp	/^class NetTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
NetUpgradeTest	test/test_upgrade_proto.cpp	/^class NetUpgradeTest : public ::testing::Test {$/;"	c	namespace:caffe	file:
NeuronLayerTest	test/test_neuron_layer.cpp	/^  NeuronLayerTest()$/;"	f	class:caffe::NeuronLayerTest
NeuronLayerTest	test/test_neuron_layer.cpp	/^class NeuronLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
NewCursor	util/db_lmdb.cpp	/^LMDBCursor* LMDB::NewCursor() {$/;"	f	class:caffe::db::LMDB
NewTransaction	util/db_lmdb.cpp	/^LMDBTransaction* LMDB::NewTransaction() {$/;"	f	class:caffe::db::LMDB
Normalize	solvers/sgd_solver.cpp	/^void SGDSolver<Dtype>::Normalize(int param_id) {$/;"	f	class:caffe::SGDSolver
NumSequenceMatches	test/test_data_transformer.cpp	/^  int NumSequenceMatches(const TransformationParameter transform_param,$/;"	f	class:caffe::DataTransformTest
Op	parallel.cpp	/^enum Op {$/;"	g	namespace:caffe	file:
Open	util/db_leveldb.cpp	/^void LevelDB::Open(const string& source, Mode mode) {$/;"	f	class:caffe::db::LevelDB
Open	util/db_lmdb.cpp	/^void LMDB::Open(const string& source, Mode mode) {$/;"	f	class:caffe::db::LMDB
OutputBlobNames	layers/lstm_layer.cpp	/^void LSTMLayer<Dtype>::OutputBlobNames(vector<string>* names) const {$/;"	f	class:caffe::LSTMLayer
OutputBlobNames	layers/rnn_layer.cpp	/^void RNNLayer<Dtype>::OutputBlobNames(vector<string>* names) const {$/;"	f	class:caffe::RNNLayer
P2PSync	parallel.cpp	/^P2PSync<Dtype>::P2PSync(shared_ptr<Solver<Dtype> > root_solver,$/;"	f	class:caffe::P2PSync
PaddingLayerUpgradeTest	test/test_upgrade_proto.cpp	/^class PaddingLayerUpgradeTest : public ::testing::Test {$/;"	c	namespace:caffe	file:
Params	parallel.cpp	/^Params<Dtype>::Params(shared_ptr<Solver<Dtype> > root_solver)$/;"	f	class:caffe::Params
PlatformTest	test/test_platform.cpp	/^class PlatformTest : public ::testing::Test {};$/;"	c	namespace:caffe	file:
PoolingLayerTest	test/test_pooling_layer.cpp	/^  PoolingLayerTest()$/;"	f	class:caffe::PoolingLayerTest
PoolingLayerTest	test/test_pooling_layer.cpp	/^class PoolingLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
PositiveUnitballFillerTest	test/test_filler.cpp	/^  PositiveUnitballFillerTest()$/;"	f	class:caffe::PositiveUnitballFillerTest
PositiveUnitballFillerTest	test/test_filler.cpp	/^class PositiveUnitballFillerTest : public ::testing::Test {$/;"	c	namespace:caffe	file:
PowerLayerTest	test/test_power_layer.cpp	/^  PowerLayerTest()$/;"	f	class:caffe::PowerLayerTest
PowerLayerTest	test/test_power_layer.cpp	/^class PowerLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
PreSolve	solvers/sgd_solver.cpp	/^void SGDSolver<Dtype>::PreSolve() {$/;"	f	class:caffe::SGDSolver
PrefetchRand	layers/window_data_layer.cpp	/^unsigned int WindowDataLayer<Dtype>::PrefetchRand() {$/;"	f	class:caffe::WindowDataLayer
Prepare	parallel.cpp	/^void P2PSync<Dtype>::Prepare(const vector<int>& gpus,$/;"	f	class:caffe::P2PSync
ProtoTest	test/test_protobuf.cpp	/^class ProtoTest : public ::testing::Test {};$/;"	c	namespace:caffe	file:
Put	util/db_lmdb.cpp	/^void LMDBTransaction::Put(const string& key, const string& value) {$/;"	f	class:caffe::db::LMDBTransaction
QueuePair	data_reader.cpp	/^DataReader::QueuePair::QueuePair(int size) {$/;"	f	class:caffe::DataReader::QueuePair
RM	Makefile	/^RM = \/usr\/local\/bin\/cmake -E remove -f$/;"	m
RM	test/Makefile	/^RM = \/usr\/local\/bin\/cmake -E remove -f$/;"	m
RMSPropSolverTest	test/test_gradient_based_solver.cpp	/^class RMSPropSolverTest : public GradientBasedSolverTest<TypeParam> {$/;"	c	namespace:caffe	file:
RNG	common.cpp	/^Caffe::RNG::RNG() : generator_(new Generator()) { }$/;"	f	class:caffe::Caffe::RNG
RNG	common.cpp	/^Caffe::RNG::RNG(unsigned int seed) : generator_(new Generator(seed)) { }$/;"	f	class:caffe::Caffe::RNG
RNNLayerTest	test/test_rnn_layer.cpp	/^  RNNLayerTest() : num_output_(7) {$/;"	f	class:caffe::RNNLayerTest
RNNLayerTest	test/test_rnn_layer.cpp	/^class RNNLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
Rand	data_transformer.cpp	/^int DataTransformer<Dtype>::Rand(int n) {$/;"	f	class:caffe::DataTransformer
RandomNumberGeneratorTest	test/test_random_number_generator.cpp	/^  RandomNumberGeneratorTest()$/;"	f	class:caffe::RandomNumberGeneratorTest
RandomNumberGeneratorTest	test/test_random_number_generator.cpp	/^class RandomNumberGeneratorTest : public ::testing::Test {$/;"	c	namespace:caffe	file:
ReadFileToDatum	util/io.cpp	/^bool ReadFileToDatum(const string& filename, const int label,$/;"	f	namespace:caffe
ReadImageToCVMat	util/io.cpp	/^cv::Mat ReadImageToCVMat(const string& filename) {$/;"	f	namespace:caffe
ReadImageToCVMat	util/io.cpp	/^cv::Mat ReadImageToCVMat(const string& filename,$/;"	f	namespace:caffe
ReadImageToDatum	util/io.cpp	/^bool ReadImageToDatum(const string& filename, const int label,$/;"	f	namespace:caffe
ReadImageToDatumReference	test/test_io.cpp	/^bool ReadImageToDatumReference(const string& filename, const int label,$/;"	f	namespace:caffe
ReadNetParamsFromBinaryFileOrDie	util/upgrade_proto.cpp	/^void ReadNetParamsFromBinaryFileOrDie(const string& param_file,$/;"	f	namespace:caffe
ReadNetParamsFromTextFileOrDie	util/upgrade_proto.cpp	/^void ReadNetParamsFromTextFileOrDie(const string& param_file,$/;"	f	namespace:caffe
ReadProtoFromBinaryFile	util/io.cpp	/^bool ReadProtoFromBinaryFile(const char* filename, Message* proto) {$/;"	f	namespace:caffe
ReadProtoFromTextFile	util/io.cpp	/^bool ReadProtoFromTextFile(const char* filename, Message* proto) {$/;"	f	namespace:caffe
ReadSolverParamsFromTextFileOrDie	util/upgrade_proto.cpp	/^void ReadSolverParamsFromTextFileOrDie(const string& param_file,$/;"	f	namespace:caffe
RecurrentInputBlobNames	layers/lstm_layer.cpp	/^void LSTMLayer<Dtype>::RecurrentInputBlobNames(vector<string>* names) const {$/;"	f	class:caffe::LSTMLayer
RecurrentInputBlobNames	layers/rnn_layer.cpp	/^void RNNLayer<Dtype>::RecurrentInputBlobNames(vector<string>* names) const {$/;"	f	class:caffe::RNNLayer
RecurrentInputShapes	layers/lstm_layer.cpp	/^void LSTMLayer<Dtype>::RecurrentInputShapes(vector<BlobShape>* shapes) const {$/;"	f	class:caffe::LSTMLayer
RecurrentInputShapes	layers/rnn_layer.cpp	/^void RNNLayer<Dtype>::RecurrentInputShapes(vector<BlobShape>* shapes) const {$/;"	f	class:caffe::RNNLayer
RecurrentOutputBlobNames	layers/lstm_layer.cpp	/^void LSTMLayer<Dtype>::RecurrentOutputBlobNames(vector<string>* names) const {$/;"	f	class:caffe::LSTMLayer
RecurrentOutputBlobNames	layers/rnn_layer.cpp	/^void RNNLayer<Dtype>::RecurrentOutputBlobNames(vector<string>* names) const {$/;"	f	class:caffe::RNNLayer
ReduceBottomBlobSize	test/test_slice_layer.cpp	/^  virtual void ReduceBottomBlobSize() {$/;"	f	class:caffe::SliceLayerTest
ReductionLayerTest	test/test_reduction_layer.cpp	/^  ReductionLayerTest()$/;"	f	class:caffe::ReductionLayerTest
ReductionLayerTest	test/test_reduction_layer.cpp	/^class ReductionLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
ReferenceLRNForward	test/test_lrn_layer.cpp	/^void CuDNNLRNLayerTest<TypeParam>::ReferenceLRNForward($/;"	f	class:caffe::CuDNNLRNLayerTest
ReferenceLRNForward	test/test_lrn_layer.cpp	/^void LRNLayerTest<TypeParam>::ReferenceLRNForward($/;"	f	class:caffe::LRNLayerTest
Regularize	solvers/sgd_solver.cpp	/^void SGDSolver<Dtype>::Regularize(int param_id) {$/;"	f	class:caffe::SGDSolver
Reset	layers/memory_data_layer.cpp	/^void MemoryDataLayer<Dtype>::Reset(Dtype* data, Dtype* labels, int n) {$/;"	f	class:caffe::MemoryDataLayer
Reset	layers/recurrent_layer.cpp	/^void RecurrentLayer<Dtype>::Reset() {$/;"	f	class:caffe::RecurrentLayer
Reshape	blob.cpp	/^void Blob<Dtype>::Reshape(const BlobShape& shape) {$/;"	f	class:caffe::Blob
Reshape	blob.cpp	/^void Blob<Dtype>::Reshape(const int num, const int channels, const int height,$/;"	f	class:caffe::Blob
Reshape	blob.cpp	/^void Blob<Dtype>::Reshape(const vector<int>& shape) {$/;"	f	class:caffe::Blob
Reshape	layers/accuracy_layer.cpp	/^void AccuracyLayer<Dtype>::Reshape($/;"	f	class:caffe::AccuracyLayer
Reshape	layers/argmax_layer.cpp	/^void ArgMaxLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ArgMaxLayer
Reshape	layers/base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BaseConvolutionLayer
Reshape	layers/batch_norm_layer.cpp	/^void BatchNormLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BatchNormLayer
Reshape	layers/batch_reindex_layer.cpp	/^void BatchReindexLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BatchReindexLayer
Reshape	layers/bias_layer.cpp	/^void BiasLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BiasLayer
Reshape	layers/center_loss_layer.cpp	/^void CenterLossLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CenterLossLayer
Reshape	layers/concat_layer.cpp	/^void ConcatLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ConcatLayer
Reshape	layers/crop_layer.cpp	/^void CropLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CropLayer
Reshape	layers/cudnn_conv_layer.cpp	/^void CuDNNConvolutionLayer<Dtype>::Reshape($/;"	f	class:caffe::CuDNNConvolutionLayer
Reshape	layers/cudnn_lcn_layer.cpp	/^void CuDNNLCNLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CuDNNLCNLayer
Reshape	layers/cudnn_lrn_layer.cpp	/^void CuDNNLRNLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CuDNNLRNLayer
Reshape	layers/cudnn_pooling_layer.cpp	/^void CuDNNPoolingLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CuDNNPoolingLayer
Reshape	layers/cudnn_relu_layer.cpp	/^void CuDNNReLULayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CuDNNReLULayer
Reshape	layers/cudnn_sigmoid_layer.cpp	/^void CuDNNSigmoidLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CuDNNSigmoidLayer
Reshape	layers/cudnn_softmax_layer.cpp	/^void CuDNNSoftmaxLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CuDNNSoftmaxLayer
Reshape	layers/cudnn_tanh_layer.cpp	/^void CuDNNTanHLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CuDNNTanHLayer
Reshape	layers/dropout_layer.cpp	/^void DropoutLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::DropoutLayer
Reshape	layers/eltwise_layer.cpp	/^void EltwiseLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::EltwiseLayer
Reshape	layers/embed_layer.cpp	/^void EmbedLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::EmbedLayer
Reshape	layers/euclidean_loss_layer.cpp	/^void EuclideanLossLayer<Dtype>::Reshape($/;"	f	class:caffe::EuclideanLossLayer
Reshape	layers/filter_layer.cpp	/^void FilterLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::FilterLayer
Reshape	layers/flatten_layer.cpp	/^void FlattenLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::FlattenLayer
Reshape	layers/im2col_layer.cpp	/^void Im2colLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::Im2colLayer
Reshape	layers/infogain_loss_layer.cpp	/^void InfogainLossLayer<Dtype>::Reshape($/;"	f	class:caffe::InfogainLossLayer
Reshape	layers/inner_product_layer.cpp	/^void InnerProductLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::InnerProductLayer
Reshape	layers/loss_layer.cpp	/^void LossLayer<Dtype>::Reshape($/;"	f	class:caffe::LossLayer
Reshape	layers/lrn_layer.cpp	/^void LRNLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::LRNLayer
Reshape	layers/lstm_unit_layer.cpp	/^void LSTMUnitLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::LSTMUnitLayer
Reshape	layers/multinomial_logistic_loss_layer.cpp	/^void MultinomialLogisticLossLayer<Dtype>::Reshape($/;"	f	class:caffe::MultinomialLogisticLossLayer
Reshape	layers/mvn_layer.cpp	/^void MVNLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::MVNLayer
Reshape	layers/neuron_layer.cpp	/^void NeuronLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::NeuronLayer
Reshape	layers/normalize_layer.cpp	/^void NormalizeLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::NormalizeLayer
Reshape	layers/pooling_layer.cpp	/^void PoolingLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::PoolingLayer
Reshape	layers/prelu_layer.cpp	/^void PReLULayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::PReLULayer
Reshape	layers/recurrent_layer.cpp	/^void RecurrentLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::RecurrentLayer
Reshape	layers/reduction_layer.cpp	/^void ReductionLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ReductionLayer
Reshape	layers/reshape_layer.cpp	/^void ReshapeLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ReshapeLayer
Reshape	layers/scale_layer.cpp	/^void ScaleLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ScaleLayer
Reshape	layers/sigmoid_cross_entropy_loss_layer.cpp	/^void SigmoidCrossEntropyLossLayer<Dtype>::Reshape($/;"	f	class:caffe::SigmoidCrossEntropyLossLayer
Reshape	layers/slice_layer.cpp	/^void SliceLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SliceLayer
Reshape	layers/softmax_layer.cpp	/^void SoftmaxLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SoftmaxLayer
Reshape	layers/softmax_loss_layer.cpp	/^void SoftmaxWithLossLayer<Dtype>::Reshape($/;"	f	class:caffe::SoftmaxWithLossLayer
Reshape	layers/split_layer.cpp	/^void SplitLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SplitLayer
Reshape	layers/spp_layer.cpp	/^void SPPLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SPPLayer
Reshape	layers/tile_layer.cpp	/^void TileLayer<Dtype>::Reshape($/;"	f	class:caffe::TileLayer
Reshape	net.cpp	/^void Net<Dtype>::Reshape() {$/;"	f	class:caffe::Net
ReshapeBlobs	test/test_lstm_layer.cpp	/^  void ReshapeBlobs(int num_timesteps, int num_instances) {$/;"	f	class:caffe::LSTMLayerTest
ReshapeBlobs	test/test_rnn_layer.cpp	/^  void ReshapeBlobs(int num_timesteps, int num_instances) {$/;"	f	class:caffe::RNNLayerTest
ReshapeLayerTest	test/test_reshape_layer.cpp	/^  ReshapeLayerTest()$/;"	f	class:caffe::ReshapeLayerTest
ReshapeLayerTest	test/test_reshape_layer.cpp	/^class ReshapeLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
ReshapeLike	blob.cpp	/^void Blob<Dtype>::ReshapeLike(const Blob<Dtype>& other) {$/;"	f	class:caffe::Blob
Restore	solver.cpp	/^void Solver<Dtype>::Restore(const char* state_file) {$/;"	f	class:caffe::Solver
RestoreSolverStateFromBinaryProto	solvers/sgd_solver.cpp	/^void SGDSolver<Dtype>::RestoreSolverStateFromBinaryProto($/;"	f	class:caffe::SGDSolver
RestoreSolverStateFromHDF5	solvers/sgd_solver.cpp	/^void SGDSolver<Dtype>::RestoreSolverStateFromHDF5(const string& state_file) {$/;"	f	class:caffe::SGDSolver
RngBernoulliChecks	test/test_random_number_generator.cpp	/^  void RngBernoulliChecks(const Dtype p, const void* cpu_data) {$/;"	f	class:caffe::RandomNumberGeneratorTest
RngBernoulliFill	test/test_random_number_generator.cpp	/^  void RngBernoulliFill(const Dtype p, void* cpu_data) {$/;"	f	class:caffe::RandomNumberGeneratorTest
RngGaussianChecks	test/test_random_number_generator.cpp	/^  void RngGaussianChecks(const Dtype mu, const Dtype sigma,$/;"	f	class:caffe::RandomNumberGeneratorTest
RngGaussianFill	test/test_random_number_generator.cpp	/^  void RngGaussianFill(const Dtype mu, const Dtype sigma, void* cpu_data) {$/;"	f	class:caffe::RandomNumberGeneratorTest
RngGaussianFillGPU	test/test_random_number_generator.cpp	/^  void RngGaussianFillGPU(const Dtype mu, const Dtype sigma, void* gpu_data) {$/;"	f	class:caffe::RandomNumberGeneratorTest
RngUniformChecks	test/test_random_number_generator.cpp	/^  void RngUniformChecks(const Dtype lower, const Dtype upper,$/;"	f	class:caffe::RandomNumberGeneratorTest
RngUniformFill	test/test_random_number_generator.cpp	/^  void RngUniformFill(const Dtype lower, const Dtype upper, void* cpu_data) {$/;"	f	class:caffe::RandomNumberGeneratorTest
RngUniformFillGPU	test/test_random_number_generator.cpp	/^  void RngUniformFillGPU(const Dtype lower, const Dtype upper, void* gpu_data) {$/;"	f	class:caffe::RandomNumberGeneratorTest
RngUniformIntFillGPU	test/test_random_number_generator.cpp	/^  void RngUniformIntFillGPU(void* gpu_data) {$/;"	f	class:caffe::RandomNumberGeneratorTest
Run	parallel.cpp	/^void P2PSync<Dtype>::Run(const vector<int>& gpus) {$/;"	f	class:caffe::P2PSync
RunFilterNetTest	test/test_net.cpp	/^  void RunFilterNetTest($/;"	f	class:caffe::FilterNetTest
RunInsertionTest	test/test_split_layer.cpp	/^  void RunInsertionTest($/;"	f	class:caffe::SplitLayerInsertionTest
RunLeastSquaresSolver	test/test_gradient_based_solver.cpp	/^  string RunLeastSquaresSolver(const Dtype learning_rate,$/;"	f	class:caffe::GradientBasedSolverTest
RunPaddingUpgradeTest	test/test_upgrade_proto.cpp	/^  void RunPaddingUpgradeTest($/;"	f	class:caffe::PaddingLayerUpgradeTest
RunSolverTypeUpgradeTest	test/test_upgrade_proto.cpp	/^  void RunSolverTypeUpgradeTest($/;"	f	class:caffe::SolverTypeUpgradeTest
RunV0UpgradeTest	test/test_upgrade_proto.cpp	/^  void RunV0UpgradeTest($/;"	f	class:caffe::NetUpgradeTest
RunV1UpgradeTest	test/test_upgrade_proto.cpp	/^  void RunV1UpgradeTest($/;"	f	class:caffe::NetUpgradeTest
SGDSolverTest	test/test_gradient_based_solver.cpp	/^class SGDSolverTest : public GradientBasedSolverTest<TypeParam> {$/;"	c	namespace:caffe	file:
SHELL	Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	test/Makefile	/^SHELL = \/bin\/sh$/;"	m
SPPLayerTest	test/test_spp_layer.cpp	/^  SPPLayerTest()$/;"	f	class:caffe::SPPLayerTest
SPPLayerTest	test/test_spp_layer.cpp	/^class SPPLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
SUFFIXES	Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	test/Makefile	/^SUFFIXES =$/;"	m
SaveBlobs	layers/hdf5_output_layer.cpp	/^void HDF5OutputLayer<Dtype>::SaveBlobs() {$/;"	f	class:caffe::HDF5OutputLayer
ScaleLayerTest	test/test_scale_layer.cpp	/^  ScaleLayerTest()$/;"	f	class:caffe::ScaleLayerTest
ScaleLayerTest	test/test_scale_layer.cpp	/^class ScaleLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
Seconds	util/benchmark.cpp	/^float Timer::Seconds() {$/;"	f	class:caffe::Timer
SetActionFunction	solver.cpp	/^void Solver<Dtype>::SetActionFunction(ActionCallback func) {$/;"	f	class:caffe::Solver
SetDevice	common.cpp	/^void Caffe::SetDevice(const int device_id) {$/;"	f	class:caffe::Caffe
SetUp	test/test_batch_reindex_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::BatchReindexLayerTest
SetUp	test/test_concat_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::ConcatLayerTest
SetUp	test/test_convolution_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::ConvolutionLayerTest
SetUp	test/test_convolution_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::CuDNNConvolutionLayerTest
SetUp	test/test_crop_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::CropLayerTest
SetUp	test/test_data_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::DataLayerTest
SetUp	test/test_db.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::DBTest
SetUp	test/test_deconvolution_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::DeconvolutionLayerTest
SetUp	test/test_dummy_data_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::DummyDataLayerTest
SetUp	test/test_filter_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::FilterLayerTest
SetUp	test/test_hdf5data_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::HDF5DataLayerTest
SetUp	test/test_image_data_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::ImageDataLayerTest
SetUp	test/test_lrn_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::CuDNNLRNLayerTest
SetUp	test/test_lrn_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::LRNLayerTest
SetUp	test/test_math_functions.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::MathFunctionsTest
SetUp	test/test_maxpool_dropout_layers.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::MaxPoolingDropoutTest
SetUp	test/test_memory_data_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::MemoryDataLayerTest
SetUp	test/test_pooling_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::CuDNNPoolingLayerTest
SetUp	test/test_pooling_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::PoolingLayerTest
SetUp	test/test_random_number_generator.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::RandomNumberGeneratorTest
SetUp	test/test_slice_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::SliceLayerTest
SetUp	test/test_spp_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::SPPLayerTest
SetUp	test/test_stochastic_pooling.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::StochasticPoolingLayerTest
SetUp	test/test_tile_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::TileLayerTest
ShapeEquals	blob.cpp	/^bool Blob<Dtype>::ShapeEquals(const BlobProto& other) {$/;"	f	class:caffe::Blob
ShareData	blob.cpp	/^void Blob<Dtype>::ShareData(const Blob& other) {$/;"	f	class:caffe::Blob
ShareDiff	blob.cpp	/^void Blob<Dtype>::ShareDiff(const Blob& other) {$/;"	f	class:caffe::Blob
ShareTrainedLayersWith	net.cpp	/^void Net<Dtype>::ShareTrainedLayersWith(const Net* other) {$/;"	f	class:caffe::Net
ShareWeights	net.cpp	/^void Net<Dtype>::ShareWeights() {$/;"	f	class:caffe::Net
ShuffleImages	layers/image_data_layer.cpp	/^void ImageDataLayer<Dtype>::ShuffleImages() {$/;"	f	class:caffe::ImageDataLayer
SigmoidCrossEntropyLossLayerTest	test/test_sigmoid_cross_entropy_loss_layer.cpp	/^  SigmoidCrossEntropyLossLayerTest()$/;"	f	class:caffe::SigmoidCrossEntropyLossLayerTest
SigmoidCrossEntropyLossLayerTest	test/test_sigmoid_cross_entropy_loss_layer.cpp	/^class SigmoidCrossEntropyLossLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
SigmoidCrossEntropyLossReference	test/test_sigmoid_cross_entropy_loss_layer.cpp	/^  Dtype SigmoidCrossEntropyLossReference(const int count, const int num,$/;"	f	class:caffe::SigmoidCrossEntropyLossLayerTest
SignalHandler	util/signal_handler.cpp	/^SignalHandler::SignalHandler(SolverAction::Enum SIGINT_action,$/;"	f	class:caffe::SignalHandler
SliceLayerTest	test/test_slice_layer.cpp	/^  SliceLayerTest()$/;"	f	class:caffe::SliceLayerTest
SliceLayerTest	test/test_slice_layer.cpp	/^class SliceLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
Snapshot	solver.cpp	/^void Solver<Dtype>::Snapshot() {$/;"	f	class:caffe::Solver
SnapshotFilename	solver.cpp	/^string Solver<Dtype>::SnapshotFilename(const string extension) {$/;"	f	class:caffe::Solver
SnapshotSolverState	solvers/sgd_solver.cpp	/^void SGDSolver<Dtype>::SnapshotSolverState(const string& model_filename) {$/;"	f	class:caffe::SGDSolver
SnapshotSolverStateToBinaryProto	solvers/sgd_solver.cpp	/^void SGDSolver<Dtype>::SnapshotSolverStateToBinaryProto($/;"	f	class:caffe::SGDSolver
SnapshotSolverStateToHDF5	solvers/sgd_solver.cpp	/^void SGDSolver<Dtype>::SnapshotSolverStateToHDF5($/;"	f	class:caffe::SGDSolver
SnapshotToBinaryProto	solver.cpp	/^string Solver<Dtype>::SnapshotToBinaryProto() {$/;"	f	class:caffe::Solver
SnapshotToHDF5	solver.cpp	/^string Solver<Dtype>::SnapshotToHDF5() {$/;"	f	class:caffe::Solver
SoftmaxLayerTest	test/test_softmax_layer.cpp	/^  SoftmaxLayerTest()$/;"	f	class:caffe::SoftmaxLayerTest
SoftmaxLayerTest	test/test_softmax_layer.cpp	/^class SoftmaxLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
SoftmaxWithLossLayerTest	test/test_softmax_with_loss_layer.cpp	/^  SoftmaxWithLossLayerTest()$/;"	f	class:caffe::SoftmaxWithLossLayerTest
SoftmaxWithLossLayerTest	test/test_softmax_with_loss_layer.cpp	/^class SoftmaxWithLossLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
Solve	solver.cpp	/^void Solver<Dtype>::Solve(const char* resume_file) {$/;"	f	class:caffe::Solver
Solver	solver.cpp	/^Solver<Dtype>::Solver(const SolverParameter& param, const Solver* root_solver)$/;"	f	class:caffe::Solver
Solver	solver.cpp	/^Solver<Dtype>::Solver(const string& param_file, const Solver* root_solver)$/;"	f	class:caffe::Solver
SolverFactoryTest	test/test_solver_factory.cpp	/^class SolverFactoryTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
SolverNeedsTypeUpgrade	util/upgrade_proto.cpp	/^bool SolverNeedsTypeUpgrade(const SolverParameter& solver_param) {$/;"	f	namespace:caffe
SolverTest	test/test_solver.cpp	/^class SolverTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
SolverTypeUpgradeTest	test/test_upgrade_proto.cpp	/^class SolverTypeUpgradeTest : public ::testing::Test {$/;"	c	namespace:caffe	file:
SplitBlobName	util/insert_splits.cpp	/^string SplitBlobName(const string& layer_name, const string& blob_name,$/;"	f	namespace:caffe
SplitLayerInsertionTest	test/test_split_layer.cpp	/^class SplitLayerInsertionTest : public ::testing::Test {$/;"	c	namespace:caffe	file:
SplitLayerName	util/insert_splits.cpp	/^string SplitLayerName(const string& layer_name, const string& blob_name,$/;"	f	namespace:caffe
SplitLayerTest	test/test_split_layer.cpp	/^  SplitLayerTest()$/;"	f	class:caffe::SplitLayerTest
SplitLayerTest	test/test_split_layer.cpp	/^class SplitLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
Start	util/benchmark.cpp	/^void CPUTimer::Start() {$/;"	f	class:caffe::CPUTimer
Start	util/benchmark.cpp	/^void Timer::Start() {$/;"	f	class:caffe::Timer
StartInternalThread	internal_thread.cpp	/^void InternalThread::StartInternalThread() {$/;"	f	class:caffe::InternalThread
StateMeetsRule	net.cpp	/^bool Net<Dtype>::StateMeetsRule(const NetState& state,$/;"	f	class:caffe::Net
Step	solver.cpp	/^void Solver<Dtype>::Step(int iters) {$/;"	f	class:caffe::Solver
StochasticPoolingLayerTest	test/test_stochastic_pooling.cpp	/^  StochasticPoolingLayerTest()$/;"	f	class:caffe::StochasticPoolingLayerTest
StochasticPoolingLayerTest	test/test_stochastic_pooling.cpp	/^class StochasticPoolingLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
Stop	util/benchmark.cpp	/^void CPUTimer::Stop() {$/;"	f	class:caffe::CPUTimer
Stop	util/benchmark.cpp	/^void Timer::Stop() {$/;"	f	class:caffe::Timer
StopInternalThread	internal_thread.cpp	/^void InternalThread::StopInternalThread() {$/;"	f	class:caffe::InternalThread
SyncedMemoryTest	test/test_syncedmem.cpp	/^class SyncedMemoryTest : public ::testing::Test {};$/;"	c	namespace:caffe	file:
TEST_F	test/test_common.cpp	/^TEST_F(CommonTest, TestBrewMode) {$/;"	f	namespace:caffe
TEST_F	test/test_common.cpp	/^TEST_F(CommonTest, TestCublasHandlerGPU) {$/;"	f	namespace:caffe
TEST_F	test/test_common.cpp	/^TEST_F(CommonTest, TestRandSeedCPU) {$/;"	f	namespace:caffe
TEST_F	test/test_common.cpp	/^TEST_F(CommonTest, TestRandSeedGPU) {$/;"	f	namespace:caffe
TEST_F	test/test_internal_thread.cpp	/^TEST_F(InternalThreadTest, TestRandomSeed) {$/;"	f	namespace:caffe
TEST_F	test/test_internal_thread.cpp	/^TEST_F(InternalThreadTest, TestStartAndExit) {$/;"	f	namespace:caffe
TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestCVMatToDatum) {$/;"	f	namespace:caffe
TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestCVMatToDatumContent) {$/;"	f	namespace:caffe
TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestCVMatToDatumReference) {$/;"	f	namespace:caffe
TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestDecodeDatum) {$/;"	f	namespace:caffe
TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestDecodeDatumNative) {$/;"	f	namespace:caffe
TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestDecodeDatumNativeGray) {$/;"	f	namespace:caffe
TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestDecodeDatumToCVMat) {$/;"	f	namespace:caffe
TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestDecodeDatumToCVMatContent) {$/;"	f	namespace:caffe
TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestDecodeDatumToCVMatContentNative) {$/;"	f	namespace:caffe
TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestDecodeDatumToCVMatNative) {$/;"	f	namespace:caffe
TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestDecodeDatumToCVMatNativeGray) {$/;"	f	namespace:caffe
TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestReadFileToDatum) {$/;"	f	namespace:caffe
TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestReadImageToCVMat) {$/;"	f	namespace:caffe
TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestReadImageToCVMatGray) {$/;"	f	namespace:caffe
TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestReadImageToCVMatResized) {$/;"	f	namespace:caffe
TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestReadImageToCVMatResizedGray) {$/;"	f	namespace:caffe
TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestReadImageToCVMatResizedSquare) {$/;"	f	namespace:caffe
TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestReadImageToDatum) {$/;"	f	namespace:caffe
TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestReadImageToDatumContent) {$/;"	f	namespace:caffe
TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestReadImageToDatumContentGray) {$/;"	f	namespace:caffe
TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestReadImageToDatumGray) {$/;"	f	namespace:caffe
TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestReadImageToDatumReference) {$/;"	f	namespace:caffe
TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestReadImageToDatumReferenceResized) {$/;"	f	namespace:caffe
TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestReadImageToDatumResized) {$/;"	f	namespace:caffe
TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestReadImageToDatumResizedGray) {$/;"	f	namespace:caffe
TEST_F	test/test_io.cpp	/^TEST_F(IOTest, TestReadImageToDatumResizedSquare) {$/;"	f	namespace:caffe
TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterInByIncludeMultiRule) {$/;"	f	namespace:caffe
TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterInByMaxLevel) {$/;"	f	namespace:caffe
TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterInByMaxLevel2) {$/;"	f	namespace:caffe
TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterInByMinLevel) {$/;"	f	namespace:caffe
TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterInByMinLevel2) {$/;"	f	namespace:caffe
TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterInByMultipleStage) {$/;"	f	namespace:caffe
TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterInByMultipleStage2) {$/;"	f	namespace:caffe
TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterInByNotStage) {$/;"	f	namespace:caffe
TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterInByStage) {$/;"	f	namespace:caffe
TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterInByStage2) {$/;"	f	namespace:caffe
TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterInOutByExcludeMultiRule) {$/;"	f	namespace:caffe
TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterInOutByIncludeMultiRule) {$/;"	f	namespace:caffe
TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterLeNetTrainTest) {$/;"	f	namespace:caffe
TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterOutByMaxLevel) {$/;"	f	namespace:caffe
TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterOutByMinLevel) {$/;"	f	namespace:caffe
TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterOutByMultipleStage) {$/;"	f	namespace:caffe
TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterOutByNotStage) {$/;"	f	namespace:caffe
TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterOutByStage) {$/;"	f	namespace:caffe
TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterOutByStage2) {$/;"	f	namespace:caffe
TEST_F	test/test_net.cpp	/^TEST_F(FilterNetTest, TestNoFilter) {$/;"	f	namespace:caffe
TEST_F	test/test_platform.cpp	/^TEST_F(PlatformTest, TestInitialization) {$/;"	f	namespace:caffe
TEST_F	test/test_protobuf.cpp	/^TEST_F(ProtoTest, TestSerialization) {$/;"	f	namespace:caffe
TEST_F	test/test_split_layer.cpp	/^TEST_F(SplitLayerInsertionTest, TestInsertion) {$/;"	f	namespace:caffe
TEST_F	test/test_split_layer.cpp	/^TEST_F(SplitLayerInsertionTest, TestInsertionTwoTop) {$/;"	f	namespace:caffe
TEST_F	test/test_split_layer.cpp	/^TEST_F(SplitLayerInsertionTest, TestLossInsertion) {$/;"	f	namespace:caffe
TEST_F	test/test_split_layer.cpp	/^TEST_F(SplitLayerInsertionTest, TestNoInsertion1) {$/;"	f	namespace:caffe
TEST_F	test/test_split_layer.cpp	/^TEST_F(SplitLayerInsertionTest, TestNoInsertion2) {$/;"	f	namespace:caffe
TEST_F	test/test_split_layer.cpp	/^TEST_F(SplitLayerInsertionTest, TestNoInsertionImageNet) {$/;"	f	namespace:caffe
TEST_F	test/test_split_layer.cpp	/^TEST_F(SplitLayerInsertionTest, TestNoInsertionWithInPlace) {$/;"	f	namespace:caffe
TEST_F	test/test_split_layer.cpp	/^TEST_F(SplitLayerInsertionTest, TestWithInPlace) {$/;"	f	namespace:caffe
TEST_F	test/test_syncedmem.cpp	/^TEST_F(SyncedMemoryTest, TestAllocationCPU) {$/;"	f	namespace:caffe
TEST_F	test/test_syncedmem.cpp	/^TEST_F(SyncedMemoryTest, TestAllocationCPUGPU) {$/;"	f	namespace:caffe
TEST_F	test/test_syncedmem.cpp	/^TEST_F(SyncedMemoryTest, TestAllocationGPU) {$/;"	f	namespace:caffe
TEST_F	test/test_syncedmem.cpp	/^TEST_F(SyncedMemoryTest, TestCPUWrite) {$/;"	f	namespace:caffe
TEST_F	test/test_syncedmem.cpp	/^TEST_F(SyncedMemoryTest, TestGPURead) {$/;"	f	namespace:caffe
TEST_F	test/test_syncedmem.cpp	/^TEST_F(SyncedMemoryTest, TestGPUWrite) {$/;"	f	namespace:caffe
TEST_F	test/test_syncedmem.cpp	/^TEST_F(SyncedMemoryTest, TestInitialization) {$/;"	f	namespace:caffe
TEST_F	test/test_upgrade_proto.cpp	/^TEST_F(NetUpgradeTest, TestAllParams) {$/;"	f	namespace:caffe
TEST_F	test/test_upgrade_proto.cpp	/^TEST_F(NetUpgradeTest, TestImageNet) {$/;"	f	namespace:caffe
TEST_F	test/test_upgrade_proto.cpp	/^TEST_F(NetUpgradeTest, TestSimple) {$/;"	f	namespace:caffe
TEST_F	test/test_upgrade_proto.cpp	/^TEST_F(NetUpgradeTest, TestUpgradeV1LayerType) {$/;"	f	namespace:caffe
TEST_F	test/test_upgrade_proto.cpp	/^TEST_F(PaddingLayerUpgradeTest, TestImageNet) {$/;"	f	namespace:caffe
TEST_F	test/test_upgrade_proto.cpp	/^TEST_F(PaddingLayerUpgradeTest, TestSimple) {$/;"	f	namespace:caffe
TEST_F	test/test_upgrade_proto.cpp	/^TEST_F(PaddingLayerUpgradeTest, TestTwoTops) {$/;"	f	namespace:caffe
TEST_F	test/test_upgrade_proto.cpp	/^TEST_F(SolverTypeUpgradeTest, TestSimple) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_accuracy_layer.cpp	/^TYPED_TEST(AccuracyLayerTest, TestForwardCPU) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_accuracy_layer.cpp	/^TYPED_TEST(AccuracyLayerTest, TestForwardCPUPerClass) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_accuracy_layer.cpp	/^TYPED_TEST(AccuracyLayerTest, TestForwardCPUPerClassWithIgnoreLabel) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_accuracy_layer.cpp	/^TYPED_TEST(AccuracyLayerTest, TestForwardCPUTopK) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_accuracy_layer.cpp	/^TYPED_TEST(AccuracyLayerTest, TestForwardIgnoreLabel) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_accuracy_layer.cpp	/^TYPED_TEST(AccuracyLayerTest, TestForwardWithSpatialAxes) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_accuracy_layer.cpp	/^TYPED_TEST(AccuracyLayerTest, TestSetup) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_accuracy_layer.cpp	/^TYPED_TEST(AccuracyLayerTest, TestSetupOutputPerClass) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_accuracy_layer.cpp	/^TYPED_TEST(AccuracyLayerTest, TestSetupTopK) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_argmax_layer.cpp	/^TYPED_TEST(ArgMaxLayerTest, TestCPU) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_argmax_layer.cpp	/^TYPED_TEST(ArgMaxLayerTest, TestCPUAxis) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_argmax_layer.cpp	/^TYPED_TEST(ArgMaxLayerTest, TestCPUAxisMaxValTopK) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_argmax_layer.cpp	/^TYPED_TEST(ArgMaxLayerTest, TestCPUAxisTopK) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_argmax_layer.cpp	/^TYPED_TEST(ArgMaxLayerTest, TestCPUMaxVal) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_argmax_layer.cpp	/^TYPED_TEST(ArgMaxLayerTest, TestCPUMaxValTopK) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_argmax_layer.cpp	/^TYPED_TEST(ArgMaxLayerTest, TestCPUTopK) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_argmax_layer.cpp	/^TYPED_TEST(ArgMaxLayerTest, TestSetup) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_argmax_layer.cpp	/^TYPED_TEST(ArgMaxLayerTest, TestSetupAxis) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_argmax_layer.cpp	/^TYPED_TEST(ArgMaxLayerTest, TestSetupAxisMaxVal) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_argmax_layer.cpp	/^TYPED_TEST(ArgMaxLayerTest, TestSetupAxisNegativeIndexing) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_argmax_layer.cpp	/^TYPED_TEST(ArgMaxLayerTest, TestSetupMaxVal) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_batch_norm_layer.cpp	/^  TYPED_TEST(BatchNormLayerTest, TestForward) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_batch_norm_layer.cpp	/^  TYPED_TEST(BatchNormLayerTest, TestForwardInplace) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_batch_norm_layer.cpp	/^  TYPED_TEST(BatchNormLayerTest, TestGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_batch_reindex_layer.cpp	/^TYPED_TEST(BatchReindexLayerTest, TestForward) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_batch_reindex_layer.cpp	/^TYPED_TEST(BatchReindexLayerTest, TestGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_benchmark.cpp	/^TYPED_TEST(BenchmarkTest, TestTimerConstructor) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_benchmark.cpp	/^TYPED_TEST(BenchmarkTest, TestTimerMilliSeconds) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_benchmark.cpp	/^TYPED_TEST(BenchmarkTest, TestTimerSeconds) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_benchmark.cpp	/^TYPED_TEST(BenchmarkTest, TestTimerStart) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_benchmark.cpp	/^TYPED_TEST(BenchmarkTest, TestTimerStop) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_bias_layer.cpp	/^TYPED_TEST(BiasLayerTest, TestBackwardBroadcastMiddleInPlace) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_bias_layer.cpp	/^TYPED_TEST(BiasLayerTest, TestBackwardEltwiseInPlace) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_bias_layer.cpp	/^TYPED_TEST(BiasLayerTest, TestForwardBias) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_bias_layer.cpp	/^TYPED_TEST(BiasLayerTest, TestForwardBiasAxis2) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_bias_layer.cpp	/^TYPED_TEST(BiasLayerTest, TestForwardBroadcastBegin) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_bias_layer.cpp	/^TYPED_TEST(BiasLayerTest, TestForwardBroadcastEnd) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_bias_layer.cpp	/^TYPED_TEST(BiasLayerTest, TestForwardBroadcastMiddle) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_bias_layer.cpp	/^TYPED_TEST(BiasLayerTest, TestForwardBroadcastMiddleInPlace) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_bias_layer.cpp	/^TYPED_TEST(BiasLayerTest, TestForwardBroadcastMiddleWithParam) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_bias_layer.cpp	/^TYPED_TEST(BiasLayerTest, TestForwardEltwise) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_bias_layer.cpp	/^TYPED_TEST(BiasLayerTest, TestForwardEltwiseInPlace) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_bias_layer.cpp	/^TYPED_TEST(BiasLayerTest, TestForwardEltwiseWithParam) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_bias_layer.cpp	/^TYPED_TEST(BiasLayerTest, TestGradientBias) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_bias_layer.cpp	/^TYPED_TEST(BiasLayerTest, TestGradientBiasAxis2) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_bias_layer.cpp	/^TYPED_TEST(BiasLayerTest, TestGradientBroadcastBegin) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_bias_layer.cpp	/^TYPED_TEST(BiasLayerTest, TestGradientBroadcastEnd) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_bias_layer.cpp	/^TYPED_TEST(BiasLayerTest, TestGradientBroadcastMiddle) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_bias_layer.cpp	/^TYPED_TEST(BiasLayerTest, TestGradientBroadcastMiddleWithParam) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_bias_layer.cpp	/^TYPED_TEST(BiasLayerTest, TestGradientEltwise) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_bias_layer.cpp	/^TYPED_TEST(BiasLayerTest, TestGradientEltwiseWithParam) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_blob.cpp	/^TYPED_TEST(BlobMathTest, TestAsum) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_blob.cpp	/^TYPED_TEST(BlobMathTest, TestScaleData) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_blob.cpp	/^TYPED_TEST(BlobMathTest, TestSumOfSquares) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_blob.cpp	/^TYPED_TEST(BlobSimpleTest, TestInitialization) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_blob.cpp	/^TYPED_TEST(BlobSimpleTest, TestLegacyBlobProtoShapeEquals) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_blob.cpp	/^TYPED_TEST(BlobSimpleTest, TestPointersCPUGPU) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_blob.cpp	/^TYPED_TEST(BlobSimpleTest, TestReshape) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_blob.cpp	/^TYPED_TEST(BlobSimpleTest, TestReshapeZero) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_concat_layer.cpp	/^TYPED_TEST(ConcatLayerTest, TestForwardChannels) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_concat_layer.cpp	/^TYPED_TEST(ConcatLayerTest, TestForwardNum) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_concat_layer.cpp	/^TYPED_TEST(ConcatLayerTest, TestForwardTrivial) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_concat_layer.cpp	/^TYPED_TEST(ConcatLayerTest, TestGradientChannels) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_concat_layer.cpp	/^TYPED_TEST(ConcatLayerTest, TestGradientChannelsBottomOneOnly) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_concat_layer.cpp	/^TYPED_TEST(ConcatLayerTest, TestGradientNum) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_concat_layer.cpp	/^TYPED_TEST(ConcatLayerTest, TestGradientTrivial) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_concat_layer.cpp	/^TYPED_TEST(ConcatLayerTest, TestSetupChannels) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_concat_layer.cpp	/^TYPED_TEST(ConcatLayerTest, TestSetupChannelsNegativeIndexing) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_concat_layer.cpp	/^TYPED_TEST(ConcatLayerTest, TestSetupNum) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_contrastive_loss_layer.cpp	/^TYPED_TEST(ContrastiveLossLayerTest, TestForward) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_contrastive_loss_layer.cpp	/^TYPED_TEST(ContrastiveLossLayerTest, TestForwardLegacy) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_contrastive_loss_layer.cpp	/^TYPED_TEST(ContrastiveLossLayerTest, TestGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_contrastive_loss_layer.cpp	/^TYPED_TEST(ContrastiveLossLayerTest, TestGradientLegacy) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_convolution_layer.cpp	/^TYPED_TEST(ConvolutionLayerTest, Test0DConvolution) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_convolution_layer.cpp	/^TYPED_TEST(ConvolutionLayerTest, Test1x1Convolution) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_convolution_layer.cpp	/^TYPED_TEST(ConvolutionLayerTest, Test1x1Gradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_convolution_layer.cpp	/^TYPED_TEST(ConvolutionLayerTest, TestDilated3DConvolution) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_convolution_layer.cpp	/^TYPED_TEST(ConvolutionLayerTest, TestDilatedConvolution) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_convolution_layer.cpp	/^TYPED_TEST(ConvolutionLayerTest, TestDilatedGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_convolution_layer.cpp	/^TYPED_TEST(ConvolutionLayerTest, TestGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_convolution_layer.cpp	/^TYPED_TEST(ConvolutionLayerTest, TestGradient3D) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_convolution_layer.cpp	/^TYPED_TEST(ConvolutionLayerTest, TestGradientGroup) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_convolution_layer.cpp	/^TYPED_TEST(ConvolutionLayerTest, TestNDAgainst2D) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_convolution_layer.cpp	/^TYPED_TEST(ConvolutionLayerTest, TestSetup) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_convolution_layer.cpp	/^TYPED_TEST(ConvolutionLayerTest, TestSimple3DConvolution) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_convolution_layer.cpp	/^TYPED_TEST(ConvolutionLayerTest, TestSimpleConvolution) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_convolution_layer.cpp	/^TYPED_TEST(ConvolutionLayerTest, TestSimpleConvolutionGroup) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_convolution_layer.cpp	/^TYPED_TEST(ConvolutionLayerTest, TestSobelConvolution) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_convolution_layer.cpp	/^TYPED_TEST(CuDNNConvolutionLayerTest, TestGradientCuDNN) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_convolution_layer.cpp	/^TYPED_TEST(CuDNNConvolutionLayerTest, TestGradientGroupCuDNN) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_convolution_layer.cpp	/^TYPED_TEST(CuDNNConvolutionLayerTest, TestSetupCuDNN) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_convolution_layer.cpp	/^TYPED_TEST(CuDNNConvolutionLayerTest, TestSimpleConvolutionCuDNN) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_convolution_layer.cpp	/^TYPED_TEST(CuDNNConvolutionLayerTest, TestSimpleConvolutionGroupCuDNN) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_convolution_layer.cpp	/^TYPED_TEST(CuDNNConvolutionLayerTest, TestSobelConvolutionCuDNN) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_crop_layer.cpp	/^TYPED_TEST(CropLayerTest, TestCrop5D) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_crop_layer.cpp	/^TYPED_TEST(CropLayerTest, TestCrop5DGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_crop_layer.cpp	/^TYPED_TEST(CropLayerTest, TestCropAll) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_crop_layer.cpp	/^TYPED_TEST(CropLayerTest, TestCropAllGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_crop_layer.cpp	/^TYPED_TEST(CropLayerTest, TestCropAllOffset) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_crop_layer.cpp	/^TYPED_TEST(CropLayerTest, TestCropHW) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_crop_layer.cpp	/^TYPED_TEST(CropLayerTest, TestCropHWGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_crop_layer.cpp	/^TYPED_TEST(CropLayerTest, TestDimensionsCheck) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_crop_layer.cpp	/^TYPED_TEST(CropLayerTest, TestSetupShapeAll) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_crop_layer.cpp	/^TYPED_TEST(CropLayerTest, TestSetupShapeDefault) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_crop_layer.cpp	/^TYPED_TEST(CropLayerTest, TestSetupShapeNegativeIndexing) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_data_layer.cpp	/^TYPED_TEST(DataLayerTest, TestReadCropTestLMDB) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_data_layer.cpp	/^TYPED_TEST(DataLayerTest, TestReadCropTestLevelDB) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_data_layer.cpp	/^TYPED_TEST(DataLayerTest, TestReadCropTrainLMDB) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_data_layer.cpp	/^TYPED_TEST(DataLayerTest, TestReadCropTrainLevelDB) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_data_layer.cpp	/^TYPED_TEST(DataLayerTest, TestReadCropTrainSequenceSeededLMDB) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_data_layer.cpp	/^TYPED_TEST(DataLayerTest, TestReadCropTrainSequenceSeededLevelDB) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_data_layer.cpp	/^TYPED_TEST(DataLayerTest, TestReadCropTrainSequenceUnseededLMDB) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_data_layer.cpp	/^TYPED_TEST(DataLayerTest, TestReadCropTrainSequenceUnseededLevelDB) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_data_layer.cpp	/^TYPED_TEST(DataLayerTest, TestReadLMDB) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_data_layer.cpp	/^TYPED_TEST(DataLayerTest, TestReadLevelDB) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_data_layer.cpp	/^TYPED_TEST(DataLayerTest, TestReshapeLMDB) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_data_layer.cpp	/^TYPED_TEST(DataLayerTest, TestReshapeLevelDB) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_data_transformer.cpp	/^TYPED_TEST(DataTransformTest, TestCropMirrorTest) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_data_transformer.cpp	/^TYPED_TEST(DataTransformTest, TestCropMirrorTrain) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_data_transformer.cpp	/^TYPED_TEST(DataTransformTest, TestCropSize) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_data_transformer.cpp	/^TYPED_TEST(DataTransformTest, TestCropTest) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_data_transformer.cpp	/^TYPED_TEST(DataTransformTest, TestCropTrain) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_data_transformer.cpp	/^TYPED_TEST(DataTransformTest, TestEmptyTransform) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_data_transformer.cpp	/^TYPED_TEST(DataTransformTest, TestEmptyTransformUniquePixels) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_data_transformer.cpp	/^TYPED_TEST(DataTransformTest, TestMeanFile) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_data_transformer.cpp	/^TYPED_TEST(DataTransformTest, TestMeanValue) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_data_transformer.cpp	/^TYPED_TEST(DataTransformTest, TestMeanValues) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_data_transformer.cpp	/^TYPED_TEST(DataTransformTest, TestMirrorTest) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_data_transformer.cpp	/^TYPED_TEST(DataTransformTest, TestMirrorTrain) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_db.cpp	/^TYPED_TEST(DBTest, TestGetDB) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_db.cpp	/^TYPED_TEST(DBTest, TestKeyValue) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_db.cpp	/^TYPED_TEST(DBTest, TestNext) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_db.cpp	/^TYPED_TEST(DBTest, TestSeekToFirst) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_db.cpp	/^TYPED_TEST(DBTest, TestWrite) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_deconvolution_layer.cpp	/^TYPED_TEST(DeconvolutionLayerTest, TestGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_deconvolution_layer.cpp	/^TYPED_TEST(DeconvolutionLayerTest, TestGradient3D) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_deconvolution_layer.cpp	/^TYPED_TEST(DeconvolutionLayerTest, TestNDAgainst2D) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_deconvolution_layer.cpp	/^TYPED_TEST(DeconvolutionLayerTest, TestSetup) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_deconvolution_layer.cpp	/^TYPED_TEST(DeconvolutionLayerTest, TestSimpleDeconvolution) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_dummy_data_layer.cpp	/^TYPED_TEST(DummyDataLayerTest, TestOneTopConstant) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_dummy_data_layer.cpp	/^TYPED_TEST(DummyDataLayerTest, TestThreeTopConstantGaussianConstant) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_dummy_data_layer.cpp	/^TYPED_TEST(DummyDataLayerTest, TestTwoTopConstant) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_eltwise_layer.cpp	/^TYPED_TEST(EltwiseLayerTest, TestMax) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_eltwise_layer.cpp	/^TYPED_TEST(EltwiseLayerTest, TestMaxGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_eltwise_layer.cpp	/^TYPED_TEST(EltwiseLayerTest, TestProd) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_eltwise_layer.cpp	/^TYPED_TEST(EltwiseLayerTest, TestSetUp) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_eltwise_layer.cpp	/^TYPED_TEST(EltwiseLayerTest, TestStableProdGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_eltwise_layer.cpp	/^TYPED_TEST(EltwiseLayerTest, TestSum) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_eltwise_layer.cpp	/^TYPED_TEST(EltwiseLayerTest, TestSumCoeff) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_eltwise_layer.cpp	/^TYPED_TEST(EltwiseLayerTest, TestSumCoeffGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_eltwise_layer.cpp	/^TYPED_TEST(EltwiseLayerTest, TestSumGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_eltwise_layer.cpp	/^TYPED_TEST(EltwiseLayerTest, TestUnstableProdGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_embed_layer.cpp	/^TYPED_TEST(EmbedLayerTest, TestForward) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_embed_layer.cpp	/^TYPED_TEST(EmbedLayerTest, TestForwardWithBias) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_embed_layer.cpp	/^TYPED_TEST(EmbedLayerTest, TestGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_embed_layer.cpp	/^TYPED_TEST(EmbedLayerTest, TestGradientWithBias) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_embed_layer.cpp	/^TYPED_TEST(EmbedLayerTest, TestSetUp) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_euclidean_loss_layer.cpp	/^TYPED_TEST(EuclideanLossLayerTest, TestForward) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_euclidean_loss_layer.cpp	/^TYPED_TEST(EuclideanLossLayerTest, TestGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_filler.cpp	/^TYPED_TEST(ConstantFillerTest, TestFill) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_filler.cpp	/^TYPED_TEST(GaussianFillerTest, TestFill) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_filler.cpp	/^TYPED_TEST(MSRAFillerTest, TestFillAverage) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_filler.cpp	/^TYPED_TEST(MSRAFillerTest, TestFillFanIn) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_filler.cpp	/^TYPED_TEST(MSRAFillerTest, TestFillFanOut) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_filler.cpp	/^TYPED_TEST(PositiveUnitballFillerTest, TestFill) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_filler.cpp	/^TYPED_TEST(UniformFillerTest, TestFill) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_filler.cpp	/^TYPED_TEST(XavierFillerTest, TestFillAverage) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_filler.cpp	/^TYPED_TEST(XavierFillerTest, TestFillFanIn) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_filler.cpp	/^TYPED_TEST(XavierFillerTest, TestFillFanOut) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_filter_layer.cpp	/^TYPED_TEST(FilterLayerTest, TestForward) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_filter_layer.cpp	/^TYPED_TEST(FilterLayerTest, TestGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_filter_layer.cpp	/^TYPED_TEST(FilterLayerTest, TestReshape) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_flatten_layer.cpp	/^TYPED_TEST(FlattenLayerTest, TestForward) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_flatten_layer.cpp	/^TYPED_TEST(FlattenLayerTest, TestGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_flatten_layer.cpp	/^TYPED_TEST(FlattenLayerTest, TestSetup) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_flatten_layer.cpp	/^TYPED_TEST(FlattenLayerTest, TestSetupWithAxis) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_flatten_layer.cpp	/^TYPED_TEST(FlattenLayerTest, TestSetupWithEndAxis) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_flatten_layer.cpp	/^TYPED_TEST(FlattenLayerTest, TestSetupWithStartAndEndAxis) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaDeltaSolverTest, TestAdaDeltaLeastSquaresUpdate) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaDeltaSolverTest, TestAdaDeltaLeastSquaresUpdateWithEverything) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaDeltaSolverTest, TestAdaDeltaLeastSquaresUpdateWithHalfMomentum) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaDeltaSolverTest, TestAdaDeltaLeastSquaresUpdateWithMomentum) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaDeltaSolverTest, TestAdaDeltaLeastSquaresUpdateWithWeightDecay) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaDeltaSolverTest, TestLeastSquaresUpdateWithEverythingAccum) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaDeltaSolverTest, TestLeastSquaresUpdateWithEverythingAccumShare) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaDeltaSolverTest, TestLeastSquaresUpdateWithMomentumMultiIter) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaDeltaSolverTest, TestSnapshot) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaDeltaSolverTest, TestSnapshotShare) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaDeltaSolverTest,$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaGradSolverTest, TestAdaGradLeastSquaresUpdate) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaGradSolverTest, TestAdaGradLeastSquaresUpdateLROneHundredth) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaGradSolverTest, TestAdaGradLeastSquaresUpdateWithEverything) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaGradSolverTest, TestAdaGradLeastSquaresUpdateWithWeightDecay) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaGradSolverTest, TestLeastSquaresUpdateWithEverythingAccum) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaGradSolverTest, TestLeastSquaresUpdateWithEverythingAccumShare) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaGradSolverTest, TestSnapshot) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaGradSolverTest, TestSnapshotShare) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaGradSolverTest,$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdamSolverTest, TestAdamLeastSquaresUpdate) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdamSolverTest, TestAdamLeastSquaresUpdateWithEverything) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdamSolverTest, TestAdamLeastSquaresUpdateWithEverythingShare) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdamSolverTest, TestAdamLeastSquaresUpdateWithWeightDecay) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdamSolverTest, TestLeastSquaresUpdateWithEverythingAccum) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdamSolverTest, TestLeastSquaresUpdateWithEverythingAccumShare) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdamSolverTest, TestSnapshot) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdamSolverTest, TestSnapshotShare) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(NesterovSolverTest, TestLeastSquaresUpdateWithEverythingAccum) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(NesterovSolverTest, TestLeastSquaresUpdateWithEverythingAccumShare) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(NesterovSolverTest, TestLeastSquaresUpdateWithMomentumMultiIter) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(NesterovSolverTest, TestNesterovLeastSquaresUpdate) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(NesterovSolverTest, TestNesterovLeastSquaresUpdateLROneHundredth) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(NesterovSolverTest, TestNesterovLeastSquaresUpdateWithEverything) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(NesterovSolverTest, TestNesterovLeastSquaresUpdateWithMomentum) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(NesterovSolverTest, TestNesterovLeastSquaresUpdateWithWeightDecay) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(NesterovSolverTest, TestSnapshot) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(NesterovSolverTest, TestSnapshotShare) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(NesterovSolverTest,$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(RMSPropSolverTest, TestLeastSquaresUpdateWithEverythingAccum) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(RMSPropSolverTest, TestLeastSquaresUpdateWithEverythingAccumShare) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(RMSPropSolverTest, TestRMSPropLeastSquaresUpdateWithEverything) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(RMSPropSolverTest, TestRMSPropLeastSquaresUpdateWithRmsDecay) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(RMSPropSolverTest, TestRMSPropLeastSquaresUpdateWithWeightDecay) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(RMSPropSolverTest, TestSnapshot) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(RMSPropSolverTest, TestSnapshotShare) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(RMSPropSolverTest,$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(SGDSolverTest, TestLeastSquaresUpdate) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(SGDSolverTest, TestLeastSquaresUpdateLROneHundredth) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(SGDSolverTest, TestLeastSquaresUpdateWithEverything) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(SGDSolverTest, TestLeastSquaresUpdateWithEverythingAccum) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(SGDSolverTest, TestLeastSquaresUpdateWithEverythingAccumShare) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(SGDSolverTest, TestLeastSquaresUpdateWithEverythingShare) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(SGDSolverTest, TestLeastSquaresUpdateWithMomentum) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(SGDSolverTest, TestLeastSquaresUpdateWithMomentumMultiIter) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(SGDSolverTest, TestLeastSquaresUpdateWithWeightDecay) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(SGDSolverTest, TestLeastSquaresUpdateWithWeightDecayMultiIter) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(SGDSolverTest, TestSnapshot) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_gradient_based_solver.cpp	/^TYPED_TEST(SGDSolverTest, TestSnapshotShare) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_hdf5_output_layer.cpp	/^TYPED_TEST(HDF5OutputLayerTest, TestForward) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_hdf5data_layer.cpp	/^TYPED_TEST(HDF5DataLayerTest, TestRead) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_hinge_loss_layer.cpp	/^TYPED_TEST(HingeLossLayerTest, TestGradientL1) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_hinge_loss_layer.cpp	/^TYPED_TEST(HingeLossLayerTest, TestGradientL2) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_im2col_layer.cpp	/^TYPED_TEST(Im2colLayerTest, TestDilatedGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_im2col_layer.cpp	/^TYPED_TEST(Im2colLayerTest, TestDilatedGradientForceND) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_im2col_layer.cpp	/^TYPED_TEST(Im2colLayerTest, TestForward) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_im2col_layer.cpp	/^TYPED_TEST(Im2colLayerTest, TestGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_im2col_layer.cpp	/^TYPED_TEST(Im2colLayerTest, TestGradientForceND) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_im2col_layer.cpp	/^TYPED_TEST(Im2colLayerTest, TestRect) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_im2col_layer.cpp	/^TYPED_TEST(Im2colLayerTest, TestRectGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_im2col_layer.cpp	/^TYPED_TEST(Im2colLayerTest, TestSetup) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_image_data_layer.cpp	/^TYPED_TEST(ImageDataLayerTest, TestRead) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_image_data_layer.cpp	/^TYPED_TEST(ImageDataLayerTest, TestReshape) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_image_data_layer.cpp	/^TYPED_TEST(ImageDataLayerTest, TestResize) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_image_data_layer.cpp	/^TYPED_TEST(ImageDataLayerTest, TestShuffle) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_image_data_layer.cpp	/^TYPED_TEST(ImageDataLayerTest, TestSpace) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_infogain_loss_layer.cpp	/^TYPED_TEST(InfogainLossLayerTest, TestGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_inner_product_layer.cpp	/^TYPED_TEST(InnerProductLayerTest, TestBackwardTranspose) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_inner_product_layer.cpp	/^TYPED_TEST(InnerProductLayerTest, TestForward) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_inner_product_layer.cpp	/^TYPED_TEST(InnerProductLayerTest, TestForwardNoBatch) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_inner_product_layer.cpp	/^TYPED_TEST(InnerProductLayerTest, TestForwardTranspose) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_inner_product_layer.cpp	/^TYPED_TEST(InnerProductLayerTest, TestGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_inner_product_layer.cpp	/^TYPED_TEST(InnerProductLayerTest, TestGradientTranspose) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_inner_product_layer.cpp	/^TYPED_TEST(InnerProductLayerTest, TestSetUp) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_inner_product_layer.cpp	/^TYPED_TEST(InnerProductLayerTest, TestSetUpTranposeFalse) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_inner_product_layer.cpp	/^TYPED_TEST(InnerProductLayerTest, TestSetUpTranposeTrue) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_layer_factory.cpp	/^TYPED_TEST(LayerFactoryTest, TestCreateLayer) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_lrn_layer.cpp	/^TYPED_TEST(CuDNNLRNLayerTest, TestForwardAcrossChannelsCuDNN) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_lrn_layer.cpp	/^TYPED_TEST(CuDNNLRNLayerTest, TestForwardAcrossChannelsLargeRegionCuDNN) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_lrn_layer.cpp	/^TYPED_TEST(CuDNNLRNLayerTest, TestForwardWithinChannel) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_lrn_layer.cpp	/^TYPED_TEST(CuDNNLRNLayerTest, TestGradientAcrossChannelsCuDNN) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_lrn_layer.cpp	/^TYPED_TEST(CuDNNLRNLayerTest, TestGradientAcrossChannelsLargeRegionCuDNN) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_lrn_layer.cpp	/^TYPED_TEST(CuDNNLRNLayerTest, TestGradientWithinChannel) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_lrn_layer.cpp	/^TYPED_TEST(LRNLayerTest, TestForwardAcrossChannels) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_lrn_layer.cpp	/^TYPED_TEST(LRNLayerTest, TestForwardAcrossChannelsLargeRegion) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_lrn_layer.cpp	/^TYPED_TEST(LRNLayerTest, TestForwardWithinChannel) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_lrn_layer.cpp	/^TYPED_TEST(LRNLayerTest, TestGradientAcrossChannels) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_lrn_layer.cpp	/^TYPED_TEST(LRNLayerTest, TestGradientAcrossChannelsLargeRegion) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_lrn_layer.cpp	/^TYPED_TEST(LRNLayerTest, TestGradientWithinChannel) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_lrn_layer.cpp	/^TYPED_TEST(LRNLayerTest, TestSetupAcrossChannels) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_lrn_layer.cpp	/^TYPED_TEST(LRNLayerTest, TestSetupWithinChannel) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_lstm_layer.cpp	/^TYPED_TEST(LSTMLayerTest, TestForward) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_lstm_layer.cpp	/^TYPED_TEST(LSTMLayerTest, TestGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_lstm_layer.cpp	/^TYPED_TEST(LSTMLayerTest, TestGradientNonZeroCont) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_lstm_layer.cpp	/^TYPED_TEST(LSTMLayerTest, TestGradientNonZeroContBufferSize2) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_lstm_layer.cpp	/^TYPED_TEST(LSTMLayerTest, TestGradientNonZeroContBufferSize2WithStaticInput) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_lstm_layer.cpp	/^TYPED_TEST(LSTMLayerTest, TestLSTMUnitGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_lstm_layer.cpp	/^TYPED_TEST(LSTMLayerTest, TestLSTMUnitGradientNonZeroCont) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_lstm_layer.cpp	/^TYPED_TEST(LSTMLayerTest, TestLSTMUnitSetUp) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_lstm_layer.cpp	/^TYPED_TEST(LSTMLayerTest, TestSetUp) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_math_functions.cpp	/^TYPED_TEST(CPUMathFunctionsTest, TestAsum) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_math_functions.cpp	/^TYPED_TEST(CPUMathFunctionsTest, TestCopy) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_math_functions.cpp	/^TYPED_TEST(CPUMathFunctionsTest, TestFabs) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_math_functions.cpp	/^TYPED_TEST(CPUMathFunctionsTest, TestNothing) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_math_functions.cpp	/^TYPED_TEST(CPUMathFunctionsTest, TestScale) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_math_functions.cpp	/^TYPED_TEST(CPUMathFunctionsTest, TestSgnbit) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_math_functions.cpp	/^TYPED_TEST(CPUMathFunctionsTest, TestSign) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_math_functions.cpp	/^TYPED_TEST(GPUMathFunctionsTest, TestAsum) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_math_functions.cpp	/^TYPED_TEST(GPUMathFunctionsTest, TestCopy) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_math_functions.cpp	/^TYPED_TEST(GPUMathFunctionsTest, TestFabs) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_math_functions.cpp	/^TYPED_TEST(GPUMathFunctionsTest, TestScale) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_math_functions.cpp	/^TYPED_TEST(GPUMathFunctionsTest, TestSgnbit) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_math_functions.cpp	/^TYPED_TEST(GPUMathFunctionsTest, TestSign) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_maxpool_dropout_layers.cpp	/^TYPED_TEST(MaxPoolingDropoutTest, TestBackward) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_maxpool_dropout_layers.cpp	/^TYPED_TEST(MaxPoolingDropoutTest, TestForward) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_maxpool_dropout_layers.cpp	/^TYPED_TEST(MaxPoolingDropoutTest, TestSetup) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_memory_data_layer.cpp	/^TYPED_TEST(MemoryDataLayerTest, AddDatumVectorDefaultTransform) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_memory_data_layer.cpp	/^TYPED_TEST(MemoryDataLayerTest, AddMatVectorDefaultTransform) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_memory_data_layer.cpp	/^TYPED_TEST(MemoryDataLayerTest, TestForward) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_memory_data_layer.cpp	/^TYPED_TEST(MemoryDataLayerTest, TestSetBatchSize) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_memory_data_layer.cpp	/^TYPED_TEST(MemoryDataLayerTest, TestSetup) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_multinomial_logistic_loss_layer.cpp	/^TYPED_TEST(MultinomialLogisticLossLayerTest, TestGradientCPU) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_mvn_layer.cpp	/^TYPED_TEST(MVNLayerTest, TestForward) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_mvn_layer.cpp	/^TYPED_TEST(MVNLayerTest, TestForwardAcrossChannels) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_mvn_layer.cpp	/^TYPED_TEST(MVNLayerTest, TestForwardMeanOnly) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_mvn_layer.cpp	/^TYPED_TEST(MVNLayerTest, TestGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_mvn_layer.cpp	/^TYPED_TEST(MVNLayerTest, TestGradientAcrossChannels) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_mvn_layer.cpp	/^TYPED_TEST(MVNLayerTest, TestGradientMeanOnly) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestAllInOneNetDeploy) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestAllInOneNetTrain) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestAllInOneNetVal) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestBackwardWithAccuracyLayer) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestBottomNeedBackward) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestBottomNeedBackwardEuclideanForce) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestBottomNeedBackwardForce) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestBottomNeedBackwardTricky) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestComboLossWeight) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestForcePropagateDown) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestFromTo) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestGetBlob) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestGetLayerByName) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestHasBlob) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestHasLayer) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestLossWeight) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestLossWeightMidNet) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestParamPropagateDown) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestReshape) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestSharedWeightsDataNet) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestSharedWeightsDiffNet) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestSharedWeightsResume) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestSharedWeightsUpdate) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestSkipPropagateDown) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestUnsharedWeightsDataNet) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_net.cpp	/^TYPED_TEST(NetTest, TestUnsharedWeightsDiffNet) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(CuDNNNeuronLayerTest, TestReLUCuDNN) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(CuDNNNeuronLayerTest, TestReLUGradientCuDNN) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(CuDNNNeuronLayerTest, TestReLUGradientWithNegativeSlopeCuDNN) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(CuDNNNeuronLayerTest, TestReLUWithNegativeSlopeCuDNN) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(CuDNNNeuronLayerTest, TestSigmoidCuDNN) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(CuDNNNeuronLayerTest, TestSigmoidGradientCuDNN) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(CuDNNNeuronLayerTest, TestTanHCuDNN) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(CuDNNNeuronLayerTest, TestTanHGradientCuDNN) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestAbsGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestAbsVal) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestBNLL) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestBNLLGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestDropoutGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestDropoutGradientTest) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestDropoutHalf) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestDropoutTestPhase) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestDropoutThreeQuarters) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestELU) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestELUGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestELUasReLU) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestELUasReLUGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestExpGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestExpGradientBase2) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestExpGradientBase2Scale3) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestExpGradientBase2Shift1) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestExpGradientBase2Shift1Scale3) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestExpGradientWithShift) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestExpLayer) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestExpLayerBase2) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestExpLayerBase2Scale3) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestExpLayerBase2Shift1) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestExpLayerBase2Shift1Scale3) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestExpLayerWithShift) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestLogGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestLogGradientBase2) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestLogGradientBase2Scale3) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestLogGradientBase2Shift1) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestLogGradientBase2Shift1Scale3) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestLogLayer) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestLogLayerBase2) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestLogLayerBase2Scale3) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestLogLayerBase2Shift1) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestLogLayerBase2Shift1Scale3) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestPReLUConsistencyReLU) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestPReLUForward) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestPReLUForwardChannelShared) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestPReLUGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestPReLUGradientChannelShared) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestPReLUInPlace) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestPReLUParam) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestReLU) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestReLUGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestReLUGradientWithNegativeSlope) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestReLUWithNegativeSlope) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestSigmoid) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestSigmoidGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestTanH) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestTanHGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_pooling_layer.cpp	/^TYPED_TEST(CuDNNPoolingLayerTest, TestForwardAveCuDNN) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_pooling_layer.cpp	/^TYPED_TEST(CuDNNPoolingLayerTest, TestForwardMaxCuDNN) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_pooling_layer.cpp	/^TYPED_TEST(CuDNNPoolingLayerTest, TestForwardMaxPaddedCuDNN) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_pooling_layer.cpp	/^TYPED_TEST(CuDNNPoolingLayerTest, TestGradientAveCuDNN) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_pooling_layer.cpp	/^TYPED_TEST(CuDNNPoolingLayerTest, TestGradientAvePaddedCuDNN) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_pooling_layer.cpp	/^TYPED_TEST(CuDNNPoolingLayerTest, TestGradientMaxCuDNN) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_pooling_layer.cpp	/^TYPED_TEST(CuDNNPoolingLayerTest, TestSetupCuDNN) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_pooling_layer.cpp	/^TYPED_TEST(CuDNNPoolingLayerTest, TestSetupPaddedCuDNN) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_pooling_layer.cpp	/^TYPED_TEST(PoolingLayerTest, TestForwardAve) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_pooling_layer.cpp	/^TYPED_TEST(PoolingLayerTest, TestForwardMax) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_pooling_layer.cpp	/^TYPED_TEST(PoolingLayerTest, TestForwardMaxPadded) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_pooling_layer.cpp	/^TYPED_TEST(PoolingLayerTest, TestForwardMaxTopMask) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_pooling_layer.cpp	/^TYPED_TEST(PoolingLayerTest, TestGradientAve) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_pooling_layer.cpp	/^TYPED_TEST(PoolingLayerTest, TestGradientAvePadded) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_pooling_layer.cpp	/^TYPED_TEST(PoolingLayerTest, TestGradientMax) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_pooling_layer.cpp	/^TYPED_TEST(PoolingLayerTest, TestGradientMaxTopMask) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_pooling_layer.cpp	/^TYPED_TEST(PoolingLayerTest, TestSetup) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_pooling_layer.cpp	/^TYPED_TEST(PoolingLayerTest, TestSetupGlobalPooling) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_pooling_layer.cpp	/^TYPED_TEST(PoolingLayerTest, TestSetupPadded) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_power_layer.cpp	/^TYPED_TEST(PowerLayerTest, TestPower) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_power_layer.cpp	/^TYPED_TEST(PowerLayerTest, TestPowerGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_power_layer.cpp	/^TYPED_TEST(PowerLayerTest, TestPowerGradientShiftZero) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_power_layer.cpp	/^TYPED_TEST(PowerLayerTest, TestPowerOne) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_power_layer.cpp	/^TYPED_TEST(PowerLayerTest, TestPowerOneGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_power_layer.cpp	/^TYPED_TEST(PowerLayerTest, TestPowerTwo) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_power_layer.cpp	/^TYPED_TEST(PowerLayerTest, TestPowerTwoGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_power_layer.cpp	/^TYPED_TEST(PowerLayerTest, TestPowerTwoScaleHalfGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_power_layer.cpp	/^TYPED_TEST(PowerLayerTest, TestPowerZero) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_power_layer.cpp	/^TYPED_TEST(PowerLayerTest, TestPowerZeroGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngBernoulli) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngBernoulli2) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngBernoulliTimesBernoulli) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngGaussian) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngGaussian2) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngGaussian2GPU) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngGaussianGPU) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngGaussianTimesBernoulli) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngGaussianTimesGaussian) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngGaussianTimesGaussianGPU) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngUniform) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngUniform2) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngUniform2GPU) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngUniformGPU) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngUniformIntGPU) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngUniformTimesBernoulli) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngUniformTimesUniform) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngUniformTimesUniformGPU) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestAbsSum) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestAbsSumCoeff) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestAbsSumCoeffAxis1) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestAbsSumCoeffAxis1Gradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestAbsSumCoeffGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestAbsSumGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestMean) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestMeanCoeff) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestMeanCoeffAxis1) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestMeanCoeffGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestMeanCoeffGradientAxis1) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestMeanGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSetUp) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSetUpWithAxis1) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSetUpWithAxis2) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSum) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSumCoeff) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSumCoeffAxis1) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSumCoeffAxis1Gradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSumCoeffGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSumGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSumOfSquares) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSumOfSquaresCoeff) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSumOfSquaresCoeffAxis1) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSumOfSquaresCoeffAxis1Gradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSumOfSquaresCoeffGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSumOfSquaresGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_reshape_layer.cpp	/^TYPED_TEST(ReshapeLayerTest, TestCopyDimensions) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_reshape_layer.cpp	/^TYPED_TEST(ReshapeLayerTest, TestFlattenMiddle) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_reshape_layer.cpp	/^TYPED_TEST(ReshapeLayerTest, TestFlattenOutputSizes) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_reshape_layer.cpp	/^TYPED_TEST(ReshapeLayerTest, TestFlattenValues) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_reshape_layer.cpp	/^TYPED_TEST(ReshapeLayerTest, TestForward) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_reshape_layer.cpp	/^TYPED_TEST(ReshapeLayerTest, TestForwardAfterReshape) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_reshape_layer.cpp	/^TYPED_TEST(ReshapeLayerTest, TestGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_reshape_layer.cpp	/^TYPED_TEST(ReshapeLayerTest, TestInferenceOfUnspecified) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_reshape_layer.cpp	/^TYPED_TEST(ReshapeLayerTest, TestInferenceOfUnspecifiedWithStartAxis) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_reshape_layer.cpp	/^TYPED_TEST(ReshapeLayerTest, TestInsertSingletonAxesEnd) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_reshape_layer.cpp	/^TYPED_TEST(ReshapeLayerTest, TestInsertSingletonAxesMiddle) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_reshape_layer.cpp	/^TYPED_TEST(ReshapeLayerTest, TestInsertSingletonAxesStart) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_rnn_layer.cpp	/^TYPED_TEST(RNNLayerTest, TestForward) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_rnn_layer.cpp	/^TYPED_TEST(RNNLayerTest, TestGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_rnn_layer.cpp	/^TYPED_TEST(RNNLayerTest, TestGradientNonZeroCont) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_rnn_layer.cpp	/^TYPED_TEST(RNNLayerTest, TestGradientNonZeroContBufferSize2) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_rnn_layer.cpp	/^TYPED_TEST(RNNLayerTest, TestGradientNonZeroContBufferSize2WithStaticInput) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_rnn_layer.cpp	/^TYPED_TEST(RNNLayerTest, TestSetUp) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_scale_layer.cpp	/^TYPED_TEST(ScaleLayerTest, TestBackwardBroadcastMiddleInPlace) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_scale_layer.cpp	/^TYPED_TEST(ScaleLayerTest, TestBackwardEltwiseInPlace) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_scale_layer.cpp	/^TYPED_TEST(ScaleLayerTest, TestForwardBroadcastBegin) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_scale_layer.cpp	/^TYPED_TEST(ScaleLayerTest, TestForwardBroadcastEnd) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_scale_layer.cpp	/^TYPED_TEST(ScaleLayerTest, TestForwardBroadcastMiddle) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_scale_layer.cpp	/^TYPED_TEST(ScaleLayerTest, TestForwardBroadcastMiddleInPlace) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_scale_layer.cpp	/^TYPED_TEST(ScaleLayerTest, TestForwardBroadcastMiddleWithParam) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_scale_layer.cpp	/^TYPED_TEST(ScaleLayerTest, TestForwardBroadcastMiddleWithParamAndBias) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_scale_layer.cpp	/^TYPED_TEST(ScaleLayerTest, TestForwardEltwise) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_scale_layer.cpp	/^TYPED_TEST(ScaleLayerTest, TestForwardEltwiseInPlace) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_scale_layer.cpp	/^TYPED_TEST(ScaleLayerTest, TestForwardEltwiseWithParam) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_scale_layer.cpp	/^TYPED_TEST(ScaleLayerTest, TestForwardScale) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_scale_layer.cpp	/^TYPED_TEST(ScaleLayerTest, TestForwardScaleAxis2) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_scale_layer.cpp	/^TYPED_TEST(ScaleLayerTest, TestGradientBroadcastBegin) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_scale_layer.cpp	/^TYPED_TEST(ScaleLayerTest, TestGradientBroadcastEnd) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_scale_layer.cpp	/^TYPED_TEST(ScaleLayerTest, TestGradientBroadcastMiddle) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_scale_layer.cpp	/^TYPED_TEST(ScaleLayerTest, TestGradientBroadcastMiddleWithParam) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_scale_layer.cpp	/^TYPED_TEST(ScaleLayerTest, TestGradientEltwise) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_scale_layer.cpp	/^TYPED_TEST(ScaleLayerTest, TestGradientEltwiseWithParam) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_scale_layer.cpp	/^TYPED_TEST(ScaleLayerTest, TestGradientScale) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_scale_layer.cpp	/^TYPED_TEST(ScaleLayerTest, TestGradientScaleAndBias) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_scale_layer.cpp	/^TYPED_TEST(ScaleLayerTest, TestGradientScaleAxis2) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_sigmoid_cross_entropy_loss_layer.cpp	/^TYPED_TEST(SigmoidCrossEntropyLossLayerTest, TestGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_sigmoid_cross_entropy_loss_layer.cpp	/^TYPED_TEST(SigmoidCrossEntropyLossLayerTest, TestSigmoidCrossEntropyLoss) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_slice_layer.cpp	/^TYPED_TEST(SliceLayerTest, TestGradientAcrossChannels) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_slice_layer.cpp	/^TYPED_TEST(SliceLayerTest, TestGradientAcrossNum) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_slice_layer.cpp	/^TYPED_TEST(SliceLayerTest, TestGradientTrivial) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_slice_layer.cpp	/^TYPED_TEST(SliceLayerTest, TestSetupChannels) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_slice_layer.cpp	/^TYPED_TEST(SliceLayerTest, TestSetupNum) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_slice_layer.cpp	/^TYPED_TEST(SliceLayerTest, TestSliceAcrossChannels) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_slice_layer.cpp	/^TYPED_TEST(SliceLayerTest, TestSliceAcrossNum) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_slice_layer.cpp	/^TYPED_TEST(SliceLayerTest, TestTrivialSlice) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_softmax_layer.cpp	/^TYPED_TEST(CuDNNSoftmaxLayerTest, TestForwardCuDNN) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_softmax_layer.cpp	/^TYPED_TEST(CuDNNSoftmaxLayerTest, TestGradientCuDNN) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_softmax_layer.cpp	/^TYPED_TEST(SoftmaxLayerTest, TestForward) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_softmax_layer.cpp	/^TYPED_TEST(SoftmaxLayerTest, TestGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_softmax_with_loss_layer.cpp	/^TYPED_TEST(SoftmaxWithLossLayerTest, TestForwardIgnoreLabel) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_softmax_with_loss_layer.cpp	/^TYPED_TEST(SoftmaxWithLossLayerTest, TestGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_softmax_with_loss_layer.cpp	/^TYPED_TEST(SoftmaxWithLossLayerTest, TestGradientIgnoreLabel) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_softmax_with_loss_layer.cpp	/^TYPED_TEST(SoftmaxWithLossLayerTest, TestGradientUnnormalized) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_solver.cpp	/^TYPED_TEST(SolverTest, TestInitTrainTestNets) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_solver_factory.cpp	/^TYPED_TEST(SolverFactoryTest, TestCreateSolver) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_split_layer.cpp	/^TYPED_TEST(SplitLayerTest, Test) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_split_layer.cpp	/^TYPED_TEST(SplitLayerTest, TestGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_split_layer.cpp	/^TYPED_TEST(SplitLayerTest, TestSetup) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_spp_layer.cpp	/^TYPED_TEST(SPPLayerTest, TestEqualOutputDims) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_spp_layer.cpp	/^TYPED_TEST(SPPLayerTest, TestEqualOutputDims2) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_spp_layer.cpp	/^TYPED_TEST(SPPLayerTest, TestForwardBackward) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_spp_layer.cpp	/^TYPED_TEST(SPPLayerTest, TestGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_spp_layer.cpp	/^TYPED_TEST(SPPLayerTest, TestSetup) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_stochastic_pooling.cpp	/^TYPED_TEST(CPUStochasticPoolingLayerTest, TestSetup) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_stochastic_pooling.cpp	/^TYPED_TEST(GPUStochasticPoolingLayerTest, TestGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_stochastic_pooling.cpp	/^TYPED_TEST(GPUStochasticPoolingLayerTest, TestStochastic) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_stochastic_pooling.cpp	/^TYPED_TEST(GPUStochasticPoolingLayerTest, TestStochasticTestPhase) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_tanh_layer.cpp	/^TYPED_TEST(TanHLayerTest, TestTanH) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_tanh_layer.cpp	/^TYPED_TEST(TanHLayerTest, TestTanHGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_tanh_layer.cpp	/^TYPED_TEST(TanHLayerTest, TestTanHOverflow) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_threshold_layer.cpp	/^TYPED_TEST(ThresholdLayerTest, Test) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_threshold_layer.cpp	/^TYPED_TEST(ThresholdLayerTest, Test2) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_threshold_layer.cpp	/^TYPED_TEST(ThresholdLayerTest, TestSetup) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_tile_layer.cpp	/^TYPED_TEST(TileLayerTest, TestForwardChannels) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_tile_layer.cpp	/^TYPED_TEST(TileLayerTest, TestForwardNum) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_tile_layer.cpp	/^TYPED_TEST(TileLayerTest, TestGradientChannels) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_tile_layer.cpp	/^TYPED_TEST(TileLayerTest, TestGradientNum) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_tile_layer.cpp	/^TYPED_TEST(TileLayerTest, TestSetup) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_tile_layer.cpp	/^TYPED_TEST(TileLayerTest, TestTrivialGradient) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_tile_layer.cpp	/^TYPED_TEST(TileLayerTest, TestTrivialSetup) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_util_blas.cpp	/^TYPED_TEST(GemmTest, TestGemmCPUGPU) {$/;"	f	namespace:caffe
TYPED_TEST	test/test_util_blas.cpp	/^TYPED_TEST(GemmTest, TestGemvCPUGPU) {$/;"	f	namespace:caffe
TanHLayerTest	test/test_tanh_layer.cpp	/^  TanHLayerTest()$/;"	f	class:caffe::TanHLayerTest
TanHLayerTest	test/test_tanh_layer.cpp	/^class TanHLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
Test	solver.cpp	/^void Solver<Dtype>::Test(const int test_net_id) {$/;"	f	class:caffe::Solver
TestAll	solver.cpp	/^void Solver<Dtype>::TestAll() {$/;"	f	class:caffe::Solver
TestBackward	test/test_power_layer.cpp	/^  void TestBackward(Dtype power, Dtype scale, Dtype shift) {$/;"	f	class:caffe::PowerLayerTest
TestBackward	test/test_tanh_layer.cpp	/^  void TestBackward(Dtype filler_std) {$/;"	f	class:caffe::TanHLayerTest
TestDropoutForward	test/test_neuron_layer.cpp	/^  void TestDropoutForward(const float dropout_ratio) {$/;"	f	class:caffe::NeuronLayerTest
TestExpForward	test/test_neuron_layer.cpp	/^  void TestExpForward(const float base, const float scale, const float shift) {$/;"	f	class:caffe::NeuronLayerTest
TestExpGradient	test/test_neuron_layer.cpp	/^  void TestExpGradient(const float base, const float scale, const float shift) {$/;"	f	class:caffe::NeuronLayerTest
TestForward	test/test_batch_reindex_layer.cpp	/^  void TestForward() {$/;"	f	class:caffe::BatchReindexLayerTest
TestForward	test/test_euclidean_loss_layer.cpp	/^  void TestForward() {$/;"	f	class:caffe::EuclideanLossLayerTest
TestForward	test/test_power_layer.cpp	/^  void TestForward(Dtype power, Dtype scale, Dtype shift) {$/;"	f	class:caffe::PowerLayerTest
TestForward	test/test_reduction_layer.cpp	/^  void TestForward(ReductionParameter_ReductionOp op,$/;"	f	class:caffe::ReductionLayerTest
TestForward	test/test_sigmoid_cross_entropy_loss_layer.cpp	/^  void TestForward() {$/;"	f	class:caffe::SigmoidCrossEntropyLossLayerTest
TestForward	test/test_tanh_layer.cpp	/^  void TestForward(Dtype filler_std) {$/;"	f	class:caffe::TanHLayerTest
TestForwardRectHigh	test/test_pooling_layer.cpp	/^  void TestForwardRectHigh() {$/;"	f	class:caffe::CuDNNPoolingLayerTest
TestForwardRectHigh	test/test_pooling_layer.cpp	/^  void TestForwardRectHigh() {$/;"	f	class:caffe::PoolingLayerTest
TestForwardRectWide	test/test_pooling_layer.cpp	/^  void TestForwardRectWide() {$/;"	f	class:caffe::CuDNNPoolingLayerTest
TestForwardRectWide	test/test_pooling_layer.cpp	/^  void TestForwardRectWide() {$/;"	f	class:caffe::PoolingLayerTest
TestForwardSquare	test/test_pooling_layer.cpp	/^  void TestForwardSquare() {$/;"	f	class:caffe::CuDNNPoolingLayerTest
TestForwardSquare	test/test_pooling_layer.cpp	/^  void TestForwardSquare() {$/;"	f	class:caffe::PoolingLayerTest
TestGradient	test/test_reduction_layer.cpp	/^  void TestGradient(ReductionParameter_ReductionOp op,$/;"	f	class:caffe::ReductionLayerTest
TestLeastSquaresUpdate	test/test_gradient_based_solver.cpp	/^  void TestLeastSquaresUpdate(const Dtype learning_rate = 1.0,$/;"	f	class:caffe::GradientBasedSolverTest
TestLogForward	test/test_neuron_layer.cpp	/^  void TestLogForward(const float base, const float scale, const float shift) {$/;"	f	class:caffe::NeuronLayerTest
TestLogGradient	test/test_neuron_layer.cpp	/^  void TestLogGradient(const float base, const float scale, const float shift) {$/;"	f	class:caffe::NeuronLayerTest
TestPReLU	test/test_neuron_layer.cpp	/^  void TestPReLU(PReLULayer<Dtype> *layer) {$/;"	f	class:caffe::NeuronLayerTest
TestRead	test/test_data_layer.cpp	/^  void TestRead() {$/;"	f	class:caffe::DataLayerTest
TestReadCrop	test/test_data_layer.cpp	/^  void TestReadCrop(Phase phase) {$/;"	f	class:caffe::DataLayerTest
TestReadCropTrainSequenceSeeded	test/test_data_layer.cpp	/^  void TestReadCropTrainSequenceSeeded() {$/;"	f	class:caffe::DataLayerTest
TestReadCropTrainSequenceUnseeded	test/test_data_layer.cpp	/^  void TestReadCropTrainSequenceUnseeded() {$/;"	f	class:caffe::DataLayerTest
TestReshape	test/test_data_layer.cpp	/^  void TestReshape(DataParameter_DB backend) {$/;"	f	class:caffe::DataLayerTest
TestSnapshot	test/test_gradient_based_solver.cpp	/^  void TestSnapshot(const Dtype learning_rate = 1.0,$/;"	f	class:caffe::GradientBasedSolverTest
TestThreadA	test/test_internal_thread.cpp	/^class TestThreadA : public InternalThread {$/;"	c	namespace:caffe	file:
TestThreadB	test/test_internal_thread.cpp	/^class TestThreadB : public InternalThread {$/;"	c	namespace:caffe	file:
TestTypes	test/test_db.cpp	/^typedef ::testing::Types<TypeLevelDB, TypeLMDB> TestTypes;$/;"	t	namespace:caffe	file:
ThresholdLayerTest	test/test_threshold_layer.cpp	/^  ThresholdLayerTest()$/;"	f	class:caffe::ThresholdLayerTest
ThresholdLayerTest	test/test_threshold_layer.cpp	/^class ThresholdLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
TileLayerTest	test/test_tile_layer.cpp	/^  TileLayerTest()$/;"	f	class:caffe::TileLayerTest
TileLayerTest	test/test_tile_layer.cpp	/^class TileLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
Timer	util/benchmark.cpp	/^Timer::Timer()$/;"	f	class:caffe::Timer
ToHDF5	net.cpp	/^void Net<Dtype>::ToHDF5(const string& filename, bool write_diff) const {$/;"	f	class:caffe::Net
ToProto	blob.cpp	/^void Blob<double>::ToProto(BlobProto* proto, bool write_diff) const {$/;"	f	class:caffe::Blob
ToProto	blob.cpp	/^void Blob<float>::ToProto(BlobProto* proto, bool write_diff) const {$/;"	f	class:caffe::Blob
ToProto	net.cpp	/^void Net<Dtype>::ToProto(NetParameter* param, bool write_diff) const {$/;"	f	class:caffe::Net
Transform	data_transformer.cpp	/^void DataTransformer<Dtype>::Transform(Blob<Dtype>* input_blob,$/;"	f	class:caffe::DataTransformer
Transform	data_transformer.cpp	/^void DataTransformer<Dtype>::Transform(const Datum& datum,$/;"	f	class:caffe::DataTransformer
Transform	data_transformer.cpp	/^void DataTransformer<Dtype>::Transform(const cv::Mat& cv_img,$/;"	f	class:caffe::DataTransformer
Transform	data_transformer.cpp	/^void DataTransformer<Dtype>::Transform(const vector<Datum> & datum_vector,$/;"	f	class:caffe::DataTransformer
Transform	data_transformer.cpp	/^void DataTransformer<Dtype>::Transform(const vector<cv::Mat> & mat_vector,$/;"	f	class:caffe::DataTransformer
TypeLMDB	test/test_db.cpp	/^struct TypeLMDB {$/;"	s	namespace:caffe	file:
TypeLevelDB	test/test_db.cpp	/^struct TypeLevelDB {$/;"	s	namespace:caffe	file:
UnhookHandler	util/signal_handler.cpp	/^  void UnhookHandler() {$/;"	f	namespace:__anon1
UniformFillerTest	test/test_filler.cpp	/^  UniformFillerTest()$/;"	f	class:caffe::UniformFillerTest
UniformFillerTest	test/test_filler.cpp	/^class UniformFillerTest : public ::testing::Test {$/;"	c	namespace:caffe	file:
Unlock	layer.cpp	/^void Layer<Dtype>::Unlock() {$/;"	f	class:caffe::Layer
Update	blob.cpp	/^template <> void Blob<int>::Update() { NOT_IMPLEMENTED; }$/;"	f	class:caffe::Blob
Update	blob.cpp	/^template <> void Blob<unsigned int>::Update() { NOT_IMPLEMENTED; }$/;"	f	class:caffe::Blob
Update	blob.cpp	/^void Blob<Dtype>::Update() {$/;"	f	class:caffe::Blob
Update	net.cpp	/^void Net<Dtype>::Update() {$/;"	f	class:caffe::Net
UpdateDebugInfo	net.cpp	/^void Net<Dtype>::UpdateDebugInfo(const int param_id) {$/;"	f	class:caffe::Net
UpdateSmoothedLoss	solver.cpp	/^void Solver<Dtype>::UpdateSmoothedLoss(Dtype loss, int start_iter,$/;"	f	class:caffe::Solver
UpgradeNetAsNeeded	util/upgrade_proto.cpp	/^bool UpgradeNetAsNeeded(const string& param_file, NetParameter* param) {$/;"	f	namespace:caffe
UpgradeNetBatchNorm	util/upgrade_proto.cpp	/^void UpgradeNetBatchNorm(NetParameter* net_param) {$/;"	f	namespace:caffe
UpgradeNetDataTransformation	util/upgrade_proto.cpp	/^void UpgradeNetDataTransformation(NetParameter* net_param) {$/;"	f	namespace:caffe
UpgradeNetInput	util/upgrade_proto.cpp	/^void UpgradeNetInput(NetParameter* net_param) {$/;"	f	namespace:caffe
UpgradeSolverAsNeeded	util/upgrade_proto.cpp	/^bool UpgradeSolverAsNeeded(const string& param_file, SolverParameter* param) {$/;"	f	namespace:caffe
UpgradeSolverType	util/upgrade_proto.cpp	/^bool UpgradeSolverType(SolverParameter* solver_param) {$/;"	f	namespace:caffe
UpgradeV0LayerParameter	util/upgrade_proto.cpp	/^bool UpgradeV0LayerParameter(const V1LayerParameter& v0_layer_connection,$/;"	f	namespace:caffe
UpgradeV0LayerType	util/upgrade_proto.cpp	/^V1LayerParameter_LayerType UpgradeV0LayerType(const string& type) {$/;"	f	namespace:caffe
UpgradeV0Net	util/upgrade_proto.cpp	/^bool UpgradeV0Net(const NetParameter& v0_net_param_padding_layers,$/;"	f	namespace:caffe
UpgradeV0PaddingLayers	util/upgrade_proto.cpp	/^void UpgradeV0PaddingLayers(const NetParameter& param,$/;"	f	namespace:caffe
UpgradeV1LayerParameter	util/upgrade_proto.cpp	/^bool UpgradeV1LayerParameter(const V1LayerParameter& v1_layer_param,$/;"	f	namespace:caffe
UpgradeV1LayerType	util/upgrade_proto.cpp	/^const char* UpgradeV1LayerType(const V1LayerParameter_LayerType type) {$/;"	f	namespace:caffe
UpgradeV1Net	util/upgrade_proto.cpp	/^bool UpgradeV1Net(const NetParameter& v1_net_param, NetParameter* net_param) {$/;"	f	namespace:caffe
WithinChannelBackward	layers/lrn_layer.cpp	/^void LRNLayer<Dtype>::WithinChannelBackward($/;"	f	class:caffe::LRNLayer
WithinChannelForward	layers/lrn_layer.cpp	/^void LRNLayer<Dtype>::WithinChannelForward($/;"	f	class:caffe::LRNLayer
WriteProtoToBinaryFile	util/io.cpp	/^void WriteProtoToBinaryFile(const Message& proto, const char* filename) {$/;"	f	namespace:caffe
WriteProtoToTextFile	util/io.cpp	/^void WriteProtoToTextFile(const Message& proto, const char* filename) {$/;"	f	namespace:caffe
XavierFillerTest	test/test_filler.cpp	/^  XavierFillerTest()$/;"	f	class:caffe::XavierFillerTest
XavierFillerTest	test/test_filler.cpp	/^class XavierFillerTest : public ::testing::Test {$/;"	c	namespace:caffe	file:
already_hooked_up	util/signal_handler.cpp	/^  static bool already_hooked_up = false;$/;"	m	namespace:__anon1	file:
apply_buffers	parallel.cpp	/^static void apply_buffers(const vector<Blob<Dtype>*>& blobs,$/;"	f	namespace:caffe
asum_data	blob.cpp	/^Dtype Blob<Dtype>::asum_data() const {$/;"	f	class:caffe::Blob
asum_data	blob.cpp	/^template <> int Blob<int>::asum_data() const {$/;"	f	class:caffe::Blob
asum_data	blob.cpp	/^template <> unsigned int Blob<unsigned int>::asum_data() const {$/;"	f	class:caffe::Blob
asum_diff	blob.cpp	/^Dtype Blob<Dtype>::asum_diff() const {$/;"	f	class:caffe::Blob
asum_diff	blob.cpp	/^template <> int Blob<int>::asum_diff() const {$/;"	f	class:caffe::Blob
asum_diff	blob.cpp	/^template <> unsigned int Blob<unsigned int>::asum_diff() const {$/;"	f	class:caffe::Blob
async_gpu_push	syncedmem.cpp	/^void SyncedMemory::async_gpu_push(const cudaStream_t& stream) {$/;"	f	class:caffe::SyncedMemory
backend	test/test_db.cpp	/^  static DataParameter_DB backend;$/;"	m	struct:caffe::TypeLMDB	file:
backend	test/test_db.cpp	/^  static DataParameter_DB backend;$/;"	m	struct:caffe::TypeLevelDB	file:
backend	test/test_db.cpp	/^DataParameter_DB TypeLMDB::backend = DataParameter_DB_LMDB;$/;"	m	class:caffe::TypeLMDB	file:
backend	test/test_db.cpp	/^DataParameter_DB TypeLevelDB::backend = DataParameter_DB_LEVELDB;$/;"	m	class:caffe::TypeLevelDB	file:
backend_	test/test_data_layer.cpp	/^  DataParameter_DB backend_;$/;"	m	class:caffe::DataLayerTest	file:
backend_	test/test_db.cpp	/^  DataParameter_DB backend_;$/;"	m	class:caffe::DBTest	file:
backward_cpu_bias	layers/base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::backward_cpu_bias(Dtype* bias,$/;"	f	class:caffe::BaseConvolutionLayer
backward_cpu_gemm	layers/base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::backward_cpu_gemm(const Dtype* output,$/;"	f	class:caffe::BaseConvolutionLayer
backward_gpu_bias	layers/base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::backward_gpu_bias(Dtype* bias,$/;"	f	class:caffe::BaseConvolutionLayer
backward_gpu_gemm	layers/base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::backward_gpu_gemm(const Dtype* output,$/;"	f	class:caffe::BaseConvolutionLayer
batch_size_	test/test_memory_data_layer.cpp	/^  int batch_size_;$/;"	m	class:caffe::MemoryDataLayerTest	file:
batches_	test/test_memory_data_layer.cpp	/^  int batches_;$/;"	m	class:caffe::MemoryDataLayerTest	file:
blob_	test/test_blob.cpp	/^  Blob<Dtype>* const blob_;$/;"	m	class:caffe::BlobMathTest	file:
blob_	test/test_blob.cpp	/^  Blob<Dtype>* const blob_;$/;"	m	class:caffe::BlobSimpleTest	file:
blob_	test/test_filler.cpp	/^  Blob<Dtype>* const blob_;$/;"	m	class:caffe::ConstantFillerTest	file:
blob_	test/test_filler.cpp	/^  Blob<Dtype>* const blob_;$/;"	m	class:caffe::GaussianFillerTest	file:
blob_	test/test_filler.cpp	/^  Blob<Dtype>* const blob_;$/;"	m	class:caffe::MSRAFillerTest	file:
blob_	test/test_filler.cpp	/^  Blob<Dtype>* const blob_;$/;"	m	class:caffe::PositiveUnitballFillerTest	file:
blob_	test/test_filler.cpp	/^  Blob<Dtype>* const blob_;$/;"	m	class:caffe::UniformFillerTest	file:
blob_	test/test_filler.cpp	/^  Blob<Dtype>* const blob_;$/;"	m	class:caffe::XavierFillerTest	file:
blob_bottom_	test/test_argmax_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::ArgMaxLayerTest	file:
blob_bottom_	test/test_batch_norm_layer.cpp	/^    Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::BatchNormLayerTest	file:
blob_bottom_	test/test_batch_reindex_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::BatchReindexLayerTest	file:
blob_bottom_	test/test_bias_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::BiasLayerTest	file:
blob_bottom_	test/test_convolution_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::ConvolutionLayerTest	file:
blob_bottom_	test/test_convolution_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::CuDNNConvolutionLayerTest	file:
blob_bottom_	test/test_deconvolution_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::DeconvolutionLayerTest	file:
blob_bottom_	test/test_embed_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::EmbedLayerTest	file:
blob_bottom_	test/test_flatten_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::FlattenLayerTest	file:
blob_bottom_	test/test_im2col_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::Im2colLayerTest	file:
blob_bottom_	test/test_inner_product_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::InnerProductLayerTest	file:
blob_bottom_	test/test_lrn_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::CuDNNLRNLayerTest	file:
blob_bottom_	test/test_lrn_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::LRNLayerTest	file:
blob_bottom_	test/test_lstm_layer.cpp	/^  Blob<Dtype> blob_bottom_;$/;"	m	class:caffe::LSTMLayerTest	file:
blob_bottom_	test/test_math_functions.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::MathFunctionsTest	file:
blob_bottom_	test/test_maxpool_dropout_layers.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::MaxPoolingDropoutTest	file:
blob_bottom_	test/test_mvn_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::MVNLayerTest	file:
blob_bottom_	test/test_neuron_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::CuDNNNeuronLayerTest	file:
blob_bottom_	test/test_neuron_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::NeuronLayerTest	file:
blob_bottom_	test/test_pooling_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::CuDNNPoolingLayerTest	file:
blob_bottom_	test/test_pooling_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::PoolingLayerTest	file:
blob_bottom_	test/test_power_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::PowerLayerTest	file:
blob_bottom_	test/test_reduction_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::ReductionLayerTest	file:
blob_bottom_	test/test_reshape_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::ReshapeLayerTest	file:
blob_bottom_	test/test_rnn_layer.cpp	/^  Blob<Dtype> blob_bottom_;$/;"	m	class:caffe::RNNLayerTest	file:
blob_bottom_	test/test_scale_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::ScaleLayerTest	file:
blob_bottom_	test/test_slice_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::SliceLayerTest	file:
blob_bottom_	test/test_softmax_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::CuDNNSoftmaxLayerTest	file:
blob_bottom_	test/test_softmax_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::SoftmaxLayerTest	file:
blob_bottom_	test/test_split_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::SplitLayerTest	file:
blob_bottom_	test/test_spp_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::SPPLayerTest	file:
blob_bottom_	test/test_stochastic_pooling.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::StochasticPoolingLayerTest	file:
blob_bottom_	test/test_tanh_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::TanHLayerTest	file:
blob_bottom_	test/test_threshold_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::ThresholdLayerTest	file:
blob_bottom_	test/test_tile_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::TileLayerTest	file:
blob_bottom_0_	test/test_concat_layer.cpp	/^  Blob<Dtype>* const blob_bottom_0_;$/;"	m	class:caffe::ConcatLayerTest	file:
blob_bottom_0_	test/test_crop_layer.cpp	/^  Blob<Dtype>* const blob_bottom_0_;$/;"	m	class:caffe::CropLayerTest	file:
blob_bottom_1_	test/test_concat_layer.cpp	/^  Blob<Dtype>* const blob_bottom_1_;$/;"	m	class:caffe::ConcatLayerTest	file:
blob_bottom_1_	test/test_crop_layer.cpp	/^  Blob<Dtype>* const blob_bottom_1_;$/;"	m	class:caffe::CropLayerTest	file:
blob_bottom_2_	test/test_concat_layer.cpp	/^  Blob<Dtype>* const blob_bottom_2_;$/;"	m	class:caffe::ConcatLayerTest	file:
blob_bottom_2_	test/test_convolution_layer.cpp	/^  Blob<Dtype>* const blob_bottom_2_;$/;"	m	class:caffe::ConvolutionLayerTest	file:
blob_bottom_2_	test/test_convolution_layer.cpp	/^  Blob<Dtype>* const blob_bottom_2_;$/;"	m	class:caffe::CuDNNConvolutionLayerTest	file:
blob_bottom_2_	test/test_deconvolution_layer.cpp	/^  Blob<Dtype>* const blob_bottom_2_;$/;"	m	class:caffe::DeconvolutionLayerTest	file:
blob_bottom_2_	test/test_spp_layer.cpp	/^  Blob<Dtype>* const blob_bottom_2_;$/;"	m	class:caffe::SPPLayerTest	file:
blob_bottom_3_	test/test_spp_layer.cpp	/^  Blob<Dtype>* const blob_bottom_3_;$/;"	m	class:caffe::SPPLayerTest	file:
blob_bottom_a_	test/test_eltwise_layer.cpp	/^  Blob<Dtype>* const blob_bottom_a_;$/;"	m	class:caffe::EltwiseLayerTest	file:
blob_bottom_b_	test/test_eltwise_layer.cpp	/^  Blob<Dtype>* const blob_bottom_b_;$/;"	m	class:caffe::EltwiseLayerTest	file:
blob_bottom_bias_	test/test_bias_layer.cpp	/^  Blob<Dtype>* const blob_bottom_bias_;$/;"	m	class:caffe::BiasLayerTest	file:
blob_bottom_broadcast_0_	test/test_bias_layer.cpp	/^  Blob<Dtype>* const blob_bottom_broadcast_0_;$/;"	m	class:caffe::BiasLayerTest	file:
blob_bottom_broadcast_0_	test/test_scale_layer.cpp	/^  Blob<Dtype>* const blob_bottom_broadcast_0_;$/;"	m	class:caffe::ScaleLayerTest	file:
blob_bottom_broadcast_1_	test/test_bias_layer.cpp	/^  Blob<Dtype>* const blob_bottom_broadcast_1_;$/;"	m	class:caffe::BiasLayerTest	file:
blob_bottom_broadcast_1_	test/test_scale_layer.cpp	/^  Blob<Dtype>* const blob_bottom_broadcast_1_;$/;"	m	class:caffe::ScaleLayerTest	file:
blob_bottom_broadcast_2_	test/test_bias_layer.cpp	/^  Blob<Dtype>* const blob_bottom_broadcast_2_;$/;"	m	class:caffe::BiasLayerTest	file:
blob_bottom_broadcast_2_	test/test_scale_layer.cpp	/^  Blob<Dtype>* const blob_bottom_broadcast_2_;$/;"	m	class:caffe::ScaleLayerTest	file:
blob_bottom_c_	test/test_eltwise_layer.cpp	/^  Blob<Dtype>* const blob_bottom_c_;$/;"	m	class:caffe::EltwiseLayerTest	file:
blob_bottom_cont_	test/test_lstm_layer.cpp	/^  Blob<Dtype> blob_bottom_cont_;$/;"	m	class:caffe::LSTMLayerTest	file:
blob_bottom_cont_	test/test_rnn_layer.cpp	/^  Blob<Dtype> blob_bottom_cont_;$/;"	m	class:caffe::RNNLayerTest	file:
blob_bottom_data_	test/test_accuracy_layer.cpp	/^  Blob<Dtype>* const blob_bottom_data_;$/;"	m	class:caffe::AccuracyLayerTest	file:
blob_bottom_data_	test/test_euclidean_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_data_;$/;"	m	class:caffe::EuclideanLossLayerTest	file:
blob_bottom_data_	test/test_filter_layer.cpp	/^  Blob<Dtype>* const blob_bottom_data_;$/;"	m	class:caffe::FilterLayerTest	file:
blob_bottom_data_	test/test_hinge_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_data_;$/;"	m	class:caffe::HingeLossLayerTest	file:
blob_bottom_data_	test/test_infogain_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_data_;$/;"	m	class:caffe::InfogainLossLayerTest	file:
blob_bottom_data_	test/test_multinomial_logistic_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_data_;$/;"	m	class:caffe::MultinomialLogisticLossLayerTest	file:
blob_bottom_data_	test/test_sigmoid_cross_entropy_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_data_;$/;"	m	class:caffe::SigmoidCrossEntropyLossLayerTest	file:
blob_bottom_data_	test/test_softmax_with_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_data_;$/;"	m	class:caffe::SoftmaxWithLossLayerTest	file:
blob_bottom_data_i_	test/test_contrastive_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_data_i_;$/;"	m	class:caffe::ContrastiveLossLayerTest	file:
blob_bottom_data_j_	test/test_contrastive_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_data_j_;$/;"	m	class:caffe::ContrastiveLossLayerTest	file:
blob_bottom_eltwise_	test/test_bias_layer.cpp	/^  Blob<Dtype>* const blob_bottom_eltwise_;$/;"	m	class:caffe::BiasLayerTest	file:
blob_bottom_eltwise_	test/test_scale_layer.cpp	/^  Blob<Dtype>* const blob_bottom_eltwise_;$/;"	m	class:caffe::ScaleLayerTest	file:
blob_bottom_infogain_	test/test_infogain_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_infogain_;$/;"	m	class:caffe::InfogainLossLayerTest	file:
blob_bottom_label_	test/test_accuracy_layer.cpp	/^  Blob<Dtype>* const blob_bottom_label_;$/;"	m	class:caffe::AccuracyLayerTest	file:
blob_bottom_label_	test/test_euclidean_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_label_;$/;"	m	class:caffe::EuclideanLossLayerTest	file:
blob_bottom_label_	test/test_hinge_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_label_;$/;"	m	class:caffe::HingeLossLayerTest	file:
blob_bottom_label_	test/test_infogain_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_label_;$/;"	m	class:caffe::InfogainLossLayerTest	file:
blob_bottom_label_	test/test_multinomial_logistic_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_label_;$/;"	m	class:caffe::MultinomialLogisticLossLayerTest	file:
blob_bottom_label_	test/test_softmax_with_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_label_;$/;"	m	class:caffe::SoftmaxWithLossLayerTest	file:
blob_bottom_labels_	test/test_filter_layer.cpp	/^  Blob<Dtype>* const blob_bottom_labels_;$/;"	m	class:caffe::FilterLayerTest	file:
blob_bottom_nobatch_	test/test_inner_product_layer.cpp	/^  Blob<Dtype>* const blob_bottom_nobatch_;$/;"	m	class:caffe::InnerProductLayerTest	file:
blob_bottom_permute_	test/test_batch_reindex_layer.cpp	/^  Blob<Dtype>* const blob_bottom_permute_;$/;"	m	class:caffe::BatchReindexLayerTest	file:
blob_bottom_scale_	test/test_scale_layer.cpp	/^  Blob<Dtype>* const blob_bottom_scale_;$/;"	m	class:caffe::ScaleLayerTest	file:
blob_bottom_selector_	test/test_filter_layer.cpp	/^  Blob<Dtype>* const blob_bottom_selector_;$/;"	m	class:caffe::FilterLayerTest	file:
blob_bottom_static_	test/test_lstm_layer.cpp	/^  Blob<Dtype> blob_bottom_static_;$/;"	m	class:caffe::LSTMLayerTest	file:
blob_bottom_static_	test/test_rnn_layer.cpp	/^  Blob<Dtype> blob_bottom_static_;$/;"	m	class:caffe::RNNLayerTest	file:
blob_bottom_targets_	test/test_sigmoid_cross_entropy_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_targets_;$/;"	m	class:caffe::SigmoidCrossEntropyLossLayerTest	file:
blob_bottom_vec_	test/test_accuracy_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::AccuracyLayerTest	file:
blob_bottom_vec_	test/test_argmax_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::ArgMaxLayerTest	file:
blob_bottom_vec_	test/test_batch_norm_layer.cpp	/^    vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::BatchNormLayerTest	file:
blob_bottom_vec_	test/test_batch_reindex_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::BatchReindexLayerTest	file:
blob_bottom_vec_	test/test_bias_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::BiasLayerTest	file:
blob_bottom_vec_	test/test_contrastive_loss_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::ContrastiveLossLayerTest	file:
blob_bottom_vec_	test/test_convolution_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::ConvolutionLayerTest	file:
blob_bottom_vec_	test/test_convolution_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::CuDNNConvolutionLayerTest	file:
blob_bottom_vec_	test/test_crop_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::CropLayerTest	file:
blob_bottom_vec_	test/test_data_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::DataLayerTest	file:
blob_bottom_vec_	test/test_deconvolution_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::DeconvolutionLayerTest	file:
blob_bottom_vec_	test/test_dummy_data_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::DummyDataLayerTest	file:
blob_bottom_vec_	test/test_eltwise_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::EltwiseLayerTest	file:
blob_bottom_vec_	test/test_embed_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::EmbedLayerTest	file:
blob_bottom_vec_	test/test_euclidean_loss_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::EuclideanLossLayerTest	file:
blob_bottom_vec_	test/test_filter_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::FilterLayerTest	file:
blob_bottom_vec_	test/test_flatten_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::FlattenLayerTest	file:
blob_bottom_vec_	test/test_hdf5_output_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::HDF5OutputLayerTest	file:
blob_bottom_vec_	test/test_hdf5data_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::HDF5DataLayerTest	file:
blob_bottom_vec_	test/test_hinge_loss_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::HingeLossLayerTest	file:
blob_bottom_vec_	test/test_im2col_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::Im2colLayerTest	file:
blob_bottom_vec_	test/test_image_data_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::ImageDataLayerTest	file:
blob_bottom_vec_	test/test_infogain_loss_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::InfogainLossLayerTest	file:
blob_bottom_vec_	test/test_inner_product_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::InnerProductLayerTest	file:
blob_bottom_vec_	test/test_lrn_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::CuDNNLRNLayerTest	file:
blob_bottom_vec_	test/test_lrn_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::LRNLayerTest	file:
blob_bottom_vec_	test/test_lstm_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::LSTMLayerTest	file:
blob_bottom_vec_	test/test_maxpool_dropout_layers.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::MaxPoolingDropoutTest	file:
blob_bottom_vec_	test/test_memory_data_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::MemoryDataLayerTest	file:
blob_bottom_vec_	test/test_multinomial_logistic_loss_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::MultinomialLogisticLossLayerTest	file:
blob_bottom_vec_	test/test_mvn_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::MVNLayerTest	file:
blob_bottom_vec_	test/test_neuron_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::CuDNNNeuronLayerTest	file:
blob_bottom_vec_	test/test_neuron_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::NeuronLayerTest	file:
blob_bottom_vec_	test/test_pooling_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::CuDNNPoolingLayerTest	file:
blob_bottom_vec_	test/test_pooling_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::PoolingLayerTest	file:
blob_bottom_vec_	test/test_power_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::PowerLayerTest	file:
blob_bottom_vec_	test/test_reduction_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::ReductionLayerTest	file:
blob_bottom_vec_	test/test_reshape_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::ReshapeLayerTest	file:
blob_bottom_vec_	test/test_rnn_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::RNNLayerTest	file:
blob_bottom_vec_	test/test_scale_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::ScaleLayerTest	file:
blob_bottom_vec_	test/test_sigmoid_cross_entropy_loss_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::SigmoidCrossEntropyLossLayerTest	file:
blob_bottom_vec_	test/test_slice_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::SliceLayerTest	file:
blob_bottom_vec_	test/test_softmax_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::CuDNNSoftmaxLayerTest	file:
blob_bottom_vec_	test/test_softmax_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::SoftmaxLayerTest	file:
blob_bottom_vec_	test/test_softmax_with_loss_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::SoftmaxWithLossLayerTest	file:
blob_bottom_vec_	test/test_split_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::SplitLayerTest	file:
blob_bottom_vec_	test/test_spp_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::SPPLayerTest	file:
blob_bottom_vec_	test/test_stochastic_pooling.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::StochasticPoolingLayerTest	file:
blob_bottom_vec_	test/test_tanh_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::TanHLayerTest	file:
blob_bottom_vec_	test/test_threshold_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::ThresholdLayerTest	file:
blob_bottom_vec_	test/test_tile_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::TileLayerTest	file:
blob_bottom_vec_0_	test/test_concat_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_0_, blob_bottom_vec_1_;$/;"	m	class:caffe::ConcatLayerTest	file:
blob_bottom_vec_1_	test/test_concat_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_0_, blob_bottom_vec_1_;$/;"	m	class:caffe::ConcatLayerTest	file:
blob_bottom_vec_2_	test/test_spp_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_2_;$/;"	m	class:caffe::SPPLayerTest	file:
blob_bottom_vec_3_	test/test_spp_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_3_;$/;"	m	class:caffe::SPPLayerTest	file:
blob_bottom_y_	test/test_contrastive_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_y_;$/;"	m	class:caffe::ContrastiveLossLayerTest	file:
blob_by_name	net.cpp	/^const shared_ptr<Blob<Dtype> > Net<Dtype>::blob_by_name($/;"	f	class:caffe::Net
blob_data_	test/test_hdf5_output_layer.cpp	/^  Blob<Dtype>* const blob_data_;$/;"	m	class:caffe::HDF5OutputLayerTest	file:
blob_label_	test/test_hdf5_output_layer.cpp	/^  Blob<Dtype>* const blob_label_;$/;"	m	class:caffe::HDF5OutputLayerTest	file:
blob_preshaped_	test/test_blob.cpp	/^  Blob<Dtype>* const blob_preshaped_;$/;"	m	class:caffe::BlobSimpleTest	file:
blob_top_	test/test_accuracy_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::AccuracyLayerTest	file:
blob_top_	test/test_argmax_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::ArgMaxLayerTest	file:
blob_top_	test/test_batch_norm_layer.cpp	/^    Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::BatchNormLayerTest	file:
blob_top_	test/test_batch_reindex_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::BatchReindexLayerTest	file:
blob_top_	test/test_bias_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::BiasLayerTest	file:
blob_top_	test/test_concat_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::ConcatLayerTest	file:
blob_top_	test/test_convolution_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::ConvolutionLayerTest	file:
blob_top_	test/test_convolution_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::CuDNNConvolutionLayerTest	file:
blob_top_	test/test_crop_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::CropLayerTest	file:
blob_top_	test/test_deconvolution_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::DeconvolutionLayerTest	file:
blob_top_	test/test_eltwise_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::EltwiseLayerTest	file:
blob_top_	test/test_embed_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::EmbedLayerTest	file:
blob_top_	test/test_flatten_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::FlattenLayerTest	file:
blob_top_	test/test_im2col_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::Im2colLayerTest	file:
blob_top_	test/test_inner_product_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::InnerProductLayerTest	file:
blob_top_	test/test_lrn_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::CuDNNLRNLayerTest	file:
blob_top_	test/test_lrn_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::LRNLayerTest	file:
blob_top_	test/test_lstm_layer.cpp	/^  Blob<Dtype> blob_top_;$/;"	m	class:caffe::LSTMLayerTest	file:
blob_top_	test/test_math_functions.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::MathFunctionsTest	file:
blob_top_	test/test_maxpool_dropout_layers.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::MaxPoolingDropoutTest	file:
blob_top_	test/test_mvn_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::MVNLayerTest	file:
blob_top_	test/test_neuron_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::CuDNNNeuronLayerTest	file:
blob_top_	test/test_neuron_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::NeuronLayerTest	file:
blob_top_	test/test_pooling_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::CuDNNPoolingLayerTest	file:
blob_top_	test/test_pooling_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::PoolingLayerTest	file:
blob_top_	test/test_power_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::PowerLayerTest	file:
blob_top_	test/test_reduction_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::ReductionLayerTest	file:
blob_top_	test/test_reshape_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::ReshapeLayerTest	file:
blob_top_	test/test_rnn_layer.cpp	/^  Blob<Dtype> blob_top_;$/;"	m	class:caffe::RNNLayerTest	file:
blob_top_	test/test_scale_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::ScaleLayerTest	file:
blob_top_	test/test_softmax_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::CuDNNSoftmaxLayerTest	file:
blob_top_	test/test_softmax_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::SoftmaxLayerTest	file:
blob_top_	test/test_spp_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::SPPLayerTest	file:
blob_top_	test/test_stochastic_pooling.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::StochasticPoolingLayerTest	file:
blob_top_	test/test_tanh_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::TanHLayerTest	file:
blob_top_	test/test_threshold_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::ThresholdLayerTest	file:
blob_top_	test/test_tile_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::TileLayerTest	file:
blob_top_0_	test/test_slice_layer.cpp	/^  Blob<Dtype>* const blob_top_0_;$/;"	m	class:caffe::SliceLayerTest	file:
blob_top_1_	test/test_slice_layer.cpp	/^  Blob<Dtype>* const blob_top_1_;$/;"	m	class:caffe::SliceLayerTest	file:
blob_top_2_	test/test_convolution_layer.cpp	/^  Blob<Dtype>* const blob_top_2_;$/;"	m	class:caffe::ConvolutionLayerTest	file:
blob_top_2_	test/test_convolution_layer.cpp	/^  Blob<Dtype>* const blob_top_2_;$/;"	m	class:caffe::CuDNNConvolutionLayerTest	file:
blob_top_2_	test/test_deconvolution_layer.cpp	/^  Blob<Dtype>* const blob_top_2_;$/;"	m	class:caffe::DeconvolutionLayerTest	file:
blob_top_2_	test/test_slice_layer.cpp	/^  Blob<Dtype>* const blob_top_2_;$/;"	m	class:caffe::SliceLayerTest	file:
blob_top_a_	test/test_dummy_data_layer.cpp	/^  Blob<Dtype>* const blob_top_a_;$/;"	m	class:caffe::DummyDataLayerTest	file:
blob_top_a_	test/test_split_layer.cpp	/^  Blob<Dtype>* const blob_top_a_;$/;"	m	class:caffe::SplitLayerTest	file:
blob_top_b_	test/test_dummy_data_layer.cpp	/^  Blob<Dtype>* const blob_top_b_;$/;"	m	class:caffe::DummyDataLayerTest	file:
blob_top_b_	test/test_split_layer.cpp	/^  Blob<Dtype>* const blob_top_b_;$/;"	m	class:caffe::SplitLayerTest	file:
blob_top_c_	test/test_dummy_data_layer.cpp	/^  Blob<Dtype>* const blob_top_c_;$/;"	m	class:caffe::DummyDataLayerTest	file:
blob_top_data_	test/test_data_layer.cpp	/^  Blob<Dtype>* const blob_top_data_;$/;"	m	class:caffe::DataLayerTest	file:
blob_top_data_	test/test_filter_layer.cpp	/^  Blob<Dtype>* const blob_top_data_;$/;"	m	class:caffe::FilterLayerTest	file:
blob_top_data_	test/test_hdf5data_layer.cpp	/^  Blob<Dtype>* const blob_top_data_;$/;"	m	class:caffe::HDF5DataLayerTest	file:
blob_top_data_	test/test_image_data_layer.cpp	/^  Blob<Dtype>* const blob_top_data_;$/;"	m	class:caffe::ImageDataLayerTest	file:
blob_top_label2_	test/test_hdf5data_layer.cpp	/^  Blob<Dtype>* const blob_top_label2_;$/;"	m	class:caffe::HDF5DataLayerTest	file:
blob_top_label_	test/test_data_layer.cpp	/^  Blob<Dtype>* const blob_top_label_;$/;"	m	class:caffe::DataLayerTest	file:
blob_top_label_	test/test_hdf5data_layer.cpp	/^  Blob<Dtype>* const blob_top_label_;$/;"	m	class:caffe::HDF5DataLayerTest	file:
blob_top_label_	test/test_image_data_layer.cpp	/^  Blob<Dtype>* const blob_top_label_;$/;"	m	class:caffe::ImageDataLayerTest	file:
blob_top_labels_	test/test_filter_layer.cpp	/^  Blob<Dtype>* const blob_top_labels_;$/;"	m	class:caffe::FilterLayerTest	file:
blob_top_loss_	test/test_contrastive_loss_layer.cpp	/^  Blob<Dtype>* const blob_top_loss_;$/;"	m	class:caffe::ContrastiveLossLayerTest	file:
blob_top_loss_	test/test_euclidean_loss_layer.cpp	/^  Blob<Dtype>* const blob_top_loss_;$/;"	m	class:caffe::EuclideanLossLayerTest	file:
blob_top_loss_	test/test_hinge_loss_layer.cpp	/^  Blob<Dtype>* const blob_top_loss_;$/;"	m	class:caffe::HingeLossLayerTest	file:
blob_top_loss_	test/test_infogain_loss_layer.cpp	/^  Blob<Dtype>* const blob_top_loss_;$/;"	m	class:caffe::InfogainLossLayerTest	file:
blob_top_loss_	test/test_multinomial_logistic_loss_layer.cpp	/^  Blob<Dtype>* const blob_top_loss_;$/;"	m	class:caffe::MultinomialLogisticLossLayerTest	file:
blob_top_loss_	test/test_sigmoid_cross_entropy_loss_layer.cpp	/^  Blob<Dtype>* const blob_top_loss_;$/;"	m	class:caffe::SigmoidCrossEntropyLossLayerTest	file:
blob_top_loss_	test/test_softmax_with_loss_layer.cpp	/^  Blob<Dtype>* const blob_top_loss_;$/;"	m	class:caffe::SoftmaxWithLossLayerTest	file:
blob_top_mask_	test/test_pooling_layer.cpp	/^  Blob<Dtype>* const blob_top_mask_;$/;"	m	class:caffe::CuDNNPoolingLayerTest	file:
blob_top_mask_	test/test_pooling_layer.cpp	/^  Blob<Dtype>* const blob_top_mask_;$/;"	m	class:caffe::PoolingLayerTest	file:
blob_top_per_class_	test/test_accuracy_layer.cpp	/^  Blob<Dtype>* const blob_top_per_class_;$/;"	m	class:caffe::AccuracyLayerTest	file:
blob_top_per_class_vec_	test/test_accuracy_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_per_class_vec_;$/;"	m	class:caffe::AccuracyLayerTest	file:
blob_top_vec_	test/test_accuracy_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::AccuracyLayerTest	file:
blob_top_vec_	test/test_argmax_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::ArgMaxLayerTest	file:
blob_top_vec_	test/test_batch_norm_layer.cpp	/^    vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::BatchNormLayerTest	file:
blob_top_vec_	test/test_batch_reindex_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::BatchReindexLayerTest	file:
blob_top_vec_	test/test_bias_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::BiasLayerTest	file:
blob_top_vec_	test/test_concat_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::ConcatLayerTest	file:
blob_top_vec_	test/test_contrastive_loss_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::ContrastiveLossLayerTest	file:
blob_top_vec_	test/test_convolution_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::ConvolutionLayerTest	file:
blob_top_vec_	test/test_convolution_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::CuDNNConvolutionLayerTest	file:
blob_top_vec_	test/test_crop_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::CropLayerTest	file:
blob_top_vec_	test/test_data_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::DataLayerTest	file:
blob_top_vec_	test/test_deconvolution_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::DeconvolutionLayerTest	file:
blob_top_vec_	test/test_dummy_data_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::DummyDataLayerTest	file:
blob_top_vec_	test/test_eltwise_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::EltwiseLayerTest	file:
blob_top_vec_	test/test_embed_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::EmbedLayerTest	file:
blob_top_vec_	test/test_euclidean_loss_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::EuclideanLossLayerTest	file:
blob_top_vec_	test/test_filter_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::FilterLayerTest	file:
blob_top_vec_	test/test_flatten_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::FlattenLayerTest	file:
blob_top_vec_	test/test_hdf5_output_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::HDF5OutputLayerTest	file:
blob_top_vec_	test/test_hdf5data_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::HDF5DataLayerTest	file:
blob_top_vec_	test/test_hinge_loss_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::HingeLossLayerTest	file:
blob_top_vec_	test/test_im2col_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::Im2colLayerTest	file:
blob_top_vec_	test/test_image_data_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::ImageDataLayerTest	file:
blob_top_vec_	test/test_infogain_loss_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::InfogainLossLayerTest	file:
blob_top_vec_	test/test_inner_product_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::InnerProductLayerTest	file:
blob_top_vec_	test/test_lrn_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::CuDNNLRNLayerTest	file:
blob_top_vec_	test/test_lrn_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::LRNLayerTest	file:
blob_top_vec_	test/test_lstm_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::LSTMLayerTest	file:
blob_top_vec_	test/test_maxpool_dropout_layers.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::MaxPoolingDropoutTest	file:
blob_top_vec_	test/test_memory_data_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::MemoryDataLayerTest	file:
blob_top_vec_	test/test_multinomial_logistic_loss_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::MultinomialLogisticLossLayerTest	file:
blob_top_vec_	test/test_mvn_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::MVNLayerTest	file:
blob_top_vec_	test/test_neuron_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::CuDNNNeuronLayerTest	file:
blob_top_vec_	test/test_neuron_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::NeuronLayerTest	file:
blob_top_vec_	test/test_pooling_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::CuDNNPoolingLayerTest	file:
blob_top_vec_	test/test_pooling_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::PoolingLayerTest	file:
blob_top_vec_	test/test_power_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::PowerLayerTest	file:
blob_top_vec_	test/test_reduction_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::ReductionLayerTest	file:
blob_top_vec_	test/test_reshape_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::ReshapeLayerTest	file:
blob_top_vec_	test/test_rnn_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::RNNLayerTest	file:
blob_top_vec_	test/test_scale_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::ScaleLayerTest	file:
blob_top_vec_	test/test_sigmoid_cross_entropy_loss_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::SigmoidCrossEntropyLossLayerTest	file:
blob_top_vec_	test/test_softmax_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::CuDNNSoftmaxLayerTest	file:
blob_top_vec_	test/test_softmax_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::SoftmaxLayerTest	file:
blob_top_vec_	test/test_softmax_with_loss_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::SoftmaxWithLossLayerTest	file:
blob_top_vec_	test/test_split_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::SplitLayerTest	file:
blob_top_vec_	test/test_spp_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::SPPLayerTest	file:
blob_top_vec_	test/test_stochastic_pooling.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::StochasticPoolingLayerTest	file:
blob_top_vec_	test/test_tanh_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::TanHLayerTest	file:
blob_top_vec_	test/test_threshold_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::ThresholdLayerTest	file:
blob_top_vec_	test/test_tile_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::TileLayerTest	file:
blob_top_vec_0_	test/test_slice_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_0_, blob_top_vec_1_;$/;"	m	class:caffe::SliceLayerTest	file:
blob_top_vec_1_	test/test_slice_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_0_, blob_top_vec_1_;$/;"	m	class:caffe::SliceLayerTest	file:
bodies_mutex_	data_reader.cpp	/^static boost::mutex bodies_mutex_;$/;"	m	namespace:caffe	file:
caffe	blob.cpp	/^namespace caffe {$/;"	n	file:
caffe	common.cpp	/^namespace caffe {$/;"	n	file:
caffe	data_reader.cpp	/^namespace caffe {$/;"	n	file:
caffe	data_transformer.cpp	/^namespace caffe {$/;"	n	file:
caffe	internal_thread.cpp	/^namespace caffe {$/;"	n	file:
caffe	layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layer_factory.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/absval_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/accuracy_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/argmax_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/base_conv_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/base_data_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/batch_norm_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/batch_reindex_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/bias_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/bnll_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/center_loss_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/concat_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/contrastive_loss_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/conv_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/crop_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/cudnn_conv_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/cudnn_lcn_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/cudnn_lrn_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/cudnn_pooling_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/cudnn_relu_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/cudnn_sigmoid_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/cudnn_softmax_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/cudnn_tanh_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/data_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/deconv_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/dropout_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/dummy_data_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/eltwise_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/elu_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/embed_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/euclidean_loss_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/exp_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/filter_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/flatten_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/hdf5_data_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/hdf5_output_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/hinge_loss_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/im2col_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/image_data_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/infogain_loss_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/inner_product_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/input_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/log_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/loss_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/lrn_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/lstm_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/lstm_unit_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/memory_data_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/multinomial_logistic_loss_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/mvn_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/neuron_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/normalize_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/parameter_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/pooling_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/power_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/prelu_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/recurrent_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/reduction_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/relu_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/reshape_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/rnn_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/scale_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/sigmoid_cross_entropy_loss_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/sigmoid_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/silence_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/slice_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/softmax_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/softmax_loss_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/split_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/spp_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/tanh_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/threshold_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/tile_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	layers/window_data_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	net.cpp	/^namespace caffe {$/;"	n	file:
caffe	parallel.cpp	/^namespace caffe {$/;"	n	file:
caffe	solver.cpp	/^namespace caffe {$/;"	n	file:
caffe	solvers/adadelta_solver.cpp	/^namespace caffe {$/;"	n	file:
caffe	solvers/adagrad_solver.cpp	/^namespace caffe {$/;"	n	file:
caffe	solvers/adam_solver.cpp	/^namespace caffe {$/;"	n	file:
caffe	solvers/nesterov_solver.cpp	/^namespace caffe {$/;"	n	file:
caffe	solvers/rmsprop_solver.cpp	/^namespace caffe {$/;"	n	file:
caffe	solvers/sgd_solver.cpp	/^namespace caffe {$/;"	n	file:
caffe	syncedmem.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_accuracy_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_argmax_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_batch_norm_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_batch_reindex_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_benchmark.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_bias_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_blob.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_caffe_main.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_common.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_concat_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_contrastive_loss_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_convolution_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_crop_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_data_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_data_transformer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_db.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_deconvolution_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_dummy_data_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_eltwise_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_embed_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_euclidean_loss_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_filler.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_filter_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_flatten_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_gradient_based_solver.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_hdf5_output_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_hdf5data_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_hinge_loss_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_im2col_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_image_data_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_infogain_loss_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_inner_product_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_internal_thread.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_io.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_layer_factory.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_lrn_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_lstm_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_math_functions.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_maxpool_dropout_layers.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_memory_data_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_multinomial_logistic_loss_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_mvn_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_net.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_neuron_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_platform.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_pooling_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_power_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_protobuf.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_random_number_generator.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_reduction_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_reshape_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_rnn_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_scale_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_sigmoid_cross_entropy_loss_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_slice_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_softmax_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_softmax_with_loss_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_solver.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_solver_factory.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_split_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_spp_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_stochastic_pooling.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_syncedmem.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_tanh_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_threshold_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_tile_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_upgrade_proto.cpp	/^namespace caffe {$/;"	n	file:
caffe	test/test_util_blas.cpp	/^namespace caffe {$/;"	n	file:
caffe	util/benchmark.cpp	/^namespace caffe {$/;"	n	file:
caffe	util/blocking_queue.cpp	/^namespace caffe {$/;"	n	file:
caffe	util/cudnn.cpp	/^namespace caffe {$/;"	n	file:
caffe	util/db.cpp	/^namespace caffe { namespace db {$/;"	n	file:
caffe	util/db_leveldb.cpp	/^namespace caffe { namespace db {$/;"	n	file:
caffe	util/db_lmdb.cpp	/^namespace caffe { namespace db {$/;"	n	file:
caffe	util/hdf5.cpp	/^namespace caffe {$/;"	n	file:
caffe	util/im2col.cpp	/^namespace caffe {$/;"	n	file:
caffe	util/insert_splits.cpp	/^namespace caffe {$/;"	n	file:
caffe	util/io.cpp	/^namespace caffe {$/;"	n	file:
caffe	util/math_functions.cpp	/^namespace caffe {$/;"	n	file:
caffe	util/signal_handler.cpp	/^namespace caffe {$/;"	n	file:
caffe	util/upgrade_proto.cpp	/^namespace caffe {$/;"	n	file:
caffe_abs	util/math_functions.cpp	/^void caffe_abs<double>(const int n, const double* a, double* y) {$/;"	f	namespace:caffe
caffe_abs	util/math_functions.cpp	/^void caffe_abs<float>(const int n, const float* a, float* y) {$/;"	f	namespace:caffe
caffe_add	util/math_functions.cpp	/^void caffe_add<double>(const int n, const double* a, const double* b,$/;"	f	namespace:caffe
caffe_add	util/math_functions.cpp	/^void caffe_add<float>(const int n, const float* a, const float* b,$/;"	f	namespace:caffe
caffe_add_scalar	util/math_functions.cpp	/^void caffe_add_scalar(const int N, const double alpha, double* Y) {$/;"	f	namespace:caffe
caffe_add_scalar	util/math_functions.cpp	/^void caffe_add_scalar(const int N, const float alpha, float* Y) {$/;"	f	namespace:caffe
caffe_axpy	util/math_functions.cpp	/^void caffe_axpy<double>(const int N, const double alpha, const double* X,$/;"	f	namespace:caffe
caffe_axpy	util/math_functions.cpp	/^void caffe_axpy<float>(const int N, const float alpha, const float* X,$/;"	f	namespace:caffe
caffe_conv	test/test_convolution_layer.cpp	/^void caffe_conv(const Blob<Dtype>* in, ConvolutionParameter* conv_param,$/;"	f	namespace:caffe
caffe_copy	util/math_functions.cpp	/^void caffe_copy(const int N, const Dtype* X, Dtype* Y) {$/;"	f	namespace:caffe
caffe_cpu_asum	util/math_functions.cpp	/^double caffe_cpu_asum<double>(const int n, const double* x) {$/;"	f	namespace:caffe
caffe_cpu_asum	util/math_functions.cpp	/^float caffe_cpu_asum<float>(const int n, const float* x) {$/;"	f	namespace:caffe
caffe_cpu_axpby	util/math_functions.cpp	/^void caffe_cpu_axpby<double>(const int N, const double alpha, const double* X,$/;"	f	namespace:caffe
caffe_cpu_axpby	util/math_functions.cpp	/^void caffe_cpu_axpby<float>(const int N, const float alpha, const float* X,$/;"	f	namespace:caffe
caffe_cpu_dot	util/math_functions.cpp	/^Dtype caffe_cpu_dot(const int n, const Dtype* x, const Dtype* y) {$/;"	f	namespace:caffe
caffe_cpu_gemm	util/math_functions.cpp	/^void caffe_cpu_gemm<double>(const CBLAS_TRANSPOSE TransA,$/;"	f	namespace:caffe
caffe_cpu_gemm	util/math_functions.cpp	/^void caffe_cpu_gemm<float>(const CBLAS_TRANSPOSE TransA,$/;"	f	namespace:caffe
caffe_cpu_gemv	util/math_functions.cpp	/^void caffe_cpu_gemv<double>(const CBLAS_TRANSPOSE TransA, const int M,$/;"	f	namespace:caffe
caffe_cpu_gemv	util/math_functions.cpp	/^void caffe_cpu_gemv<float>(const CBLAS_TRANSPOSE TransA, const int M,$/;"	f	namespace:caffe
caffe_cpu_scale	util/math_functions.cpp	/^void caffe_cpu_scale<double>(const int n, const double alpha, const double *x,$/;"	f	namespace:caffe
caffe_cpu_scale	util/math_functions.cpp	/^void caffe_cpu_scale<float>(const int n, const float alpha, const float *x,$/;"	f	namespace:caffe
caffe_cpu_strided_dot	util/math_functions.cpp	/^double caffe_cpu_strided_dot<double>(const int n, const double* x,$/;"	f	namespace:caffe
caffe_cpu_strided_dot	util/math_functions.cpp	/^float caffe_cpu_strided_dot<float>(const int n, const float* x, const int incx,$/;"	f	namespace:caffe
caffe_div	util/math_functions.cpp	/^void caffe_div<double>(const int n, const double* a, const double* b,$/;"	f	namespace:caffe
caffe_div	util/math_functions.cpp	/^void caffe_div<float>(const int n, const float* a, const float* b,$/;"	f	namespace:caffe
caffe_exp	util/math_functions.cpp	/^void caffe_exp<double>(const int n, const double* a, double* y) {$/;"	f	namespace:caffe
caffe_exp	util/math_functions.cpp	/^void caffe_exp<float>(const int n, const float* a, float* y) {$/;"	f	namespace:caffe
caffe_log	util/math_functions.cpp	/^void caffe_log<double>(const int n, const double* a, double* y) {$/;"	f	namespace:caffe
caffe_log	util/math_functions.cpp	/^void caffe_log<float>(const int n, const float* a, float* y) {$/;"	f	namespace:caffe
caffe_mul	util/math_functions.cpp	/^void caffe_mul<double>(const int n, const double* a, const double* b,$/;"	f	namespace:caffe
caffe_mul	util/math_functions.cpp	/^void caffe_mul<float>(const int n, const float* a, const float* b,$/;"	f	namespace:caffe
caffe_nextafter	util/math_functions.cpp	/^Dtype caffe_nextafter(const Dtype b) {$/;"	f	namespace:caffe
caffe_powx	util/math_functions.cpp	/^void caffe_powx<double>(const int n, const double* a, const double b,$/;"	f	namespace:caffe
caffe_powx	util/math_functions.cpp	/^void caffe_powx<float>(const int n, const float* a, const float b,$/;"	f	namespace:caffe
caffe_rng_bernoulli	util/math_functions.cpp	/^void caffe_rng_bernoulli(const int n, const Dtype p, int* r) {$/;"	f	namespace:caffe
caffe_rng_bernoulli	util/math_functions.cpp	/^void caffe_rng_bernoulli(const int n, const Dtype p, unsigned int* r) {$/;"	f	namespace:caffe
caffe_rng_gaussian	util/math_functions.cpp	/^void caffe_rng_gaussian(const int n, const Dtype a,$/;"	f	namespace:caffe
caffe_rng_rand	util/math_functions.cpp	/^unsigned int caffe_rng_rand() {$/;"	f	namespace:caffe
caffe_rng_uniform	util/math_functions.cpp	/^void caffe_rng_uniform(const int n, const Dtype a, const Dtype b, Dtype* r) {$/;"	f	namespace:caffe
caffe_scal	util/math_functions.cpp	/^void caffe_scal<double>(const int N, const double alpha, double *X) {$/;"	f	namespace:caffe
caffe_scal	util/math_functions.cpp	/^void caffe_scal<float>(const int N, const float alpha, float *X) {$/;"	f	namespace:caffe
caffe_set	util/math_functions.cpp	/^void caffe_set(const int N, const Dtype alpha, Dtype* Y) {$/;"	f	namespace:caffe
caffe_sqr	util/math_functions.cpp	/^void caffe_sqr<double>(const int n, const double* a, double* y) {$/;"	f	namespace:caffe
caffe_sqr	util/math_functions.cpp	/^void caffe_sqr<float>(const int n, const float* a, float* y) {$/;"	f	namespace:caffe
caffe_sub	util/math_functions.cpp	/^void caffe_sub<double>(const int n, const double* a, const double* b,$/;"	f	namespace:caffe
caffe_sub	util/math_functions.cpp	/^void caffe_sub<float>(const int n, const float* a, const float* b,$/;"	f	namespace:caffe
channels_	test/test_gradient_based_solver.cpp	/^  int num_, channels_, height_, width_;$/;"	m	class:caffe::GradientBasedSolverTest	file:
channels_	test/test_hdf5_output_layer.cpp	/^  int channels_;$/;"	m	class:caffe::HDF5OutputLayerTest	file:
channels_	test/test_memory_data_layer.cpp	/^  int channels_;$/;"	m	class:caffe::MemoryDataLayerTest	file:
check_batch_reindex	layers/batch_reindex_layer.cpp	/^void BatchReindexLayer<Dtype>::check_batch_reindex(int initial_num,$/;"	f	class:caffe::BatchReindexLayer
cluster_seedgen	common.cpp	/^int64_t cluster_seedgen(void) {$/;"	f	namespace:caffe
col2im_cpu	util/im2col.cpp	/^void col2im_cpu(const Dtype* data_col, const int channels,$/;"	f	namespace:caffe
col2im_nd_cpu	util/im2col.cpp	/^void col2im_nd_cpu(const Dtype* data_col, const int num_spatial_axes,$/;"	f	namespace:caffe
compute	parallel.cpp	/^void DevicePair::compute(const vector<int> devices, vector<DevicePair>* pairs) {$/;"	f	class:caffe::DevicePair
compute_output_shape	layers/conv_layer.cpp	/^void ConvolutionLayer<Dtype>::compute_output_shape() {$/;"	f	class:caffe::ConvolutionLayer
compute_output_shape	layers/deconv_layer.cpp	/^void DeconvolutionLayer<Dtype>::compute_output_shape() {$/;"	f	class:caffe::DeconvolutionLayer
condition_	util/blocking_queue.cpp	/^  boost::condition_variable condition_;$/;"	m	class:caffe::BlockingQueue::sync	file:
configure	parallel.cpp	/^void GPUParams<Dtype>::configure(Solver<Dtype>* solver) const {$/;"	f	class:caffe::GPUParams
copy	parallel.cpp	/^  copy,$/;"	e	enum:caffe::Op	file:
cpu_data	blob.cpp	/^const Dtype* Blob<Dtype>::cpu_data() const {$/;"	f	class:caffe::Blob
cpu_data	syncedmem.cpp	/^const void* SyncedMemory::cpu_data() {$/;"	f	class:caffe::SyncedMemory
cpu_diff	blob.cpp	/^const Dtype* Blob<Dtype>::cpu_diff() const {$/;"	f	class:caffe::Blob
crop_copy	layers/crop_layer.cpp	/^void CropLayer<Dtype>::crop_copy(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CropLayer
cublasGetErrorString	common.cpp	/^const char* cublasGetErrorString(cublasStatus_t error) {$/;"	f	namespace:caffe
cudnn	util/cudnn.cpp	/^namespace cudnn {$/;"	n	namespace:caffe	file:
curandGetErrorString	common.cpp	/^const char* curandGetErrorString(curandStatus_t error) {$/;"	f	namespace:caffe
data	test/test_data/generate_sample_data.py	/^data = data.astype('float32')$/;"	v
data	test/test_data/generate_sample_data.py	/^data = data.reshape(num_rows, num_cols, height, width)$/;"	v
data	test/test_data/generate_sample_data.py	/^data = np.arange(total_size)$/;"	v
data	test/test_data/generate_sample_data.py	/^data = np.random.randn(num_rows, num_cols, height, width)$/;"	v
data_	test/test_memory_data_layer.cpp	/^  Blob<Dtype>* const data_;$/;"	m	class:caffe::MemoryDataLayerTest	file:
data_	test/test_random_number_generator.cpp	/^  shared_ptr<SyncedMemory> data_;$/;"	m	class:caffe::RandomNumberGeneratorTest	file:
data_2_	test/test_random_number_generator.cpp	/^  shared_ptr<SyncedMemory> data_2_;$/;"	m	class:caffe::RandomNumberGeneratorTest	file:
data_blob_	test/test_memory_data_layer.cpp	/^  Blob<Dtype>* const data_blob_;$/;"	m	class:caffe::MemoryDataLayerTest	file:
db	util/db.cpp	/^namespace caffe { namespace db {$/;"	n	namespace:caffe	file:
db	util/db_leveldb.cpp	/^namespace caffe { namespace db {$/;"	n	namespace:caffe	file:
db	util/db_lmdb.cpp	/^namespace caffe { namespace db {$/;"	n	namespace:caffe	file:
delta_	test/test_gradient_based_solver.cpp	/^  Dtype delta_;  \/\/ Stability constant for RMSProp, AdaGrad, AdaDelta and Adam$/;"	m	class:caffe::GradientBasedSolverTest	file:
dtype	test/test_data/generate_sample_data.py	/^        dtype='uint8',$/;"	v
entry	internal_thread.cpp	/^void InternalThread::entry(int device, Caffe::Brew mode, int rand_seed,$/;"	f	class:caffe::InternalThread
epsilon_	test/test_blob.cpp	/^  Dtype epsilon_;$/;"	m	class:caffe::BlobMathTest	file:
epsilon_	test/test_lrn_layer.cpp	/^  Dtype epsilon_;$/;"	m	class:caffe::CuDNNLRNLayerTest	file:
epsilon_	test/test_lrn_layer.cpp	/^  Dtype epsilon_;$/;"	m	class:caffe::LRNLayerTest	file:
filename	test/test_hdf5data_layer.cpp	/^  string* filename;$/;"	m	class:caffe::HDF5DataLayerTest	file:
filename_	test/test_data_layer.cpp	/^  shared_ptr<string> filename_;$/;"	m	class:caffe::DataLayerTest	file:
filename_	test/test_image_data_layer.cpp	/^  string filename_;$/;"	m	class:caffe::ImageDataLayerTest	file:
filename_reshape_	test/test_image_data_layer.cpp	/^  string filename_reshape_;$/;"	m	class:caffe::ImageDataLayerTest	file:
filename_space_	test/test_image_data_layer.cpp	/^  string filename_space_;$/;"	m	class:caffe::ImageDataLayerTest	file:
filler_	test/test_filler.cpp	/^  shared_ptr<ConstantFiller<Dtype> > filler_;$/;"	m	class:caffe::ConstantFillerTest	file:
filler_	test/test_filler.cpp	/^  shared_ptr<GaussianFiller<Dtype> > filler_;$/;"	m	class:caffe::GaussianFillerTest	file:
filler_	test/test_filler.cpp	/^  shared_ptr<MSRAFiller<Dtype> > filler_;$/;"	m	class:caffe::MSRAFillerTest	file:
filler_	test/test_filler.cpp	/^  shared_ptr<PositiveUnitballFiller<Dtype> > filler_;$/;"	m	class:caffe::PositiveUnitballFillerTest	file:
filler_	test/test_filler.cpp	/^  shared_ptr<UniformFiller<Dtype> > filler_;$/;"	m	class:caffe::UniformFillerTest	file:
filler_	test/test_filler.cpp	/^  shared_ptr<XavierFiller<Dtype> > filler_;$/;"	m	class:caffe::XavierFillerTest	file:
filler_param_	test/test_filler.cpp	/^  FillerParameter filler_param_;$/;"	m	class:caffe::ConstantFillerTest	file:
filler_param_	test/test_filler.cpp	/^  FillerParameter filler_param_;$/;"	m	class:caffe::GaussianFillerTest	file:
filler_param_	test/test_filler.cpp	/^  FillerParameter filler_param_;$/;"	m	class:caffe::MSRAFillerTest	file:
filler_param_	test/test_filler.cpp	/^  FillerParameter filler_param_;$/;"	m	class:caffe::PositiveUnitballFillerTest	file:
filler_param_	test/test_filler.cpp	/^  FillerParameter filler_param_;$/;"	m	class:caffe::UniformFillerTest	file:
filler_param_	test/test_filler.cpp	/^  FillerParameter filler_param_;$/;"	m	class:caffe::XavierFillerTest	file:
forward_cpu_bias	layers/base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::forward_cpu_bias(Dtype* output,$/;"	f	class:caffe::BaseConvolutionLayer
forward_cpu_gemm	layers/base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::forward_cpu_gemm(const Dtype* input,$/;"	f	class:caffe::BaseConvolutionLayer
forward_gpu_bias	layers/base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::forward_gpu_bias(Dtype* output,$/;"	f	class:caffe::BaseConvolutionLayer
forward_gpu_gemm	layers/base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::forward_gpu_gemm(const Dtype* input,$/;"	f	class:caffe::BaseConvolutionLayer
generator	common.cpp	/^void* Caffe::RNG::generator() {$/;"	f	class:caffe::Caffe::RNG
get_normalizer	layers/softmax_loss_layer.cpp	/^Dtype SoftmaxWithLossLayer<Dtype>::get_normalizer($/;"	f	class:caffe::SoftmaxWithLossLayer
got_sighup	util/signal_handler.cpp	/^  static volatile sig_atomic_t got_sighup = false;$/;"	m	namespace:__anon1	file:
got_sigint	util/signal_handler.cpp	/^  static volatile sig_atomic_t got_sigint = false;$/;"	m	namespace:__anon1	file:
gpu_data	blob.cpp	/^const Dtype* Blob<Dtype>::gpu_data() const {$/;"	f	class:caffe::Blob
gpu_data	syncedmem.cpp	/^const void* SyncedMemory::gpu_data() {$/;"	f	class:caffe::SyncedMemory
gpu_diff	blob.cpp	/^const Dtype* Blob<Dtype>::gpu_diff() const {$/;"	f	class:caffe::Blob
gpu_shape	blob.cpp	/^const int* Blob<Dtype>::gpu_shape() const {$/;"	f	class:caffe::Blob
h5py	test/test_data/generate_sample_data.py	/^import h5py$/;"	i
handle_signal	util/signal_handler.cpp	/^  void handle_signal(int signal) {$/;"	f	namespace:__anon1
has_blob	net.cpp	/^bool Net<Dtype>::has_blob(const string& blob_name) const {$/;"	f	class:caffe::Net
has_layer	net.cpp	/^bool Net<Dtype>::has_layer(const string& layer_name) const {$/;"	f	class:caffe::Net
hdf5_get_name_by_idx	util/hdf5.cpp	/^string hdf5_get_name_by_idx(hid_t loc_id, int idx) {$/;"	f	namespace:caffe
hdf5_get_num_links	util/hdf5.cpp	/^int hdf5_get_num_links(hid_t loc_id) {$/;"	f	namespace:caffe
hdf5_load_int	util/hdf5.cpp	/^int hdf5_load_int(hid_t loc_id, const string& dataset_name) {$/;"	f	namespace:caffe
hdf5_load_nd_dataset	util/hdf5.cpp	/^void hdf5_load_nd_dataset<double>(hid_t file_id, const char* dataset_name_,$/;"	f	namespace:caffe
hdf5_load_nd_dataset	util/hdf5.cpp	/^void hdf5_load_nd_dataset<float>(hid_t file_id, const char* dataset_name_,$/;"	f	namespace:caffe
hdf5_load_nd_dataset_helper	util/hdf5.cpp	/^void hdf5_load_nd_dataset_helper($/;"	f	namespace:caffe
hdf5_load_string	util/hdf5.cpp	/^string hdf5_load_string(hid_t loc_id, const string& dataset_name) {$/;"	f	namespace:caffe
hdf5_save_int	util/hdf5.cpp	/^void hdf5_save_int(hid_t loc_id, const string& dataset_name, int i) {$/;"	f	namespace:caffe
hdf5_save_nd_dataset	util/hdf5.cpp	/^void hdf5_save_nd_dataset<double>($/;"	f	namespace:caffe
hdf5_save_nd_dataset	util/hdf5.cpp	/^void hdf5_save_nd_dataset<float>($/;"	f	namespace:caffe
hdf5_save_string	util/hdf5.cpp	/^void hdf5_save_string(hid_t loc_id, const string& dataset_name,$/;"	f	namespace:caffe
height	test/test_data/generate_sample_data.py	/^height = 10$/;"	v
height	test/test_data/generate_sample_data.py	/^height = 6$/;"	v
height_	test/test_gradient_based_solver.cpp	/^  int num_, channels_, height_, width_;$/;"	m	class:caffe::GradientBasedSolverTest	file:
height_	test/test_hdf5_output_layer.cpp	/^  int height_;$/;"	m	class:caffe::HDF5OutputLayerTest	file:
height_	test/test_memory_data_layer.cpp	/^  int height_;$/;"	m	class:caffe::MemoryDataLayerTest	file:
im2col_cpu	util/im2col.cpp	/^void im2col_cpu(const Dtype* data_im, const int channels,$/;"	f	namespace:caffe
im2col_nd_core_cpu	util/im2col.cpp	/^inline void im2col_nd_core_cpu(const Dtype* data_input, const bool im2col,$/;"	f	namespace:caffe
im2col_nd_cpu	util/im2col.cpp	/^void im2col_nd_cpu(const Dtype* data_im, const int num_spatial_axes,$/;"	f	namespace:caffe
input_file_	test/test_gradient_based_solver.cpp	/^  string* input_file_;$/;"	m	class:caffe::GradientBasedSolverTest	file:
input_file_name_	test/test_hdf5_output_layer.cpp	/^  string input_file_name_;$/;"	m	class:caffe::HDF5OutputLayerTest	file:
int_data_	test/test_random_number_generator.cpp	/^  shared_ptr<SyncedMemory> int_data_;$/;"	m	class:caffe::RandomNumberGeneratorTest	file:
int_data_2_	test/test_random_number_generator.cpp	/^  shared_ptr<SyncedMemory> int_data_2_;$/;"	m	class:caffe::RandomNumberGeneratorTest	file:
is_a_ge_zero_and_a_lt_b	util/im2col.cpp	/^inline bool is_a_ge_zero_and_a_lt_b(int a, int b) {$/;"	f	namespace:caffe
is_started	internal_thread.cpp	/^bool InternalThread::is_started() const {$/;"	f	class:caffe::InternalThread
kBNLL_THRESHOLD	layers/bnll_layer.cpp	/^const float kBNLL_THRESHOLD = 50.;$/;"	m	namespace:caffe	file:
kMillisecondsThreshold	test/test_benchmark.cpp	/^const float kMillisecondsThreshold = 30;$/;"	m	namespace:caffe	file:
kProtoReadBytesLimit	util/io.cpp	/^const int kProtoReadBytesLimit = INT_MAX;  \/\/ Max size of 2 GB minus 1 byte.$/;"	v
label	test/test_data/generate_sample_data.py	/^label = 1 + np.arange(num_rows)[:, np.newaxis]$/;"	v
label	test/test_data/generate_sample_data.py	/^label = label.astype('float32')$/;"	v
label2	test/test_data/generate_sample_data.py	/^label2 = label + 1$/;"	v
label_blob_	test/test_memory_data_layer.cpp	/^  Blob<Dtype>* const label_blob_;$/;"	m	class:caffe::MemoryDataLayerTest	file:
labels_	test/test_memory_data_layer.cpp	/^  Blob<Dtype>* const labels_;$/;"	m	class:caffe::MemoryDataLayerTest	file:
layer_by_name	net.cpp	/^const shared_ptr<Layer<Dtype> > Net<Dtype>::layer_by_name($/;"	f	class:caffe::Net
layer_param_	test/test_lstm_layer.cpp	/^  LayerParameter layer_param_;$/;"	m	class:caffe::LSTMLayerTest	file:
layer_param_	test/test_rnn_layer.cpp	/^  LayerParameter layer_param_;$/;"	m	class:caffe::RNNLayerTest	file:
load_batch	layers/data_layer.cpp	/^void DataLayer<Dtype>::load_batch(Batch<Dtype>* batch) {$/;"	f	class:caffe::DataLayer
load_batch	layers/image_data_layer.cpp	/^void ImageDataLayer<Dtype>::load_batch(Batch<Dtype>* batch) {$/;"	f	class:caffe::ImageDataLayer
load_batch	layers/window_data_layer.cpp	/^void WindowDataLayer<Dtype>::load_batch(Batch<Dtype>* batch) {$/;"	f	class:caffe::WindowDataLayer
main	test/test_caffe_main.cpp	/^int main(int argc, char** argv) {$/;"	f
matchExt	util/io.cpp	/^static bool matchExt(const std::string & fn,$/;"	f	namespace:caffe
mean_bound	test/test_random_number_generator.cpp	/^  Dtype mean_bound(const Dtype std) {$/;"	f	class:caffe::RandomNumberGeneratorTest
mean_bound	test/test_random_number_generator.cpp	/^  Dtype mean_bound(const Dtype std, const int sample_size) {$/;"	f	class:caffe::RandomNumberGeneratorTest
mean_bound_multiplier_	test/test_random_number_generator.cpp	/^  Dtype mean_bound_multiplier_;$/;"	m	class:caffe::RandomNumberGeneratorTest	file:
must_stop	internal_thread.cpp	/^bool InternalThread::must_stop() {$/;"	f	class:caffe::InternalThread
mutable_cpu_data	blob.cpp	/^Dtype* Blob<Dtype>::mutable_cpu_data() {$/;"	f	class:caffe::Blob
mutable_cpu_data	syncedmem.cpp	/^void* SyncedMemory::mutable_cpu_data() {$/;"	f	class:caffe::SyncedMemory
mutable_cpu_diff	blob.cpp	/^Dtype* Blob<Dtype>::mutable_cpu_diff() {$/;"	f	class:caffe::Blob
mutable_gpu_data	blob.cpp	/^Dtype* Blob<Dtype>::mutable_gpu_data() {$/;"	f	class:caffe::Blob
mutable_gpu_data	syncedmem.cpp	/^void* SyncedMemory::mutable_gpu_data() {$/;"	f	class:caffe::SyncedMemory
mutable_gpu_diff	blob.cpp	/^Dtype* Blob<Dtype>::mutable_gpu_diff() {$/;"	f	class:caffe::Blob
mutex_	util/blocking_queue.cpp	/^  mutable boost::mutex mutex_;$/;"	m	class:caffe::BlockingQueue::sync	file:
net_	test/test_net.cpp	/^  shared_ptr<Net<Dtype> > net_;$/;"	m	class:caffe::NetTest	file:
np	test/test_data/generate_sample_data.py	/^import numpy as np$/;"	i
num_	test/test_gradient_based_solver.cpp	/^  int num_, channels_, height_, width_;$/;"	m	class:caffe::GradientBasedSolverTest	file:
num_	test/test_hdf5_output_layer.cpp	/^  int num_;$/;"	m	class:caffe::HDF5OutputLayerTest	file:
num_above_mean	test/test_random_number_generator.cpp	/^  int num_above_mean;$/;"	m	class:caffe::RandomNumberGeneratorTest	file:
num_below_mean	test/test_random_number_generator.cpp	/^  int num_below_mean;$/;"	m	class:caffe::RandomNumberGeneratorTest	file:
num_cols	test/test_data/generate_sample_data.py	/^num_cols = 3$/;"	v
num_cols	test/test_data/generate_sample_data.py	/^num_cols = 8$/;"	v
num_iter_	test/test_data_transformer.cpp	/^  int num_iter_;$/;"	m	class:caffe::DataTransformTest	file:
num_output_	test/test_lstm_layer.cpp	/^  int num_output_;$/;"	m	class:caffe::LSTMLayerTest	file:
num_output_	test/test_rnn_layer.cpp	/^  int num_output_;$/;"	m	class:caffe::RNNLayerTest	file:
num_rows	test/test_data/generate_sample_data.py	/^num_rows = 10$/;"	v
num_rows	test/test_data/generate_sample_data.py	/^num_rows = 8$/;"	v
on_gradients_ready	parallel.cpp	/^void P2PSync<Dtype>::on_gradients_ready() {$/;"	f	class:caffe::P2PSync
on_start	parallel.cpp	/^void P2PSync<Dtype>::on_start() {$/;"	f	class:caffe::P2PSync
one	util/cudnn.cpp	/^const void* dataType<double>::one =$/;"	m	class:caffe::cudnn::dataType	file:
one	util/cudnn.cpp	/^const void* dataType<float>::one =$/;"	m	class:caffe::cudnn::dataType	file:
oneval	util/cudnn.cpp	/^double dataType<double>::oneval = 1.0;$/;"	m	class:caffe::cudnn::dataType	file:
oneval	util/cudnn.cpp	/^float dataType<float>::oneval = 1.0;$/;"	m	class:caffe::cudnn::dataType	file:
operator =	common.cpp	/^Caffe::RNG& Caffe::RNG::operator=(const RNG& other) {$/;"	f	class:caffe::Caffe::RNG
os	test/test_data/generate_sample_data.py	/^import os$/;"	i
output_file_name_	test/test_hdf5_output_layer.cpp	/^  string output_file_name_;$/;"	m	class:caffe::HDF5OutputLayerTest	file:
peek	util/blocking_queue.cpp	/^T BlockingQueue<T>::peek() {$/;"	f	class:caffe::BlockingQueue
pop	util/blocking_queue.cpp	/^T BlockingQueue<T>::pop(const string& log_on_wait) {$/;"	f	class:caffe::BlockingQueue
push	util/blocking_queue.cpp	/^void BlockingQueue<T>::push(const T& t) {$/;"	f	class:caffe::BlockingQueue
read_one	data_reader.cpp	/^void DataReader::Body::read_one(db::Cursor* cursor, QueuePair* qp) {$/;"	f	class:caffe::DataReader::Body
ref_blob_top_	test/test_convolution_layer.cpp	/^  shared_ptr<Blob<Dtype> > ref_blob_top_;$/;"	m	class:caffe::ConvolutionLayerTest	file:
ref_blob_top_	test/test_convolution_layer.cpp	/^  shared_ptr<Blob<Dtype> > ref_blob_top_;$/;"	m	class:caffe::CuDNNConvolutionLayerTest	file:
replace_cpu	parallel.cpp	/^  replace_cpu,$/;"	e	enum:caffe::Op	file:
replace_cpu_diff	parallel.cpp	/^  replace_cpu_diff,$/;"	e	enum:caffe::Op	file:
replace_gpu	parallel.cpp	/^  replace_gpu,$/;"	e	enum:caffe::Op	file:
replace_gpu_diff	parallel.cpp	/^  replace_gpu_diff$/;"	e	enum:caffe::Op	file:
rng	common.cpp	/^  caffe::rng_t* rng() { return rng_.get(); }$/;"	f	class:caffe::Caffe::RNG::Generator
rng_	common.cpp	/^  shared_ptr<caffe::rng_t> rng_;$/;"	m	class:caffe::Caffe::RNG::Generator	file:
root_images_	test/test_db.cpp	/^  string root_images_;$/;"	m	class:caffe::DBTest	file:
sample_mean	test/test_random_number_generator.cpp	/^  Dtype sample_mean(const Dtype* const seqs) {$/;"	f	class:caffe::RandomNumberGeneratorTest
sample_mean	test/test_random_number_generator.cpp	/^  Dtype sample_mean(const Dtype* const seqs, const int sample_size) {$/;"	f	class:caffe::RandomNumberGeneratorTest
sample_mean	test/test_random_number_generator.cpp	/^  Dtype sample_mean(const int* const seqs) {$/;"	f	class:caffe::RandomNumberGeneratorTest
sample_mean	test/test_random_number_generator.cpp	/^  Dtype sample_mean(const int* const seqs, const int sample_size) {$/;"	f	class:caffe::RandomNumberGeneratorTest
sample_size_	test/test_random_number_generator.cpp	/^  size_t sample_size_;$/;"	m	class:caffe::RandomNumberGeneratorTest	file:
scale_data	blob.cpp	/^template <> void Blob<int>::scale_data(int scale_factor) {$/;"	f	class:caffe::Blob
scale_data	blob.cpp	/^template <> void Blob<unsigned int>::scale_data(unsigned int scale_factor) {$/;"	f	class:caffe::Blob
scale_data	blob.cpp	/^void Blob<Dtype>::scale_data(Dtype scale_factor) {$/;"	f	class:caffe::Blob
scale_diff	blob.cpp	/^template <> void Blob<int>::scale_diff(int scale_factor) {$/;"	f	class:caffe::Blob
scale_diff	blob.cpp	/^template <> void Blob<unsigned int>::scale_diff(unsigned int scale_factor) {$/;"	f	class:caffe::Blob
scale_diff	blob.cpp	/^void Blob<Dtype>::scale_diff(Dtype scale_factor) {$/;"	f	class:caffe::Blob
script_dir	test/test_data/generate_sample_data.py	/^script_dir = os.path.dirname(os.path.abspath(__file__))$/;"	v
seed_	test/test_data_layer.cpp	/^  int seed_;$/;"	m	class:caffe::DataLayerTest	file:
seed_	test/test_data_transformer.cpp	/^  int seed_;$/;"	m	class:caffe::DataTransformTest	file:
seed_	test/test_gradient_based_solver.cpp	/^  int seed_;$/;"	m	class:caffe::GradientBasedSolverTest	file:
seed_	test/test_image_data_layer.cpp	/^  int seed_;$/;"	m	class:caffe::ImageDataLayerTest	file:
seed_	test/test_net.cpp	/^  int seed_;$/;"	m	class:caffe::NetTest	file:
seed_	test/test_random_number_generator.cpp	/^  uint32_t seed_;$/;"	m	class:caffe::RandomNumberGeneratorTest	file:
set_batch_size	layers/memory_data_layer.cpp	/^void MemoryDataLayer<Dtype>::set_batch_size(int new_size) {$/;"	f	class:caffe::MemoryDataLayer
set_cpu_data	blob.cpp	/^void Blob<Dtype>::set_cpu_data(Dtype* data) {$/;"	f	class:caffe::Blob
set_cpu_data	syncedmem.cpp	/^void SyncedMemory::set_cpu_data(void* data) {$/;"	f	class:caffe::SyncedMemory
set_gpu_data	syncedmem.cpp	/^void SyncedMemory::set_gpu_data(void* data) {$/;"	f	class:caffe::SyncedMemory
set_random_seed	common.cpp	/^void Caffe::set_random_seed(const unsigned int seed) {$/;"	f	class:caffe::Caffe
share_	test/test_gradient_based_solver.cpp	/^  bool share_;$/;"	m	class:caffe::GradientBasedSolverTest	file:
sigmoid	layers/lstm_unit_layer.cpp	/^inline Dtype sigmoid(Dtype x) {$/;"	f	namespace:caffe
sigmoid	layers/sigmoid_layer.cpp	/^inline Dtype sigmoid(Dtype x) {$/;"	f	namespace:caffe
simple_solver_param	test/test_solver_factory.cpp	/^  SolverParameter simple_solver_param() {$/;"	f	class:caffe::SolverFactoryTest
size	util/blocking_queue.cpp	/^size_t BlockingQueue<T>::size() const {$/;"	f	class:caffe::BlockingQueue
snapshot_prefix_	test/test_gradient_based_solver.cpp	/^  string snapshot_prefix_;$/;"	m	class:caffe::GradientBasedSolverTest	file:
solver_	test/test_gradient_based_solver.cpp	/^  shared_ptr<SGDSolver<Dtype> > solver_;$/;"	m	class:caffe::GradientBasedSolverTest	file:
solver_	test/test_solver.cpp	/^  shared_ptr<Solver<Dtype> > solver_;$/;"	m	class:caffe::SolverTest	file:
source_	test/test_db.cpp	/^  string source_;$/;"	m	class:caffe::DBTest	file:
sumsq_data	blob.cpp	/^Dtype Blob<Dtype>::sumsq_data() const {$/;"	f	class:caffe::Blob
sumsq_data	blob.cpp	/^template <> int Blob<int>::sumsq_data() const {$/;"	f	class:caffe::Blob
sumsq_data	blob.cpp	/^template <> unsigned int Blob<unsigned int>::sumsq_data() const {$/;"	f	class:caffe::Blob
sumsq_diff	blob.cpp	/^Dtype Blob<Dtype>::sumsq_diff() const {$/;"	f	class:caffe::Blob
sumsq_diff	blob.cpp	/^template <> int Blob<int>::sumsq_diff() const {$/;"	f	class:caffe::Blob
sumsq_diff	blob.cpp	/^template <> unsigned int Blob<unsigned int>::sumsq_diff() const {$/;"	f	class:caffe::Blob
sync	util/blocking_queue.cpp	/^class BlockingQueue<T>::sync {$/;"	c	class:caffe::BlockingQueue	file:
sync_	test/test_gradient_based_solver.cpp	/^  shared_ptr<P2PSync<Dtype> > sync_;$/;"	m	class:caffe::GradientBasedSolverTest	file:
tanh	layers/lstm_unit_layer.cpp	/^inline Dtype tanh(Dtype x) {$/;"	f	namespace:caffe
tanh_naive	test/test_tanh_layer.cpp	/^double tanh_naive(double x) {$/;"	f	namespace:caffe
targets	test/test_data/generate_sample_data.py	/^targets = np.random.randn(num_rows, 1)$/;"	v
targets	test/test_data/generate_sample_data.py	/^targets = targets.astype('float32')$/;"	v
test_params	test/test_filler.cpp	/^  virtual void test_params(FillerParameter_VarianceNorm variance_norm,$/;"	f	class:caffe::MSRAFillerTest
test_params	test/test_filler.cpp	/^  virtual void test_params(FillerParameter_VarianceNorm variance_norm,$/;"	f	class:caffe::XavierFillerTest
thread_instance_	common.cpp	/^static boost::thread_specific_ptr<Caffe> thread_instance_;$/;"	m	namespace:caffe	file:
to_cpu	syncedmem.cpp	/^inline void SyncedMemory::to_cpu() {$/;"	f	class:caffe::SyncedMemory
to_gpu	syncedmem.cpp	/^inline void SyncedMemory::to_gpu() {$/;"	f	class:caffe::SyncedMemory
top_k_	test/test_accuracy_layer.cpp	/^  int top_k_;$/;"	m	class:caffe::AccuracyLayerTest	file:
top_k_	test/test_argmax_layer.cpp	/^  size_t top_k_;$/;"	m	class:caffe::ArgMaxLayerTest	file:
total_size	parallel.cpp	/^static size_t total_size(const vector<Blob<Dtype>*>& params) {$/;"	f	namespace:caffe
total_size	test/test_data/generate_sample_data.py	/^total_size = num_cols * num_rows * height * width$/;"	v
try_peek	util/blocking_queue.cpp	/^bool BlockingQueue<T>::try_peek(T* t) {$/;"	f	class:caffe::BlockingQueue
try_pop	util/blocking_queue.cpp	/^bool BlockingQueue<T>::try_pop(T* t) {$/;"	f	class:caffe::BlockingQueue
unit_blob_bottom_c_prev_	test/test_lstm_layer.cpp	/^  Blob<Dtype> unit_blob_bottom_c_prev_;$/;"	m	class:caffe::LSTMLayerTest	file:
unit_blob_bottom_cont_	test/test_lstm_layer.cpp	/^  Blob<Dtype> unit_blob_bottom_cont_;$/;"	m	class:caffe::LSTMLayerTest	file:
unit_blob_bottom_vec_	test/test_lstm_layer.cpp	/^  vector<Blob<Dtype>*> unit_blob_bottom_vec_;$/;"	m	class:caffe::LSTMLayerTest	file:
unit_blob_bottom_x_	test/test_lstm_layer.cpp	/^  Blob<Dtype> unit_blob_bottom_x_;$/;"	m	class:caffe::LSTMLayerTest	file:
unit_blob_top_c_	test/test_lstm_layer.cpp	/^  Blob<Dtype> unit_blob_top_c_;$/;"	m	class:caffe::LSTMLayerTest	file:
unit_blob_top_h_	test/test_lstm_layer.cpp	/^  Blob<Dtype> unit_blob_top_h_;$/;"	m	class:caffe::LSTMLayerTest	file:
unit_blob_top_vec_	test/test_lstm_layer.cpp	/^  vector<Blob<Dtype>*> unit_blob_top_vec_;$/;"	m	class:caffe::LSTMLayerTest	file:
weight_cpu_gemm	layers/base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::weight_cpu_gemm(const Dtype* input,$/;"	f	class:caffe::BaseConvolutionLayer
weight_gpu_gemm	layers/base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::weight_gpu_gemm(const Dtype* input,$/;"	f	class:caffe::BaseConvolutionLayer
width	test/test_data/generate_sample_data.py	/^width = 10$/;"	v
width	test/test_data/generate_sample_data.py	/^width = 5$/;"	v
width_	test/test_gradient_based_solver.cpp	/^  int num_, channels_, height_, width_;$/;"	m	class:caffe::GradientBasedSolverTest	file:
width_	test/test_hdf5_output_layer.cpp	/^  int width_;$/;"	m	class:caffe::HDF5OutputLayerTest	file:
width_	test/test_memory_data_layer.cpp	/^  int width_;$/;"	m	class:caffe::MemoryDataLayerTest	file:
zero	util/cudnn.cpp	/^const void* dataType<double>::zero =$/;"	m	class:caffe::cudnn::dataType	file:
zero	util/cudnn.cpp	/^const void* dataType<float>::zero =$/;"	m	class:caffe::cudnn::dataType	file:
zeroval	util/cudnn.cpp	/^double dataType<double>::zeroval = 0.0;$/;"	m	class:caffe::cudnn::dataType	file:
zeroval	util/cudnn.cpp	/^float dataType<float>::zeroval = 0.0;$/;"	m	class:caffe::cudnn::dataType	file:
~AccuracyLayerTest	test/test_accuracy_layer.cpp	/^  virtual ~AccuracyLayerTest() {$/;"	f	class:caffe::AccuracyLayerTest
~ArgMaxLayerTest	test/test_argmax_layer.cpp	/^  virtual ~ArgMaxLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::ArgMaxLayerTest
~BatchNormLayerTest	test/test_batch_norm_layer.cpp	/^    virtual ~BatchNormLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::BatchNormLayerTest
~BatchReindexLayerTest	test/test_batch_reindex_layer.cpp	/^  virtual ~BatchReindexLayerTest() {$/;"	f	class:caffe::BatchReindexLayerTest
~BiasLayerTest	test/test_bias_layer.cpp	/^  virtual ~BiasLayerTest() {$/;"	f	class:caffe::BiasLayerTest
~BlobMathTest	test/test_blob.cpp	/^  virtual ~BlobMathTest() { delete blob_; }$/;"	f	class:caffe::BlobMathTest
~BlobSimpleTest	test/test_blob.cpp	/^  virtual ~BlobSimpleTest() { delete blob_; delete blob_preshaped_; }$/;"	f	class:caffe::BlobSimpleTest
~Body	data_reader.cpp	/^DataReader::Body::~Body() {$/;"	f	class:caffe::DataReader::Body
~Caffe	common.cpp	/^Caffe::~Caffe() { }$/;"	f	class:caffe::Caffe
~Caffe	common.cpp	/^Caffe::~Caffe() {$/;"	f	class:caffe::Caffe
~ConcatLayerTest	test/test_concat_layer.cpp	/^  virtual ~ConcatLayerTest() {$/;"	f	class:caffe::ConcatLayerTest
~ConstantFillerTest	test/test_filler.cpp	/^  virtual ~ConstantFillerTest() { delete blob_; }$/;"	f	class:caffe::ConstantFillerTest
~ContrastiveLossLayerTest	test/test_contrastive_loss_layer.cpp	/^  virtual ~ContrastiveLossLayerTest() {$/;"	f	class:caffe::ContrastiveLossLayerTest
~ConvolutionLayerTest	test/test_convolution_layer.cpp	/^  virtual ~ConvolutionLayerTest() {$/;"	f	class:caffe::ConvolutionLayerTest
~CropLayerTest	test/test_crop_layer.cpp	/^  virtual ~CropLayerTest() {$/;"	f	class:caffe::CropLayerTest
~CuDNNConvolutionLayer	layers/cudnn_conv_layer.cpp	/^CuDNNConvolutionLayer<Dtype>::~CuDNNConvolutionLayer() {$/;"	f	class:caffe::CuDNNConvolutionLayer
~CuDNNConvolutionLayerTest	test/test_convolution_layer.cpp	/^  virtual ~CuDNNConvolutionLayerTest() {$/;"	f	class:caffe::CuDNNConvolutionLayerTest
~CuDNNLCNLayer	layers/cudnn_lcn_layer.cpp	/^CuDNNLCNLayer<Dtype>::~CuDNNLCNLayer() {$/;"	f	class:caffe::CuDNNLCNLayer
~CuDNNLRNLayer	layers/cudnn_lrn_layer.cpp	/^CuDNNLRNLayer<Dtype>::~CuDNNLRNLayer() {$/;"	f	class:caffe::CuDNNLRNLayer
~CuDNNLRNLayerTest	test/test_lrn_layer.cpp	/^  virtual ~CuDNNLRNLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::CuDNNLRNLayerTest
~CuDNNNeuronLayerTest	test/test_neuron_layer.cpp	/^  virtual ~CuDNNNeuronLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::CuDNNNeuronLayerTest
~CuDNNPoolingLayer	layers/cudnn_pooling_layer.cpp	/^CuDNNPoolingLayer<Dtype>::~CuDNNPoolingLayer() {$/;"	f	class:caffe::CuDNNPoolingLayer
~CuDNNPoolingLayerTest	test/test_pooling_layer.cpp	/^  virtual ~CuDNNPoolingLayerTest() {$/;"	f	class:caffe::CuDNNPoolingLayerTest
~CuDNNReLULayer	layers/cudnn_relu_layer.cpp	/^CuDNNReLULayer<Dtype>::~CuDNNReLULayer() {$/;"	f	class:caffe::CuDNNReLULayer
~CuDNNSigmoidLayer	layers/cudnn_sigmoid_layer.cpp	/^CuDNNSigmoidLayer<Dtype>::~CuDNNSigmoidLayer() {$/;"	f	class:caffe::CuDNNSigmoidLayer
~CuDNNSoftmaxLayer	layers/cudnn_softmax_layer.cpp	/^CuDNNSoftmaxLayer<Dtype>::~CuDNNSoftmaxLayer() {$/;"	f	class:caffe::CuDNNSoftmaxLayer
~CuDNNSoftmaxLayerTest	test/test_softmax_layer.cpp	/^  virtual ~CuDNNSoftmaxLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::CuDNNSoftmaxLayerTest
~CuDNNTanHLayer	layers/cudnn_tanh_layer.cpp	/^CuDNNTanHLayer<Dtype>::~CuDNNTanHLayer() {$/;"	f	class:caffe::CuDNNTanHLayer
~DBTest	test/test_db.cpp	/^  virtual ~DBTest() { }$/;"	f	class:caffe::DBTest
~DataLayer	layers/data_layer.cpp	/^DataLayer<Dtype>::~DataLayer() {$/;"	f	class:caffe::DataLayer
~DataLayerTest	test/test_data_layer.cpp	/^  virtual ~DataLayerTest() { delete blob_top_data_; delete blob_top_label_; }$/;"	f	class:caffe::DataLayerTest
~DataReader	data_reader.cpp	/^DataReader::~DataReader() {$/;"	f	class:caffe::DataReader
~DeconvolutionLayerTest	test/test_deconvolution_layer.cpp	/^  virtual ~DeconvolutionLayerTest() {$/;"	f	class:caffe::DeconvolutionLayerTest
~DummyDataLayerTest	test/test_dummy_data_layer.cpp	/^  virtual ~DummyDataLayerTest() {$/;"	f	class:caffe::DummyDataLayerTest
~EltwiseLayerTest	test/test_eltwise_layer.cpp	/^  virtual ~EltwiseLayerTest() {$/;"	f	class:caffe::EltwiseLayerTest
~EmbedLayerTest	test/test_embed_layer.cpp	/^  virtual ~EmbedLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::EmbedLayerTest
~EuclideanLossLayerTest	test/test_euclidean_loss_layer.cpp	/^  virtual ~EuclideanLossLayerTest() {$/;"	f	class:caffe::EuclideanLossLayerTest
~FilterLayerTest	test/test_filter_layer.cpp	/^  virtual ~FilterLayerTest() {$/;"	f	class:caffe::FilterLayerTest
~FlattenLayerTest	test/test_flatten_layer.cpp	/^  virtual ~FlattenLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::FlattenLayerTest
~GPUParams	parallel.cpp	/^GPUParams<Dtype>::~GPUParams() {$/;"	f	class:caffe::GPUParams
~GaussianFillerTest	test/test_filler.cpp	/^  virtual ~GaussianFillerTest() { delete blob_; }$/;"	f	class:caffe::GaussianFillerTest
~GradientBasedSolverTest	test/test_gradient_based_solver.cpp	/^  ~GradientBasedSolverTest() {$/;"	f	class:caffe::GradientBasedSolverTest
~HDF5DataLayer	layers/hdf5_data_layer.cpp	/^HDF5DataLayer<Dtype>::~HDF5DataLayer<Dtype>() { }$/;"	f	class:caffe::HDF5DataLayer
~HDF5DataLayerTest	test/test_hdf5data_layer.cpp	/^  virtual ~HDF5DataLayerTest() {$/;"	f	class:caffe::HDF5DataLayerTest
~HDF5OutputLayer	layers/hdf5_output_layer.cpp	/^HDF5OutputLayer<Dtype>::~HDF5OutputLayer<Dtype>() {$/;"	f	class:caffe::HDF5OutputLayer
~HDF5OutputLayerTest	test/test_hdf5_output_layer.cpp	/^  virtual ~HDF5OutputLayerTest() {$/;"	f	class:caffe::HDF5OutputLayerTest
~HingeLossLayerTest	test/test_hinge_loss_layer.cpp	/^  virtual ~HingeLossLayerTest() {$/;"	f	class:caffe::HingeLossLayerTest
~Im2colLayerTest	test/test_im2col_layer.cpp	/^  virtual ~Im2colLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::Im2colLayerTest
~ImageDataLayer	layers/image_data_layer.cpp	/^ImageDataLayer<Dtype>::~ImageDataLayer<Dtype>() {$/;"	f	class:caffe::ImageDataLayer
~ImageDataLayerTest	test/test_image_data_layer.cpp	/^  virtual ~ImageDataLayerTest() {$/;"	f	class:caffe::ImageDataLayerTest
~InfogainLossLayerTest	test/test_infogain_loss_layer.cpp	/^  virtual ~InfogainLossLayerTest() {$/;"	f	class:caffe::InfogainLossLayerTest
~InnerProductLayerTest	test/test_inner_product_layer.cpp	/^  virtual ~InnerProductLayerTest() {$/;"	f	class:caffe::InnerProductLayerTest
~InternalThread	internal_thread.cpp	/^InternalThread::~InternalThread() {$/;"	f	class:caffe::InternalThread
~LRNLayerTest	test/test_lrn_layer.cpp	/^  virtual ~LRNLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::LRNLayerTest
~MSRAFillerTest	test/test_filler.cpp	/^  virtual ~MSRAFillerTest() { delete blob_; }$/;"	f	class:caffe::MSRAFillerTest
~MVNLayerTest	test/test_mvn_layer.cpp	/^  virtual ~MVNLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::MVNLayerTest
~MathFunctionsTest	test/test_math_functions.cpp	/^  virtual ~MathFunctionsTest() {$/;"	f	class:caffe::MathFunctionsTest
~MaxPoolingDropoutTest	test/test_maxpool_dropout_layers.cpp	/^  virtual ~MaxPoolingDropoutTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::MaxPoolingDropoutTest
~MemoryDataLayerTest	test/test_memory_data_layer.cpp	/^  virtual ~MemoryDataLayerTest() {$/;"	f	class:caffe::MemoryDataLayerTest
~MultinomialLogisticLossLayerTest	test/test_multinomial_logistic_loss_layer.cpp	/^  virtual ~MultinomialLogisticLossLayerTest() {$/;"	f	class:caffe::MultinomialLogisticLossLayerTest
~NeuronLayerTest	test/test_neuron_layer.cpp	/^  virtual ~NeuronLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::NeuronLayerTest
~P2PSync	parallel.cpp	/^P2PSync<Dtype>::~P2PSync() {$/;"	f	class:caffe::P2PSync
~PoolingLayerTest	test/test_pooling_layer.cpp	/^  virtual ~PoolingLayerTest() {$/;"	f	class:caffe::PoolingLayerTest
~PositiveUnitballFillerTest	test/test_filler.cpp	/^  virtual ~PositiveUnitballFillerTest() { delete blob_; }$/;"	f	class:caffe::PositiveUnitballFillerTest
~PowerLayerTest	test/test_power_layer.cpp	/^  virtual ~PowerLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::PowerLayerTest
~QueuePair	data_reader.cpp	/^DataReader::QueuePair::~QueuePair() {$/;"	f	class:caffe::DataReader::QueuePair
~ReductionLayerTest	test/test_reduction_layer.cpp	/^  virtual ~ReductionLayerTest() {$/;"	f	class:caffe::ReductionLayerTest
~ReshapeLayerTest	test/test_reshape_layer.cpp	/^  virtual ~ReshapeLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::ReshapeLayerTest
~SPPLayerTest	test/test_spp_layer.cpp	/^  virtual ~SPPLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::SPPLayerTest
~ScaleLayerTest	test/test_scale_layer.cpp	/^  virtual ~ScaleLayerTest() {$/;"	f	class:caffe::ScaleLayerTest
~SigmoidCrossEntropyLossLayerTest	test/test_sigmoid_cross_entropy_loss_layer.cpp	/^  virtual ~SigmoidCrossEntropyLossLayerTest() {$/;"	f	class:caffe::SigmoidCrossEntropyLossLayerTest
~SignalHandler	util/signal_handler.cpp	/^SignalHandler::~SignalHandler() {$/;"	f	class:caffe::SignalHandler
~SliceLayerTest	test/test_slice_layer.cpp	/^  virtual ~SliceLayerTest() {$/;"	f	class:caffe::SliceLayerTest
~SoftmaxLayerTest	test/test_softmax_layer.cpp	/^  virtual ~SoftmaxLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::SoftmaxLayerTest
~SoftmaxWithLossLayerTest	test/test_softmax_with_loss_layer.cpp	/^  virtual ~SoftmaxWithLossLayerTest() {$/;"	f	class:caffe::SoftmaxWithLossLayerTest
~SplitLayerTest	test/test_split_layer.cpp	/^  virtual ~SplitLayerTest() {$/;"	f	class:caffe::SplitLayerTest
~StochasticPoolingLayerTest	test/test_stochastic_pooling.cpp	/^  virtual ~StochasticPoolingLayerTest() {$/;"	f	class:caffe::StochasticPoolingLayerTest
~SyncedMemory	syncedmem.cpp	/^SyncedMemory::~SyncedMemory() {$/;"	f	class:caffe::SyncedMemory
~TanHLayerTest	test/test_tanh_layer.cpp	/^  virtual ~TanHLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::TanHLayerTest
~ThresholdLayerTest	test/test_threshold_layer.cpp	/^  virtual ~ThresholdLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::ThresholdLayerTest
~TileLayerTest	test/test_tile_layer.cpp	/^  virtual ~TileLayerTest() {$/;"	f	class:caffe::TileLayerTest
~Timer	util/benchmark.cpp	/^Timer::~Timer() {$/;"	f	class:caffe::Timer
~UniformFillerTest	test/test_filler.cpp	/^  virtual ~UniformFillerTest() { delete blob_; }$/;"	f	class:caffe::UniformFillerTest
~WindowDataLayer	layers/window_data_layer.cpp	/^WindowDataLayer<Dtype>::~WindowDataLayer<Dtype>() {$/;"	f	class:caffe::WindowDataLayer
~XavierFillerTest	test/test_filler.cpp	/^  virtual ~XavierFillerTest() { delete blob_; }$/;"	f	class:caffe::XavierFillerTest
